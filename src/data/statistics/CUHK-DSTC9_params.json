{
    "Task_1/Domain_cls/main.py": {
        "sklearn": {
            "precision_recall_fscore_support_166": {
                "variable": {
                    "value": "(micro_precision, micro_recall, micro_f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(gt_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_167": {
                "variable": {
                    "value": "(macro_precision, macro_recall, macro_f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(gt_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "RandomSampler_52": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_dataset(args=args, split_type='train', tokenizer=tokenizer, hypothesis_template='User is asking about {}.', System_repsonse_prefix='Assistant says ', User_response_prefix='User says ')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_dataset(args=args, split_type='train', tokenizer=tokenizer, hypothesis_template='User is asking about {}.', System_repsonse_prefix='Assistant says ', User_response_prefix='User says ')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_126": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_dataset(args=args, split_type='val', tokenizer=tokenizer, hypothesis_template='User is asking about {}.', System_repsonse_prefix='Assistant says ', User_response_prefix='User says ')",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_dataset(args=args, split_type='val', tokenizer=tokenizer, hypothesis_template='User is asking about {}.', System_repsonse_prefix='Assistant says ', User_response_prefix='User says ')",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_243": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_244": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_208": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamW(model.parameters(), lr=args.learning_rate, eps=args.adam_epsilon)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_273": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_136": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_150": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__91": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_1/Entity_cls/api_src/surfMatch.py": {
        "sklearn": {}
    },
    "Task_1/Inference/api_src/surfMatch.py": {
        "sklearn": {}
    },
    "Task_1/Inference/official_eval.py": {
        "sklearn": {},
        "torch": {
            "SequentialSampler_23": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "official_dataset.DSTC_NLI_Dataset_for_Pipe(args=args, split_type='val', System_response_prefix='Assistant says ', User_response_prefix='User says ')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_25": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "official_dataset.DSTC_NLI_Dataset_for_Pipe(args=args, split_type='val', System_response_prefix='Assistant says ', User_response_prefix='User says ')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_92": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_93": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_1/Knowledge_cls/api_src/surfMatch.py": {
        "sklearn": {}
    },
    "Task_1/Knowledge_cls/main_train_with_wultiwoz.py": {
        "sklearn": {
            "precision_recall_fscore_support_168": {
                "variable": {
                    "value": "(micro_precision, micro_recall, micro_f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(gt_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_169": {
                "variable": {
                    "value": "(macro_precision, macro_recall, macro_f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(gt_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "RandomSampler_52": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_dataset(args=args, split_type='train', tokenizer=tokenizer, hypothesis_template='User is asking about {}.', System_response_prefix='Assistant says ', User_response_prefix='User says ', if_ood=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_dataset(args=args, split_type='train', tokenizer=tokenizer, hypothesis_template='User is asking about {}.', System_response_prefix='Assistant says ', User_response_prefix='User says ', if_ood=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_125": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_244": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_245": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_210": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamW(model.parameters(), lr=args.learning_rate, eps=args.adam_epsilon)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_135": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_152": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__91": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_1/Knowledge_cls/main_with_pesudo_label.py": {
        "sklearn": {
            "precision_recall_fscore_support_168": {
                "variable": {
                    "value": "(micro_precision, micro_recall, micro_f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(gt_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_169": {
                "variable": {
                    "value": "(macro_precision, macro_recall, macro_f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(gt_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(preds)",
                            "Call"
                        ],
                        [
                            "preds.argmax(axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "RandomSampler_52": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_dataset(args=args, split_type='train', tokenizer=tokenizer, hypothesis_template='User is asking about {}.', System_response_prefix='Assistant says ', User_response_prefix='User says ', if_ood=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_dataset(args=args, split_type='train', tokenizer=tokenizer, hypothesis_template='User is asking about {}.', System_response_prefix='Assistant says ', User_response_prefix='User says ', if_ood=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_125": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_244": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_245": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_210": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamW(model.parameters(), lr=args.learning_rate, eps=args.adam_epsilon)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_135": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForSequenceClassification.from_pretrained(args.model_name_or_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_152": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__91": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_1/Knowledge_cls/official_eval.py": {
        "sklearn": {},
        "torch": {
            "SequentialSampler_25": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "official_dataset.DSTC_NLI_Dataset_for_Pipe(args=args, split_type='val', System_response_prefix='Assistant says ', User_response_prefix='User says ')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "official_dataset.DSTC_NLI_Dataset_for_Pipe(args=args, split_type='val', System_response_prefix='Assistant says ', User_response_prefix='User says ')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_94": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_95": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_2/Module1/BERT-DE/baseline/generate.py": {
        "sklearn": {},
        "torch": {
            "SequentialSampler_61": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResponseGenerationEvalDataset(dataset_args, tokenizer, split_type=args.eval_dataset, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResponseGenerationEvalDataset(dataset_args, tokenizer, split_type=args.eval_dataset, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "eval_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_51": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_178": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_2/Module1/BERT-DE/baseline/main.py": {
        "sklearn": {
            "precision_score_270": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(all_labels).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_pred_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.argmax(logits) for logits in all_preds])",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_preds) > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "recall_score_271": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(all_labels).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_pred_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.argmax(logits) for logits in all_preds])",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_preds) > 0.5",
                            "Compare"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_87": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_210": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='val')",
                            "Call"
                        ],
                        [
                            "dataset_class(dataset_args, tokenizer, split_type=args.eval_dataset, labels=not args.no_labels, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='val')",
                            "Call"
                        ],
                        [
                            "dataset_class(dataset_args, tokenizer, split_type=args.eval_dataset, labels=not args.no_labels, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "eval_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_81": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('runs', args.exp_name) if args.exp_name else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_119": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_255": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_357": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_360": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_75": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_86": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_86": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_221": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_359": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_255": {
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_415": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__158": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__160": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Task_2/Module2/BERT-D/baseline/generate.py": {
        "sklearn": {},
        "torch": {
            "SequentialSampler_61": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResponseGenerationEvalDataset(dataset_args, tokenizer, split_type=args.eval_dataset, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResponseGenerationEvalDataset(dataset_args, tokenizer, split_type=args.eval_dataset, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "eval_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_51": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_178": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_2/Module2/BERT-D/baseline/main.py": {
        "sklearn": {
            "precision_score_270": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(all_labels).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_pred_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.argmax(logits) for logits in all_preds])",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_preds) > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "recall_score_271": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(all_labels).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_pred_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.argmax(logits) for logits in all_preds])",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_preds) > 0.5",
                            "Compare"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_87": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_210": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='val')",
                            "Call"
                        ],
                        [
                            "dataset_class(dataset_args, tokenizer, split_type=args.eval_dataset, labels=not args.no_labels, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='val')",
                            "Call"
                        ],
                        [
                            "dataset_class(dataset_args, tokenizer, split_type=args.eval_dataset, labels=not args.no_labels, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "eval_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_81": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('runs', args.exp_name) if args.exp_name else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_119": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_255": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_357": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_360": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_75": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_86": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_86": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_221": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_359": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_255": {
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_415": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__158": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__160": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Task_3/multiknow/generate.py": {
        "sklearn": {},
        "torch": {
            "SequentialSampler_61": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResponseGenerationEvalDataset(dataset_args, tokenizer, split_type=args.eval_dataset, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResponseGenerationEvalDataset(dataset_args, tokenizer, split_type=args.eval_dataset, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "eval_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_51": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_178": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_3/multiknow/main.py": {
        "sklearn": {
            "precision_score_254": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(all_labels).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_pred_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.argmax(logits) for logits in all_preds])",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_preds) > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "recall_score_255": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(all_labels).reshape(-1)",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_pred_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.argmax(logits) for logits in all_preds])",
                            "Call"
                        ],
                        [
                            "np.concatenate(all_preds) > 0.5",
                            "Compare"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_92": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_205": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='val')",
                            "Call"
                        ],
                        [
                            "dataset_class(dataset_args, tokenizer, split_type=args.eval_dataset, labels=not args.no_labels, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='val')",
                            "Call"
                        ],
                        [
                            "dataset_class(dataset_args, tokenizer, split_type=args.eval_dataset, labels=not args.no_labels, labels_file=args.labels_file)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "eval_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_86": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('runs', args.exp_name) if args.exp_name else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_119": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_239": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_343": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_346": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_91": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_91": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_args, tokenizer, split_type='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_216": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_345": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_239": {
                "data": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_402": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "vars(args)",
                            "Call"
                        ],
                        [
                            "Namespace(**args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__154": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__156": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Task_1/Domain_cls/dataset.py": {
        "torch": {
            "tensor_72": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Task_1/Inference/official_dataset.py": {
        "torch": {}
    },
    "Task_1/Knowledge_cls/dataset_train_with_multiwoz.py": {
        "torch": {
            "tensor_214": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_400": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Task_1/Knowledge_cls/dataset_with_pesudo_label.py": {
        "torch": {
            "tensor_258": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_338": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_399": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Task_1/Knowledge_cls/official_dataset.py": {
        "torch": {}
    },
    "Task_2/Module1/BERT-DE/baseline/dataset.py": {
        "torch": {
            "tensor_375": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(input_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_379": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(token_type_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(attention_mask, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_387": {
                "variable": {
                    "value": "lm_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ids for ins in batch for ids in ins['input_ids']]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad)).view(batch_size, n_candidates, -1)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_388": {
                "variable": {
                    "value": "label_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidates.index(example['knowledge'])",
                            "Call"
                        ],
                        [
                            "[ins['label_idx'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(label_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Task_2/Module1/BERT-DE/baseline/models.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_56": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_2/Module1/BERT-DE/baseline/utils/argument.py": {
        "torch": {}
    },
    "Task_2/Module1/BERT-DE/baseline/utils/model.py": {
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_logits, dim=0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_120": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_37": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ],
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_38": {
                "variable": {
                    "value": "cumulative_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ],
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_80": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_86": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_80": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_32": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ],
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Task_2/Module2/BERT-D/baseline/dataset.py": {
        "torch": {
            "tensor_390": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(input_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_394": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(token_type_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_398": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(attention_mask, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_402": {
                "variable": {
                    "value": "lm_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ids for ins in batch for ids in ins['input_ids']]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad)).view(batch_size, n_candidates, -1)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "label_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidates.index(example['knowledge'])",
                            "Call"
                        ],
                        [
                            "[ins['label_idx'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(label_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Task_2/Module2/BERT-D/baseline/models.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_56": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_2/Module2/BERT-D/baseline/utils/argument.py": {
        "torch": {}
    },
    "Task_2/Module2/BERT-D/baseline/utils/model.py": {
        "torch": {
            "cat_167": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_logits, dim=0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_167": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_37": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ],
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_38": {
                "variable": {
                    "value": "cumulative_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ],
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_80": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_86": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_80": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_32": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ],
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Task_3/multiknow/dataset.py": {
        "torch": {
            "tensor_193": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(input_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(token_type_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "lm_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(lm_labels, -100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(input_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(token_type_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "lm_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(lm_labels, -100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_492": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(input_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_496": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(token_type_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_500": {
                "variable": {
                    "value": "lm_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ins['input_ids'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad))",
                            "Call"
                        ],
                        [
                            "[ins['input_ids'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad))",
                            "Call"
                        ],
                        [
                            "[ids for ins in batch for ids in ins['input_ids']]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad)).view(batch_size, n_candidates, -1)",
                            "Call"
                        ],
                        [
                            "[ins['input_ids'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_501": {
                "variable": {
                    "value": "mc_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[id for ins in batch for id in ins['mc_token_ids']]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mc_token_ids).view(batch_size, n_candidates)",
                            "Call"
                        ],
                        [
                            "[ins['mc_token_ids'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mc_token_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_502": {
                "variable": {
                    "value": "label_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidates.index(example['knowledge'])",
                            "Call"
                        ],
                        [
                            "[ins['label_idx'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(label_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_545": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(input_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_546": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pad_ids(token_type_ids, self.pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_547": {
                "variable": {
                    "value": "mc_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mc_token_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[id for ins in batch for id in ins['mc_token_ids']]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mc_token_ids).view(batch_size, n_candidates)",
                            "Call"
                        ],
                        [
                            "[ins['mc_token_ids'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(mc_token_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_548": {
                "variable": {
                    "value": "lm_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ins['input_ids'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad))",
                            "Call"
                        ],
                        [
                            "[ins['input_ids'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad))",
                            "Call"
                        ],
                        [
                            "[ids for ins in batch for ids in ins['input_ids']]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad)).view(batch_size, n_candidates, -1)",
                            "Call"
                        ],
                        [
                            "[ins['input_ids'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(pad_ids(input_ids, self.pad))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ins['label'] for ins in batch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(labels).float()",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Task_3/multiknow/models.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_56": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Task_3/multiknow/utils/argument.py": {
        "torch": {}
    },
    "Task_3/multiknow/utils/model.py": {
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "all_mc_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_mc_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_mc_logits, dim=0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_120": {
                "variable": {
                    "value": "all_mc_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_37": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_38": {
                "variable": {
                    "value": "cumulative_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_80": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_86": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_80": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_32": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :] / args.temperature",
                            "BinOp"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}