{
    "utils/geometry_utils.py": {
        "sklearn": {
            "NearestNeighbors_118": {
                "variable": {
                    "value": "nbrs",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "auto",
                    "possible_values": []
                }
            },
            "NearestNeighbors_211": {
                "variable": {
                    "value": "nbrs",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "auto",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cos_19": {
                "variable": {
                    "value": "cos",
                    "possible_values": []
                },
                "input": {
                    "value": "theta0",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "cos",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sin_20": {
                "variable": {
                    "value": "sin",
                    "possible_values": []
                },
                "input": {
                    "value": "theta0",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "variable": {
                    "value": "sin",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "R_transpose",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos, sin, -sin, cos)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "R_transpose",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_like_43": {
                "variable": {
                    "value": "zero",
                    "possible_values": []
                },
                "input": {
                    "value": "c0[:, :1]",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "c0",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c0, zero)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cos_48": {
                "variable": {
                    "value": "cos",
                    "possible_values": []
                },
                "input": {
                    "value": "theta0",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "cos",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sin_49": {
                "variable": {
                    "value": "sin",
                    "possible_values": []
                },
                "input": {
                    "value": "theta0",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "sin",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "zero",
                    "possible_values": []
                },
                "input": {
                    "value": "sin",
                    "possible_values": [
                        [
                            "torch.sin(theta0).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.sin(theta0).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_51": {
                "variable": {
                    "value": "one",
                    "possible_values": []
                },
                "input": {
                    "value": "sin",
                    "possible_values": [
                        [
                            "torch.sin(theta0).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.sin(theta0).unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "R_y_transpose",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos, zero, -sin, zero, one, zero, sin, zero, cos)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "R_y_transpose",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "bmm_23": {
                "input": {
                    "value": "obs_local",
                    "possible_values": [
                        [
                            "obs_local.view(b, -1, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_transpose",
                    "possible_values": [
                        [
                            "torch.cat((cos, sin, -sin, cos), dim=1).reshape(-1, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_54": {
                "input": {
                    "value": "obs_local",
                    "possible_values": [
                        [
                            "obs_local.view(b, -1, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_y_transpose",
                    "possible_values": [
                        [
                            "torch.cat((cos, zero, -sin, zero, one, zero, sin, zero, cos), dim=1).reshape(-1, 3, 3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset_loader/AVD.py": {
        "torch": {
            "from_numpy_60": {
                "variable": {
                    "value": "self.point_clouds",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_clouds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(point_clouds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "pose",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_loader/simulated_data.py": {
        "torch": {
            "sum_20": {
                "variable": {
                    "value": "valid_points",
                    "possible_values": []
                },
                "input": {
                    "value": "non_zero_coord",
                    "possible_values": [
                        [
                            "torch.abs(local_point_cloud) > eps",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "self.point_clouds",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_clouds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.asarray(point_clouds)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_19": {
                "input": {
                    "value": "local_point_cloud",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "pose",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            }
        }
    },
    "loss/bce_loss.py": {
        "torch": {}
    },
    "loss/chamfer_dist.py": {
        "torch": {
            "norm_36": {
                "variable": {
                    "value": "D",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "possible_values": [
                        [
                            "input11 - input22",
                            "BinOp"
                        ],
                        [
                            "torch.norm(D, p=2, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "min_38": {
                "variable": {
                    "value": "(dist0, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "possible_values": [
                        [
                            "input11 - input22",
                            "BinOp"
                        ],
                        [
                            "torch.norm(D, p=2, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "min_39": {
                "variable": {
                    "value": "(dist1, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "possible_values": [
                        [
                            "input11 - input22",
                            "BinOp"
                        ],
                        [
                            "torch.norm(D, p=2, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_49": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "criternion(ref_map, tgt_map, valid_ref, valid_tgt)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "loss + current_loss",
                            "BinOp"
                        ],
                        [
                            "loss / total_step",
                            "BinOp"
                        ],
                        [
                            "dist0 + dist1",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_45": {
                "variable": {
                    "value": "dist0",
                    "possible_values": []
                },
                "input": {
                    "value": "dist0",
                    "possible_values": [
                        [
                            "torch.sum(dist0 * valid2, 1) / torch.sum(valid2, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(dist0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "dist1",
                    "possible_values": []
                },
                "input": {
                    "value": "dist1",
                    "possible_values": [
                        [
                            "torch.sum(dist1 * valid1, 1) / torch.sum(valid1, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(dist1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "valid2",
                    "possible_values": [
                        [
                            "valid2.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "valid1",
                    "possible_values": [
                        [
                            "valid1.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_like_25": {
                "input": {
                    "value": "input1",
                    "possible_values": [
                        [
                            "input1 + invalid1 * INF * torch.ones_like(input1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_26": {
                "input": {
                    "value": "input2",
                    "possible_values": [
                        [
                            "input2 + invalid2 * INF * torch.ones_like(input2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/deepmapping.py": {
        "torch": {
            "cat_13": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(occupied_points, unoccupited_points)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "gt",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bs, N, 1]",
                    "possible_values": []
                },
                "device": {
                    "value": "occupied_points.device",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "unoccupied",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "possible_values": [
                        [
                            "obs_local.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "L * n_samples",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k",
                    "possible_values": []
                },
                "device": {
                    "value": "local_point_cloud.device",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "fac",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "bce_weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.valid_points, valid_unoccupied_points)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "bce_weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.valid_points, valid_unoccupied_points)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "Linear_6": {
                "variable": {
                    "value": "li",
                    "possible_values": []
                },
                "in_features": {
                    "value": "din",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dout",
                    "possible_values": []
                }
            },
            "Conv1d_46": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ],
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv1d_47": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ],
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv1d_48": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ],
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "MaxPool1d_50": {
                "variable": {
                    "value": "self.mp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "n_points",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ],
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ],
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ],
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv4",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ],
                        [
                            "int(np.floor(k / 2)) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_74": {
                "variable": {
                    "value": "self.amp",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "script/incremental_icp.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "pose_est",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose_est",
                    "possible_values": [
                        [
                            "np.zeros((n_pc, 3), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pose_est)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "script/o3d_icp.py": {
        "torch": {}
    },
    "script/train_2D.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "SimulatedPointCloud(opt.data_dir, init_pose)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "999",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "init_pose",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_pose_np",
                    "possible_values": [
                        [
                            "np.load(opt.init)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "script/train_AVD.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "AVD(opt.data_dir, opt.traj, opt.subsample_rate)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "999",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "possible_values": [
                        [
                            "os.path.join(working_dir, 'opt.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_19": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(save_name)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_name",
                    "possible_values": [
                        [
                            "os.path.join(working_dir, 'opt.json')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/vis_utils.py": {
        "torch": {
            "is_tensor_8": {
                "obj": {
                    "value": "point_cloud",
                    "possible_values": [
                        [
                            "point_cloud.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_10": {
                "obj": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "pose.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_12": {
                "obj": {
                    "value": "valid_points",
                    "possible_values": [
                        [
                            "valid_points.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}