{
    "datasets/shapenetv2_newsdf_dataset.py": {
        "torch": {
            "ShuffleWarpSampler_52": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.data_source": {
                    "value": "data_source",
                    "possible_values": []
                },
                "self.n_repeats": {
                    "value": "n_repeats",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SequentialWarpSampler_68": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.data_source": {
                    "value": "data_source",
                    "possible_values": []
                },
                "self.n_repeats": {
                    "value": "n_repeats",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "NPYLoaderN_85": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.filelist": {
                    "value": "filelist",
                    "possible_values": []
                },
                "self.npoints_fine": {
                    "value": "npoints_fine",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.npoints_coarse": {
                    "value": "npoints_coarse",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_num_threads_8": {
                "int": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "initial_seed_19": {
                "variable": {
                    "value": "seed",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "NPYLoaderN(train_data_list, args.train.num_sample_points.fine, args.train.num_sample_points.coarse)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train.batch_size",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "ShuffleWarpSampler(train_dataset, n_repeats=args.train.num_repeats)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.train.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "np_collate_dict",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_np_seed",
                    "possible_values": []
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "NPYLoaderN(test_data_list, args.test.num_sample_points.fine, args.test.num_sample_points.coarse)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test.batch_size",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "possible_values": [
                        [
                            "SequentialWarpSampler(test_dataset, n_repeats=args.test.num_repeats)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.test.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "np_collate_dict",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_np_seed",
                    "possible_values": []
                }
            },
            "set_num_threads_18": {
                "int": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_24": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch_z_z]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(c, axis=0)",
                    "possible_values": []
                }
            },
            "randperm_61": {
                "variable": {
                    "value": "sub_epoch",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.data_source)",
                    "possible_values": []
                }
            },
            "is_tensor_33": {
                "obj": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "b",
                    "possible_values": [
                        [
                            "batch",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "device_186": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "attrs_mod",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "attrs_mod",
                    "possible_values": [
                        [
                            "np.array(data['modified_attrs'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(attrs_mod)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_111": {
                "variable": {
                    "value": "attrs_mod[:, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "attrs_mod[:, 0]",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "attrs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "attrs",
                    "possible_values": [
                        [
                            "np.array(data['attrs'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(attrs)",
                            "Call"
                        ],
                        [
                            "attrswapaxis(attrs)",
                            "Call"
                        ],
                        [
                            "self.trainer.prim_attr_net(feature)",
                            "Call"
                        ],
                        [
                            "attrs.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "attrswapaxis(attrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_113": {
                "variable": {
                    "value": "attrs[:, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "attrs[:, 0]",
                    "possible_values": []
                }
            },
            "exp_126": {
                "variable": {
                    "value": "attrs[:, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "attrs[:, 0]",
                    "possible_values": []
                }
            },
            "exp_138": {
                "variable": {
                    "value": "attrs[:, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "attrs[:, 0]",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[1, 1, -1, -1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "mean_117": {
                "input": {
                    "value": "feat ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "feature",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "existing_feature",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "ndarray": {
                    "value": "feature",
                    "possible_values": [
                        [
                            "np.array(data['feature'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(data['feature'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(feature)",
                            "Call"
                        ],
                        [
                            "self.trainer.get_known_latent(np.random.choice(num_features))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(existing_feature).to(self.trainer.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "feature",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature",
                    "possible_values": [
                        [
                            "np.array(data['feature'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(data['feature'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(feature)",
                            "Call"
                        ],
                        [
                            "self.trainer.get_known_latent(np.random.choice(num_features))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(existing_feature).to(self.trainer.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_123": {
                "input": {
                    "value": "torch.abs(x - gt) * mask_",
                    "possible_values": []
                }
            },
            "abs_115": {
                "input": {
                    "value": "attrs_mod - attrs",
                    "possible_values": []
                }
            },
            "abs_123": {
                "input": {
                    "value": "x - gt",
                    "possible_values": []
                }
            },
            "clamp_123": {
                "input": {
                    "value": "loss_kld",
                    "possible_values": [
                        [
                            "torch.mean(0.5 * torch.mean(feat ** 2, dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "beta",
                    "possible_values": [
                        [
                            "data['beta']",
                            "Subscript"
                        ]
                    ]
                },
                "max": {
                    "value": "None",
                    "possible_values": []
                }
            }
        }
    },
    "extensions/mesh2sdf2_cuda/setup.py": {
        "torch": {}
    },
    "models/deepsdf_mlp9.py": {
        "torch": {
            "Decoder_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "in2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, in1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.net1",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.utils.weight_norm(nn.Linear(in_ch, feat_ch))",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.net2",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.utils.weight_norm(nn.Linear(feat_ch, feat_ch))",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.net1",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.utils.weight_norm(nn.Linear(in_ch, feat_ch))",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.net2",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.utils.weight_norm(nn.Linear(feat_ch, feat_ch))",
                    "possible_values": []
                }
            },
            "tanh_87": {
                "variable": {
                    "value": "out2",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "possible_values": [
                        [
                            "self.net2(in2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_19": {
                "module": {
                    "value": "nn.Linear(in_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "weight_norm_21": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "weight_norm_23": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "weight_norm_25": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch - in_ch)",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "weight_norm_30": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "weight_norm_32": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "weight_norm_34": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "weight_norm_36": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_ch",
                    "possible_values": [
                        [
                            "cfg.out_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "weight_norm_42": {
                "module": {
                    "value": "nn.Linear(in_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "p": {
                    "value": "dropout_prob",
                    "possible_values": [
                        [
                            "cfg.dropout_prob",
                            "Attribute"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "weight_norm_45": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "p": {
                    "value": "dropout_prob",
                    "possible_values": [
                        [
                            "cfg.dropout_prob",
                            "Attribute"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "weight_norm_48": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "p": {
                    "value": "dropout_prob",
                    "possible_values": [
                        [
                            "cfg.dropout_prob",
                            "Attribute"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "weight_norm_51": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch - in_ch)",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "p": {
                    "value": "dropout_prob",
                    "possible_values": [
                        [
                            "cfg.dropout_prob",
                            "Attribute"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "weight_norm_57": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "dropout_prob",
                    "possible_values": [
                        [
                            "cfg.dropout_prob",
                            "Attribute"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "weight_norm_60": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "p": {
                    "value": "dropout_prob",
                    "possible_values": [
                        [
                            "cfg.dropout_prob",
                            "Attribute"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "weight_norm_63": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_65": {
                "p": {
                    "value": "dropout_prob",
                    "possible_values": [
                        [
                            "cfg.dropout_prob",
                            "Attribute"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "weight_norm_66": {
                "module": {
                    "value": "nn.Linear(feat_ch, feat_ch)",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "p": {
                    "value": "dropout_prob",
                    "possible_values": [
                        [
                            "cfg.dropout_prob",
                            "Attribute"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_ch",
                    "possible_values": [
                        [
                            "cfg.out_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "cfg.in_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch - in_ch",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "in_ch",
                    "possible_values": [
                        [
                            "cfg.in_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch - in_ch",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_ch",
                    "possible_values": [
                        [
                            "cfg.hidden_ch",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "models/embeddings.py": {
        "torch": {
            "VADLogVar_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.cfg": {
                    "value": "cfg",
                    "possible_values": []
                },
                "self.N": {
                    "value": "N",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": []
                },
                "Parameter_13": {
                    "variable": {
                        "value": "self.weight_mu",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(N, dim)",
                        "possible_values": []
                    }
                },
                "Parameter_14": {
                    "variable": {
                        "value": "self.weight_logvar",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(N, dim)",
                        "possible_values": []
                    }
                }
            },
            "AD_62": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.cfg": {
                    "value": "cfg",
                    "possible_values": []
                },
                "self.N": {
                    "value": "N",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": []
                },
                "Parameter_68": {
                    "variable": {
                        "value": "self.embed_params",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(N, dim)",
                        "possible_values": []
                    }
                }
            },
            "exp_44": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "possible_values": []
                }
            },
            "sqrt_85": {
                "variable": {
                    "value": "batch_norms",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(batch_embed.data ** 2, dim=-1, keepdim=True)",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "variable": {
                    "value": "batch_scale_factors",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_norms",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum(batch_embed.data ** 2, dim=-1, keepdim=True))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.cfg.max_norm",
                    "possible_values": []
                },
                "max": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "randn_like_46": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_49": {
                "variable": {
                    "value": "eps_aug",
                    "possible_values": []
                },
                "*size": {
                    "value": "std.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "num_augment_pts",
                    "possible_values": [
                        [
                            "kwargs['num_augment_pts']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "std.size(1)",
                    "possible_values": []
                },
                "device": {
                    "value": "std.device",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "batch_embed.data ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_like_52": {
                "variable": {
                    "value": "eps_aug",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/lossfuns.py": {
        "torch": {
            "clamp_9": {
                "variable": {
                    "value": "pred_dist_trunc",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dist",
                    "possible_values": []
                },
                "min": {
                    "value": "-trunc",
                    "possible_values": []
                },
                "max": {
                    "value": "trunc",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_10": {
                "variable": {
                    "value": "gt_dist_trunc",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_dist",
                    "possible_values": []
                },
                "min": {
                    "value": "-trunc",
                    "possible_values": []
                },
                "max": {
                    "value": "trunc",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_11": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dist_trunc - gt_dist_trunc",
                    "possible_values": []
                }
            },
            "clamp_16": {
                "variable": {
                    "value": "pred_dist_lower",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dist",
                    "possible_values": []
                },
                "min": {
                    "value": "None",
                    "possible_values": []
                },
                "max": {
                    "value": "trunc",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_17": {
                "variable": {
                    "value": "pred_dist_upper",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dist",
                    "possible_values": []
                },
                "min": {
                    "value": "-trunc",
                    "possible_values": []
                },
                "max": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "sum_22": {
                "variable": {
                    "value": "loss_valid",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pred_dist - gt_dist) * valid_mask.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "loss_lower",
                    "possible_values": []
                },
                "input": {
                    "value": "(trunc - pred_dist_lower) * pos_trunced_mask.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_24": {
                "variable": {
                    "value": "loss_upper",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred_dist_upper + trunc) * neg_trunced_mask.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "num_valid",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask",
                    "possible_values": [
                        [
                            "~(pos_trunced_mask | neg_trunced_mask)",
                            "UnaryOp"
                        ],
                        [
                            "(gt_dist >= 0.0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "(gt_dist - pred_dist) ** 2 * valid_mask",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "torch.clamp(pred_dist, 0.0, None) * (1.0 - valid_mask)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "abs_22": {
                "input": {
                    "value": "pred_dist - gt_dist",
                    "possible_values": []
                }
            },
            "clamp_34": {
                "input": {
                    "value": "pred_dist",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "None",
                    "possible_values": []
                }
            }
        }
    },
    "models/sdfsphere.py": {
        "torch": {
            "SDFFun_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "min_27": {
                "variable": {
                    "value": "(d, loc)",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((x - p[:, :, :, 1:4]) ** 2, dim=-1)) - torch.exp(logr)",
                            "BinOp"
                        ],
                        [
                            "bsmin(d, dim=-1, k=self.smooth_factor, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "logsumexp_7": {
                "input": {
                    "value": "-k * a",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_25": {
                "input": {
                    "value": "torch.sum((x - p[:, :, :, 1:4]) ** 2, dim=-1)",
                    "possible_values": []
                }
            },
            "exp_25": {
                "input": {
                    "value": "logr",
                    "possible_values": [
                        [
                            "p[:, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_33": {
                "variable": {
                    "value": "(d, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum((x - p[:, :, :, 1:4]) ** 2, dim=-1)) - torch.exp(logr)",
                            "BinOp"
                        ],
                        [
                            "bsmin(d, dim=-1, k=self.smooth_factor, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "(x - p[:, :, :, 1:4]) ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "sample_sdfs.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "mesh_t",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mesh.astype(np.float32)",
                    "possible_values": []
                }
            },
            "device_48": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "empty_73": {
                "variable": {
                    "value": "noise_vec",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_surface_samples, 3]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_74": {
                "variable": {
                    "value": "noise_vec2",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_sphere_samples, 3]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_75": {
                "variable": {
                    "value": "noise_vec3",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_sphere_samples, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_44": {
                "input": {
                    "value": "torch.sum(x ** 2)",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "pcl",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pcl_library.mesh2pcl(mesh.cpu().numpy(), num_surface_samples)",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "all_points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points1, points2, points3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "xyzd",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_points, sample_dist.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "x ** 2",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "all_points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points1, points2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "xyzd_sur",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_points, sample_dist.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_101": {
                "input": {
                    "value": "torch.sum(noise_vec2 ** 2, dim=-1, keepdim=True)",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "noise_vec2 ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "toolbox/sdf_renderer.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "rot_mat",
                    "possible_values": []
                },
                "data": {
                    "value": "[cos_b, 0, -sin_b, sin_a * sin_b, cos_a, sin_a * cos_b, cos_a * sin_b, -sin_a, cos_a * cos_b]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "ray_dir.device",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "ray_dir",
                    "possible_values": []
                },
                "input": {
                    "value": "ray_dir",
                    "possible_values": [
                        [
                            "torch.matmul(ray_dir, rot_mat)",
                            "Call"
                        ],
                        [
                            "torch.zeros([1, target_res[1], target_res[0], 3], device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.empty([1, target_res[1], target_res[0], 3], device=self.device)",
                            "Call"
                        ],
                        [
                            "F.normalize(ray_dir, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rot_mat",
                    "possible_values": [
                        [
                            "torch.tensor([cos_b, 0, -sin_b, sin_a * sin_b, cos_a, sin_a * cos_b, cos_a * sin_b, -sin_a, cos_a * cos_b], dtype=torch.float32, device=ray_dir.device)",
                            "Call"
                        ],
                        [
                            "rot_mat.reshape(3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "ray_ori",
                    "possible_values": []
                },
                "input": {
                    "value": "ray_ori",
                    "possible_values": [
                        [
                            "torch.matmul(ray_ori, rot_mat)",
                            "Call"
                        ],
                        [
                            "torch.empty([1, target_res[1], target_res[0], 3], device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros([1, target_res[1], target_res[0], 3], device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rot_mat",
                    "possible_values": [
                        [
                            "torch.tensor([cos_b, 0, -sin_b, sin_a * sin_b, cos_a, sin_a * cos_b, cos_a * sin_b, -sin_a, cos_a * cos_b], dtype=torch.float32, device=ray_dir.device)",
                            "Call"
                        ],
                        [
                            "rot_mat.reshape(3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_33": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "input": {
                    "value": "ray_dir * ray_dir",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "isnan_90": {
                "variable": {
                    "value": "bg_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "ray_travel",
                    "possible_values": [
                        [
                            "sol1.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.ray_travel",
                            "Attribute"
                        ],
                        [
                            "ray_travel + march_dist * self.cfg.sdf_gain",
                            "BinOp"
                        ],
                        [
                            "torch.min(ray_travel, ray_travel_far)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "ray_dir",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, target_res[1], target_res[0], 3]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "empty_69": {
                "variable": {
                    "value": "ray_ori",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, target_res[1], target_res[0], 3]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "linspace_70": {
                "variable": {
                    "value": "ray_ori[:, :, :, 0]",
                    "possible_values": []
                },
                "start": {
                    "value": "-(hor_scale / 2.0)",
                    "possible_values": []
                },
                "end": {
                    "value": "hor_scale / 2.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "target_res[0]",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "ray_ori[:, :, :, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "linspace_71": {
                "variable": {
                    "value": "ray_ori[:, :, :, 1]",
                    "possible_values": []
                },
                "start": {
                    "value": "-(ver_scale / 2.0)",
                    "possible_values": []
                },
                "end": {
                    "value": "ver_scale / 2.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "target_res[1]",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "ray_ori[:, :, :, 1]",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "normalize_152": {
                "variable": {
                    "value": "sun_dir",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([0.8, -0.4, 0.2], dtype=torch.float32, device=self.device)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "sun_color",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.7, 0.5]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "clamp_154": {
                "variable": {
                    "value": "sun_dif",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(normals, sun_dir).unsqueeze(-1)",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "sky_dir",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, -1.0, 0.0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "sky_color",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.1, 0.3]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "clamp_158": {
                "variable": {
                    "value": "sky_dif",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 + 0.5 * torch.matmul(normals, sky_dir).unsqueeze(-1)",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "framebuffer[bg_mask[..., 0], :]",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cfg.bg_color",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "ray_dir * ray_ori",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_35": {
                "input": {
                    "value": "ray_ori * ray_ori",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "empty_76": {
                "variable": {
                    "value": "ray_dir",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, target_res[1], target_res[0], 3]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "linspace_77": {
                "variable": {
                    "value": "ray_dir[:, :, :, 0]",
                    "possible_values": []
                },
                "start": {
                    "value": "-(hor_scale / 2.0)",
                    "possible_values": []
                },
                "end": {
                    "value": "hor_scale / 2.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "target_res[0]",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "ray_dir[:, :, :, 0]",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "linspace_78": {
                "variable": {
                    "value": "ray_dir[:, :, :, 1]",
                    "possible_values": []
                },
                "start": {
                    "value": "-(ver_scale / 2.0)",
                    "possible_values": []
                },
                "end": {
                    "value": "ver_scale / 2.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "target_res[1]",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "variable": {
                    "value": "ray_dir[:, :, :, 1]",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "normalize_80": {
                "variable": {
                    "value": "ray_dir",
                    "possible_values": []
                },
                "input": {
                    "value": "ray_dir",
                    "possible_values": [
                        [
                            "torch.matmul(ray_dir, rot_mat)",
                            "Call"
                        ],
                        [
                            "torch.zeros([1, target_res[1], target_res[0], 3], device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.empty([1, target_res[1], target_res[0], 3], device=self.device)",
                            "Call"
                        ],
                        [
                            "F.normalize(ray_dir, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "ray_ori",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, target_res[1], target_res[0], 3]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clamp_122": {
                "variable": {
                    "value": "march_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "march_dist",
                    "possible_values": [
                        [
                            "dists.reshape(ray_pos.size(0), ray_pos.size(1), ray_pos.size(2), 1)",
                            "Call"
                        ],
                        [
                            "march_dist - self.cfg.sdf_iso_level",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(march_dist, -self.cfg.sdf_clamp, self.cfg.sdf_clamp)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.cfg.sdf_clamp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.cfg.sdf_clamp",
                    "possible_values": []
                }
            },
            "min_124": {
                "variable": {
                    "value": "ray_travel",
                    "possible_values": []
                },
                "input": {
                    "value": "ray_travel",
                    "possible_values": [
                        [
                            "sol1.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.ray_travel",
                            "Attribute"
                        ],
                        [
                            "ray_travel + march_dist * self.cfg.sdf_gain",
                            "BinOp"
                        ],
                        [
                            "torch.min(ray_travel, ray_travel_far)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "k1",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, -1, -1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "k2",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1, -1, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "k3",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1, 1, -1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "k4",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "normalize_136": {
                "variable": {
                    "value": "normals",
                    "possible_values": []
                },
                "input": {
                    "value": "k1 * self.scene_fun(sdf_fun, ray_pos + eps * k1)[0] + k2 * self.scene_fun(sdf_fun, ray_pos + eps * k2)[0] + k3 * self.scene_fun(sdf_fun, ray_pos + eps * k3)[0] + k4 * self.scene_fun(sdf_fun, ray_pos + eps * k4)[0]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_37": {
                "input": {
                    "value": "delta",
                    "possible_values": [
                        [
                            "b ** 2 - 4 * a * c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_38": {
                "input": {
                    "value": "delta",
                    "possible_values": [
                        [
                            "b ** 2 - 4 * a * c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_147": {
                "variable": {
                    "value": "normals",
                    "possible_values": []
                },
                "input": {
                    "value": "ray_pos.grad",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "[0.8, -0.4, 0.2]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "input": {
                    "value": "normals",
                    "possible_values": [
                        [
                            "F.normalize(k1 * self.scene_fun(sdf_fun, ray_pos + eps * k1)[0] + k2 * self.scene_fun(sdf_fun, ray_pos + eps * k2)[0] + k3 * self.scene_fun(sdf_fun, ray_pos + eps * k3)[0] + k4 * self.scene_fun(sdf_fun, ray_pos + eps * k4)[0], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(ray_pos.grad, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sun_dir",
                    "possible_values": [
                        [
                            "F.normalize(torch.tensor([0.8, -0.4, 0.2], dtype=torch.float32, device=self.device), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_154": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "enable_grad_143": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "input": {
                    "value": "normals",
                    "possible_values": [
                        [
                            "F.normalize(k1 * self.scene_fun(sdf_fun, ray_pos + eps * k1)[0] + k2 * self.scene_fun(sdf_fun, ray_pos + eps * k2)[0] + k3 * self.scene_fun(sdf_fun, ray_pos + eps * k3)[0] + k4 * self.scene_fun(sdf_fun, ray_pos + eps * k4)[0], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(ray_pos.grad, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sky_dir",
                    "possible_values": [
                        [
                            "torch.tensor([0.0, -1.0, 0.0], dtype=torch.float32, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_158": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_like_146": {
                "input": {
                    "value": "dd",
                    "possible_values": [
                        [
                            "self.scene_fun(sdf_fun, ray_pos)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "data": {
                    "value": "self.cfg.fg_color",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "clamp_183": {
                "input": {
                    "value": "framebuffer",
                    "possible_values": [
                        [
                            "sun_dif * colors1",
                            "BinOp"
                        ],
                        [
                            "framebuffer + sky_dif * colors2",
                            "BinOp"
                        ],
                        [
                            "framebuffer ** (1 / 2.2)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/base_trainer.py": {
        "torch": {
            "BaseTrainer_4": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.cfg": {
                    "value": "cfg",
                    "possible_values": []
                },
                "self.args": {
                    "value": "args",
                    "possible_values": []
                },
                "self.device": {
                    "value": "device",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/demo_trainer.py": {
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "data_indices",
                    "possible_values": []
                },
                "data": {
                    "value": "[idx]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "mean_48": {
                "input": {
                    "value": "latent_codes_coarse ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "data_indices",
                    "possible_values": []
                },
                "data": {
                    "value": "range(len(self.sid2idx))",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "split_107": {
                "variable": {
                    "value": "data_indices_batch",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_indices",
                    "possible_values": [
                        [
                            "torch.tensor([idx], dtype=torch.long, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(range(len(self.sid2idx)), dtype=torch.long, device=self.device)",
                            "Call"
                        ],
                        [
                            "data_indices_batch",
                            "Name"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, p]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "mean_64": {
                "input": {
                    "value": "latent_codes_coarse ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/dualsdf_trainer.py": {
        "torch": {
            "mean_16": {
                "variable": {
                    "value": "KLD",
                    "possible_values": []
                },
                "input": {
                    "value": "KLD",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp(), dim=-1)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(KLD)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "data_indices",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.sid2idx[x] for x in sid_list]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "inp",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, p]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_171": {
                "variable": {
                    "value": "dists",
                    "possible_values": []
                },
                "input": {
                    "value": "attrs[:, :, 1:] ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "clamp_172": {
                "variable": {
                    "value": "dists",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "possible_values": [
                        [
                            "self.deepsdf_net(inp)",
                            "Call"
                        ],
                        [
                            "self.prim_sdf_fun(attrs, p)",
                            "Call"
                        ],
                        [
                            "torch.sum(attrs[:, :, 1:] ** 2, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(dists, 1.05, None)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.05",
                    "possible_values": []
                },
                "max": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "sum_173": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "dists - 1.05",
                    "possible_values": []
                }
            },
            "mean_214": {
                "variable": {
                    "value": "loss_fine",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_fine.detach()",
                    "possible_values": []
                }
            },
            "mean_215": {
                "variable": {
                    "value": "loss_coarse",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_coarse.detach()",
                    "possible_values": []
                }
            },
            "load_244": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optim",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "cfg.betas",
                    "possible_values": []
                },
                "eps": {
                    "value": "cfg.eps",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "loss_s",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss1, loss2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "std_127": {
                "variable": {
                    "value": "self.additional_log_info[vad_batch_mu_std]",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mu",
                    "possible_values": [
                        [
                            "batch_latent_dict['mu']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_133": {
                "variable": {
                    "value": "self.additional_log_info[vad_batch_sigma_mean]",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_sigma",
                    "possible_values": [
                        [
                            "batch_latent_dict['std']",
                            "Subscript"
                        ],
                        [
                            "torch.exp(0.5 * batch_logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_233": {
                "obj": {
                    "value": "{'trainer_state_dict': self.state_dict(), 'optim_latentcode_state_dict': self.optim_latentcode.state_dict(), 'optim_deepsdf_state_dict': self.optim_deepsdf.state_dict(), 'optim_primitive_state_dict': self.optim_primitive.state_dict(), 'epoch': epoch, 'step': step}",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": [
                        [
                            "os.path.join(self.cfg.save_dir, save_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_73": {
                "variable": {
                    "value": "optim",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "possible_values": []
                }
            },
            "exp_132": {
                "variable": {
                    "value": "batch_sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * batch_logvar",
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "clamped_l1(pred, gt, trunc=cfg.trunc)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "mean_115": {
                "input": {
                    "value": "torch.logsumexp(loss_s, dim=-1)",
                    "possible_values": []
                }
            },
            "mean_117": {
                "input": {
                    "value": "loss1 + loss2",
                    "possible_values": []
                }
            },
            "logsumexp_115": {
                "input": {
                    "value": "loss_s",
                    "possible_values": [
                        [
                            "torch.stack([loss1, loss2], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "torch.abs(pred - gt)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "abs_103": {
                "input": {
                    "value": "pred - gt",
                    "possible_values": []
                }
            }
        }
    }
}