{
    "dex_ycb_toolkit/grasp_eval.py": {
        "torch": {
            "from_numpy_184": {
                "variable": {
                    "value": "pose_m",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label['pose_m']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pose_m)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "mano_betas",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mano_betas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(sample['mano_betas'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mano_betas).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_189": {
                "variable": {
                    "value": "mano_betas",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dex_ycb_toolkit/layers/mano_group_layer.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MANOLayer(s, b) for (s, b) in zip(self._sides, self._betas)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l.root_trans for l in self._layers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.zeros((p.size(0), 0, 3), dtype=torch.float32, device=self.f.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(v, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.zeros((p.size(0), 0, 3), dtype=torch.float32, device=self.f.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(j, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pose[:, 51 * i + 0:51 * i + 48] for i in range(self._num_obj)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pose[:, 51 * i + 48:51 * i + 51] for i in range(self._num_obj)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "(p.size(0), 0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.f.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "(p.size(0), 0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.f.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dex_ycb_toolkit/layers/mano_layer.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self._mano_layer.th_J_regressor[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(self._mano_layer.th_shapedirs, self.b.transpose(0, 1)).permute(2, 0, 1) + self._mano_layer.th_v_template",
                            "BinOp"
                        ],
                        [
                            "v / 1000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_38": {
                "input": {
                    "value": "self._mano_layer.th_shapedirs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.b.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_38": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dex_ycb_toolkit/layers/ycb_group_layer.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[YCBLayer(i) for i in self._ids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.zeros((p.size(0), 0, 3), dtype=torch.float32, device=self.f.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(v, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.zeros((p.size(0), 0, 3), dtype=torch.float32, device=self.f.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(n, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pose[:, 6 * i + 0:6 * i + 3] for i in range(self._num_obj)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pose[:, 6 * i + 3:6 * i + 6] for i in range(self._num_obj)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "(p.size(0), 0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.f.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "(p.size(0), 0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.f.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dex_ycb_toolkit/layers/ycb_layer.py": {
        "torch": {
            "norm_94": {
                "variable": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "rv + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_96": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(rv + 1e-08, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(s, c)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_96": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_97": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(rv + 1e-08, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(s, c)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_98": {
                "variable": {
                    "value": "I",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "rv.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(rv + 1e-08, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(s, c)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_100": {
                "variable": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.stack((z, -axis[:, 2], axis[:, 1]), dim=1), torch.stack((axis[:, 2], z, -axis[:, 0]), dim=1), torch.stack((-axis[:, 1], axis[:, 0], z), dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dcm[:, 2, 1] - dcm[:, 1, 2], dcm[:, 0, 2] - dcm[:, 2, 0], dcm[:, 1, 0] - dcm[:, 0, 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_127": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cos(angle).unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "(dcm[:, 0, 0] + dcm[:, 1, 1] + dcm[:, 2, 2] - 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(c, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atan2_128": {
                "variable": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sin(angle).unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.norm(X, p=2, dim=1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cos(angle).unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "(dcm[:, 0, 0] + dcm[:, 1, 1] + dcm[:, 2, 2] - 1) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(c, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_129": {
                "variable": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dcm[:, 0, 0], dcm[:, 1, 1], dcm[:, 2, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_130": {
                "variable": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(Y - c.unsqueeze(1)) / (1 - c.unsqueeze(1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "rv",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(dcm.size(0), 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "dcm.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._obj.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_47": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._obj.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_48": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g.f_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rv2dcm(r)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_80": {
                "variable": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_125": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((dcm[:, 2, 1] - dcm[:, 1, 2], dcm[:, 0, 2] - dcm[:, 2, 0], dcm[:, 1, 0] - dcm[:, 0, 1]), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "input": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rv2dcm(r)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_79": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_101": {
                "tensors": {
                    "value": "(z, -axis[:, 2], axis[:, 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "(axis[:, 2], z, -axis[:, 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_103": {
                "tensors": {
                    "value": "(-axis[:, 1], axis[:, 0], z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_105": {
                "input": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((torch.stack((z, -axis[:, 2], axis[:, 1]), dim=1), torch.stack((axis[:, 2], z, -axis[:, 0]), dim=1), torch.stack((-axis[:, 1], axis[:, 0], z), dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((torch.stack((z, -axis[:, 2], axis[:, 1]), dim=1), torch.stack((axis[:, 2], z, -axis[:, 0]), dim=1), torch.stack((-axis[:, 1], axis[:, 0], z), dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_137": {
                "input": {
                    "value": "X[i3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dex_ycb_toolkit/sequence_loader.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "inverse_105": {
                "variable": {
                    "value": "self._tag_R_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._tag_R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_106": {
                "variable": {
                    "value": "self._tag_t_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._tag_R_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "-self._tag_t",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_110": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(self._h)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(self._w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x / (self._w - 1), y / (self._h - 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_118": {
                "variable": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self._h, self._w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "xy1s",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_119": {
                "variable": {
                    "value": "xy1s",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_320": {
                "variable": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d.astype(np.float32) / 1000",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(d).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_321": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "d.view(1, -1, self._w * self._h).expand(3, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self._p[c].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_324": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self._t[c].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat1": {
                    "value": "self._R[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "p.view(3, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_325": {
                "variable": {
                    "value": "p_tag",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self._tag_t_inv.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat1": {
                    "value": "self._tag_R_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(self._K_inv[c], xy1s)",
                            "Call"
                        ],
                        [
                            "torch.mul(d.view(1, -1, self._w * self._h).expand(3, -1, -1), self._p[c].unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "torch.addmm(self._t[c].unsqueeze(1), self._R[c], p.view(3, -1))",
                            "Call"
                        ],
                        [
                            "p.t().view(-1, self._h, self._w, 3)",
                            "Call"
                        ],
                        [
                            "p.squeeze(0)",
                            "Call"
                        ],
                        [
                            "p.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat([r, t], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([R, t.unsqueeze(2)], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([p, torch.tensor([[[0, 0, 0, 1]]] * R.size(0), dtype=torch.float32, device=self._device)], dim=1)",
                            "Call"
                        ],
                        [
                            "p.view(-1, self._ycb_group_layer.num_obj * 6)",
                            "Call"
                        ],
                        [
                            "p.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_122": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self._K_inv[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "xy1s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((x, y, ones), dim=2).view(self._w * self._h, 3).t()",
                            "Call"
                        ],
                        [
                            "xy1s.to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "variable": {
                    "value": "pose",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mano_pose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['pose_m']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(mano_pose, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_371": {
                "variable": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Rot.from_quat(q).as_dcm().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R).to(self._device)",
                            "Call"
                        ],
                        [
                            "rv2dcm(r)",
                            "Call"
                        ],
                        [
                            "torch.bmm(R_c.expand(R.size(0), -1, -1), R)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_372": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pose[:, 4:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(t).to(self._device)",
                            "Call"
                        ],
                        [
                            "pose[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(t).to(self._device)",
                            "Call"
                        ],
                        [
                            "torch.addmm(t_c, t, R_c.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_376": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(r).to(self._device)",
                            "Call"
                        ],
                        [
                            "dcm2rv(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_377": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pose[:, 4:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(t).to(self._device)",
                            "Call"
                        ],
                        [
                            "pose[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(t).to(self._device)",
                            "Call"
                        ],
                        [
                            "torch.addmm(t_c, t, R_c.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_386": {
                "variable": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "R_c.expand(R.size(0), -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Rot.from_quat(q).as_dcm().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R).to(self._device)",
                            "Call"
                        ],
                        [
                            "rv2dcm(r)",
                            "Call"
                        ],
                        [
                            "torch.bmm(R_c.expand(R.size(0), -1, -1), R)",
                            "Call"
                        ]
                    ]
                }
            },
            "addmm_387": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "t_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._t[c]",
                            "Subscript"
                        ],
                        [
                            "self._t_inv[c]",
                            "Subscript"
                        ]
                    ]
                },
                "mat1": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pose[:, 4:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(t).to(self._device)",
                            "Call"
                        ],
                        [
                            "pose[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(t).to(self._device)",
                            "Call"
                        ],
                        [
                            "torch.addmm(t_c, t, R_c.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_c.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R, t.unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p, torch.tensor([[[0, 0, 0, 1]]] * R.size(0), dtype=torch.float32, device=self._device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[[x['fx'], 0.0, x['ppx']], [0.0, x['fy'], x['ppy']], [0.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_84": {
                "input": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "T[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_98": {
                "input": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(r).to(self._device)",
                            "Call"
                        ],
                        [
                            "dcm2rv(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_99": {
                "input": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pose[:, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(r).to(self._device)",
                            "Call"
                        ],
                        [
                            "dcm2rv(R)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "-t",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_110": {
                "start": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "pose",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mano_pose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['pose_m']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(mano_pose, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_395": {
                "data": {
                    "value": "[[[0, 0, 0, 1]]] * R.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/render_sequence.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/visualize_pose.py": {
        "torch": {
            "tensor_69": {
                "variable": {
                    "value": "betas",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "sample['mano_betas']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "betas",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "pose",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label['pose_m']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}