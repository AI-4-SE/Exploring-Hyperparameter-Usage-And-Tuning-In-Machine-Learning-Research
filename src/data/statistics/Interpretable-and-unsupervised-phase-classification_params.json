{
    "prediction_based_method/linear_models/main.py": {
        "sklearn": {
            "LinearRegression_160": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_162": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "conf.l2_lambda",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "prediction_based_method/DNNs/dataloader.py": {
        "torch": {
            "from_numpy_62": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(str(file)[:-8] + 'corr_func.dat'.format(self.input_type)).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[U * conf.U_scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(file)",
                            "Call"
                        ],
                        [
                            "X.cpu().numpy().reshape(content.shape)",
                            "Call"
                        ],
                        [
                            "fouriertrafo(content.reshape(conf.dim, conf.dim)).reshape(conf.dim ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(file)",
                            "Call"
                        ],
                        [
                            "X.cpu().numpy().reshape(content.shape)",
                            "Call"
                        ],
                        [
                            "fouriertrafo(content.reshape(conf.dim, conf.dim)).reshape(conf.dim ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(file)",
                            "Call"
                        ],
                        [
                            "X.cpu().numpy().reshape(content.shape)",
                            "Call"
                        ],
                        [
                            "fouriertrafo(content.reshape(conf.dim, conf.dim)).reshape(conf.dim ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[U * conf.U_scale, nf * conf.nf_scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_94": {
                "input": {
                    "value": "torch.sub(X, self.mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sub_94": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(input_np).view(1, -1).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(content).view(1, conf.dim, conf.dim).float()",
                            "Call"
                        ],
                        [
                            "self.transform(X)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(content).view(1, conf.dim, conf.dim).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(content).view(1, conf.dim, conf.dim).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "prediction_based_method/DNNs/divergence.py": {
        "torch": {
            "no_grad_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "self.out_ppred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_ppred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_60": {
                "variable": {
                    "value": "self.out_p0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_p0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sort_72": {
                "variable": {
                    "value": "(p0sorted, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_p0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "prediction_based_method/DNNs/main.py": {
        "torch": {
            "manual_seed_24": {
                "seed": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loaded_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader.DatasetFKM(trainset, None, torch.zeros([1, num_inputs]), torch.ones([1, num_inputs]), conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(trainset, None, torch.zeros([1, conf.dim, conf.dim]), torch.ones([1, conf.dim, conf.dim]), conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(files, transform.get_dict('train'), mean, std, conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(files, transform.get_dict('test'), mean, std, conf.input_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loaded_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader.DatasetFKM(trainset, None, torch.zeros([1, num_inputs]), torch.ones([1, num_inputs]), conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(trainset, None, torch.zeros([1, conf.dim, conf.dim]), torch.ones([1, conf.dim, conf.dim]), conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(files, transform.get_dict('train'), mean, std, conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(files, transform.get_dict('test'), mean, std, conf.input_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_191": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_240": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loaded_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataloader.DatasetFKM(trainset, None, torch.zeros([1, num_inputs]), torch.ones([1, num_inputs]), conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(trainset, None, torch.zeros([1, conf.dim, conf.dim]), torch.ones([1, conf.dim, conf.dim]), conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(files, transform.get_dict('train'), mean, std, conf.input_type)",
                            "Call"
                        ],
                        [
                            "dataloader.DatasetFKM(files, transform.get_dict('test'), mean, std, conf.input_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_311": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_314": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_317": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=conf.lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "conf.lr_scheduler_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "conf.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_all_27": {
                "seed": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "l2_term",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "l2_term",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(num_inputs)",
                            "Call"
                        ],
                        [
                            "np.zeros(conf.dim ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "std_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(num_inputs)",
                            "Call"
                        ],
                        [
                            "np.zeros(conf.dim ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_294": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(num_inputs)",
                            "Call"
                        ],
                        [
                            "np.zeros(conf.dim ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_295": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "std_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(num_inputs)",
                            "Call"
                        ],
                        [
                            "np.zeros(conf.dim ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.view(-1) for x in model.fc_layers[i].parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.view(-1) for x in model.fc_layers[i].parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_235": {
                "*size": {
                    "value": "[1, num_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_236": {
                "*size": {
                    "value": "[1, num_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "*size": {
                    "value": "[1, conf.dim, conf.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_239": {
                "*size": {
                    "value": "[1, conf.dim, conf.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_64": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.params",
                            "Attribute"
                        ],
                        [
                            "torch.cat([x.view(-1) for x in model.fc_layers[i].parameters()])",
                            "Call"
                        ],
                        [
                            "torch.cat([x.view(-1) for x in model.fc_layers[i].parameters()])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_116": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.params",
                            "Attribute"
                        ],
                        [
                            "torch.cat([x.view(-1) for x in model.fc_layers[i].parameters()])",
                            "Call"
                        ],
                        [
                            "torch.cat([x.view(-1) for x in model.fc_layers[i].parameters()])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_337": {
                "obj": {
                    "value": "{'epoch': conf.epochs, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "foldername + '/trained_model/model_epoch{}.pth'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_255": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.to(device)",
                            "Call"
                        ],
                        [
                            "inputs.to(device)",
                            "Call"
                        ],
                        [
                            "inputs.to(device)",
                            "Call"
                        ],
                        [
                            "inputs.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_283": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.to(device)",
                            "Call"
                        ],
                        [
                            "inputs.to(device)",
                            "Call"
                        ],
                        [
                            "inputs.to(device)",
                            "Call"
                        ],
                        [
                            "inputs.to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "prediction_based_method/DNNs/net.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "conf.fcs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "conf.fcs[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "conf.channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conf.channels[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conf.kernels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "conf.strides[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "conf.fcs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "conf.fcs[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "prediction_based_method/DNNs/utils.py": {
        "torch": {
            "cat_24": {
                "tensors": {
                    "value": "[after, before]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flip_34": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[axis]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rot90_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_size - abs(shift)",
                            "BinOp"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "prediction_based_method/DNNs/visualization.py": {
        "torch": {
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}