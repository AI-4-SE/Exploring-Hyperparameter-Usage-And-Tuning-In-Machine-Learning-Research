{
    "pendulum.py": {
        "tensorflow": {
            "Session_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_162": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_90": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.s_dim)",
                    "possible_values": []
                },
                "name": {
                    "value": "state",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "dq_da",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.a_dim)",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "possible_values": []
                }
            },
            "get_collection_40": {
                "variable": {
                    "value": "train_params",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "main_scope",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(s)[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "gradients_42": {
                "variable": {
                    "value": "gradients",
                    "possible_values": []
                },
                "ys": {
                    "value": "a",
                    "possible_values": [
                        [
                            "tf.add(tf.multiply(tf.add(x, 1), 0.5 * self.a_scale), self.a_bias)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=(None, self.a_dim), name='action')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "train_params",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=main_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=main_scope)",
                            "Call"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "-dq_da / batch_size",
                    "possible_values": []
                }
            },
            "AdamOptimizer_43": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "possible_values": []
                }
            },
            "get_collection_44": {
                "variable": {
                    "value": "extra_ops",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                },
                "scope": {
                    "value": "main_scope",
                    "possible_values": []
                }
            },
            "function_48": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[a]",
                    "possible_values": []
                }
            },
            "function_49": {
                "variable": {
                    "value": "self.train",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s, dq_da]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "updates": {
                    "value": "[updates]",
                    "possible_values": []
                }
            },
            "get_collection_54": {
                "variable": {
                    "value": "main_params",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "main_scope",
                    "possible_values": []
                }
            },
            "get_collection_55": {
                "variable": {
                    "value": "target_params",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "target_scope",
                    "possible_values": []
                }
            },
            "group_56": {
                "variable": {
                    "value": "init_updates",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[tf.assign(t, m) for (m, t) in zip(main_params, target_params)]",
                    "possible_values": []
                }
            },
            "group_57": {
                "variable": {
                    "value": "soft_updates",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[tf.assign(t, tau * m + (1.0 - tau) * t) for (m, t) in zip(main_params, target_params)]",
                    "possible_values": []
                }
            },
            "function_59": {
                "variable": {
                    "value": "self.target_act",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[a_t]",
                    "possible_values": []
                }
            },
            "function_60": {
                "variable": {
                    "value": "self._target_init",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "updates": {
                    "value": "[init_updates]",
                    "possible_values": []
                }
            },
            "function_61": {
                "variable": {
                    "value": "self._target_update",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "updates": {
                    "value": "[soft_updates]",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.a_dim)",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.s_dim)",
                    "possible_values": []
                },
                "name": {
                    "value": "state",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_estimate",
                    "possible_values": []
                }
            },
            "get_collection_114": {
                "variable": {
                    "value": "train_params",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "main_scope",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "error_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(y, q), 2)",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "add_118": {
                "variable": {
                    "value": "total_loss",
                    "possible_values": []
                },
                "x": {
                    "value": "error_loss",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.pow(tf.subtract(y, q), 2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "l2_reg_loss",
                    "possible_values": [
                        [
                            "tc.layers.apply_regularization(tc.layers.l2_regularizer(reg), weights_list=weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_119": {
                "variable": {
                    "value": "gradients",
                    "possible_values": []
                },
                "ys": {
                    "value": "total_loss",
                    "possible_values": [
                        [
                            "tf.add(error_loss, l2_reg_loss)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "train_params",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=main_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=main_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_120": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "possible_values": []
                }
            },
            "get_collection_121": {
                "variable": {
                    "value": "extra_ops",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                },
                "scope": {
                    "value": "main_scope",
                    "possible_values": []
                }
            },
            "function_125": {
                "variable": {
                    "value": "self.dq_da",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s, a]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[tf.gradients(q, a)[0]]",
                    "possible_values": []
                }
            },
            "function_126": {
                "variable": {
                    "value": "self.q_val",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s, a]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[q]",
                    "possible_values": []
                }
            },
            "function_127": {
                "variable": {
                    "value": "self.train",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s, a, y]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "updates": {
                    "value": "[updates]",
                    "possible_values": []
                }
            },
            "get_collection_132": {
                "variable": {
                    "value": "main_params",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "main_scope",
                    "possible_values": []
                }
            },
            "get_collection_133": {
                "variable": {
                    "value": "target_params",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "target_scope",
                    "possible_values": []
                }
            },
            "group_134": {
                "variable": {
                    "value": "init_updates",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[tf.assign(t, m) for (m, t) in zip(main_params, target_params)]",
                    "possible_values": []
                }
            },
            "group_135": {
                "variable": {
                    "value": "soft_updates",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[tf.assign(t, tau * m + (1.0 - tau) * t) for (m, t) in zip(main_params, target_params)]",
                    "possible_values": []
                }
            },
            "function_137": {
                "variable": {
                    "value": "self.target_q_val",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[s, a]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[q_t]",
                    "possible_values": []
                }
            },
            "function_138": {
                "variable": {
                    "value": "self._target_init",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "updates": {
                    "value": "[init_updates]",
                    "possible_values": []
                }
            },
            "function_139": {
                "variable": {
                    "value": "self._target_update",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[]",
                    "possible_values": []
                },
                "updates": {
                    "value": "[soft_updates]",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.a_dim",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_88": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_89": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dense_156": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "inputs": {
                    "value": "state",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden[0]",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_158": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_159": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, action]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dense_173": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_45": {
                "control_inputs": {
                    "value": "extra_ops",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope=main_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope=main_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.hidden",
                            "Attribute"
                        ],
                        [
                            "self.hidden[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_115": {
                "x": {
                    "value": "tf.subtract(y, q)",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "control_dependencies_122": {
                "control_inputs": {
                    "value": "extra_ops",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope=main_scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope=main_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": []
                }
            },
            "dense_164": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.hidden",
                            "Attribute"
                        ],
                        [
                            "self.hidden[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "possible_values": [
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ],
                        [
                            "tf.initializers.random_uniform(minval=-w_bound, maxval=w_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_166": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "possible_values": [
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=self.a_dim, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(inputs=state, units=self.hidden[0], kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=x, units=h, kernel_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_41": {
                "input": {
                    "value": "s",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=(None, self.s_dim), name='state')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=(None, self.s_dim), name='state')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_89": {
                "x": {
                    "value": "tf.add(x, 1)",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5 * self.a_scale",
                    "possible_values": []
                }
            },
            "subtract_115": {
                "x": {
                    "value": "y",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=(None, 1), name='Q_estimate')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=x, units=1, kernel_initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_56": {
                "ref": {
                    "value": "t",
                    "possible_values": []
                },
                "value": {
                    "value": "m",
                    "possible_values": []
                }
            },
            "assign_57": {
                "ref": {
                    "value": "t",
                    "possible_values": []
                },
                "value": {
                    "value": "tau * m + (1.0 - tau) * t",
                    "possible_values": []
                }
            },
            "assign_134": {
                "ref": {
                    "value": "t",
                    "possible_values": []
                },
                "value": {
                    "value": "m",
                    "possible_values": []
                }
            },
            "assign_135": {
                "ref": {
                    "value": "t",
                    "possible_values": []
                },
                "value": {
                    "value": "tau * m + (1.0 - tau) * t",
                    "possible_values": []
                }
            },
            "gradients_125": {
                "ys": {
                    "value": "q",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=x, units=1, kernel_initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "a",
                    "possible_values": [
                        [
                            "tf.add(tf.multiply(tf.add(x, 1), 0.5 * self.a_scale), self.a_bias)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32, shape=(None, self.a_dim), name='action')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}