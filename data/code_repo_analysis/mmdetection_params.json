{
    "mmdet/models/dense_heads/paa_head.py": {
        "sklearn": {
            "GaussianMixture_339": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "weights_init": {
                    "value": "weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.5, 0.5])",
                            "Call"
                        ]
                    ]
                },
                "means_init": {
                    "value": "means_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([min_loss, max_loss]).reshape(2, 1)",
                            "Call"
                        ]
                    ]
                },
                "precisions_init": {
                    "value": "precisions_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1.0, 1.0]).reshape(2, 1, 1)",
                            "Call"
                        ],
                        [
                            "precisions_init.reshape(2)",
                            "Call"
                        ],
                        [
                            "precisions_init.reshape(2, 1)",
                            "Call"
                        ],
                        [
                            "np.array([[1.0]])",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "self.covariance_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_159": {
                "variable": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "levels_to_images(cls_scores)",
                            "Call"
                        ],
                        [
                            "[item.reshape(-1, self.cls_out_channels) for item in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cls_scores, 0).view(-1, cls_scores[0].size(-1))",
                            "Call"
                        ],
                        [
                            "cls_scores",
                            "Method Argument"
                        ],
                        [
                            "cls_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "levels_to_images(bbox_preds)",
                            "Call"
                        ],
                        [
                            "[item.reshape(-1, 4) for item in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(bbox_preds, 0).view(-1, bbox_preds[0].size(-1))",
                            "Call"
                        ],
                        [
                            "bbox_preds",
                            "Method Argument"
                        ],
                        [
                            "bbox_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "iou_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "iou_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "levels_to_images(iou_preds)",
                            "Call"
                        ],
                        [
                            "[item.reshape(-1, 1) for item in iou_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(iou_preds, 0).view(-1, iou_preds[0].size(-1))",
                            "Call"
                        ],
                        [
                            "zip(cls_scores, bbox_preds, iou_preds, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "iou_preds.permute(0, 2, 3, 1).reshape(batch_size, -1).sigmoid()",
                            "Call"
                        ],
                        [
                            "iou_preds[batch_inds, topk_inds]",
                            "Subscript"
                        ],
                        [
                            "iou_preds",
                            "Method Argument"
                        ],
                        [
                            "iou_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reassign_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self.paa_reassign, pos_losses_list, labels, labels_weight, bboxes_weight, pos_inds, pos_gt_index, anchor_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "flatten_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat(item, 0) for item in anchor_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "labels_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reassign_label_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self.paa_reassign, pos_losses_list, labels, labels_weight, bboxes_weight, pos_inds, pos_gt_index, anchor_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "bboxes_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bboxes_target, 0).view(-1, bboxes_target[0].size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "anchors_all_level",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(cls_scores, bbox_preds, iou_preds, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.expand_as(bbox_pred)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "pos_inds_after_paa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds_after_paa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[label.new_tensor([])]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds_after_paa)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_357": {
                "variable": {
                    "value": "ignore_inds_after_paa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ignore_inds_after_paa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[label.new_tensor([])]",
                            "List"
                        ],
                        [
                            "torch.cat(ignore_inds_after_paa)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_575": {
                "variable": {
                    "value": "batch_mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_nms_scores)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_579": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_nms_scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_585": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_586": {
                "variable": {
                    "value": "batch_mlvl_iou_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_iou_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_671": {
                "variable": {
                    "value": "det_bboxes_voted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_bboxes_voted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_bboxes_voted, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "pos_inds_gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds_gmm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds_gmm)",
                            "Call"
                        ],
                        [
                            "pos_inds_gmm[sort_inds]",
                            "Subscript"
                        ],
                        [
                            "pos_inds_gmm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_318": {
                "variable": {
                    "value": "pos_loss_gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_loss_gmm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_loss_gmm)",
                            "Call"
                        ],
                        [
                            "pos_loss_gmm.sort()",
                            "Call"
                        ],
                        [
                            "pos_loss_gmm.view(-1, 1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_348": {
                "variable": {
                    "value": "gmm_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm_assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmm.predict(pos_loss_gmm)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gmm_assignment).to(device)",
                            "Call"
                        ],
                        [
                            "gmm_assignment",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_349": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gmm.score_samples(pos_loss_gmm)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scores).to(device)",
                            "Call"
                        ],
                        [
                            "cls_score.permute(0, 2, 3, 1).reshape(batch_size, -1, self.cls_out_channels).sigmoid()",
                            "Call"
                        ],
                        [
                            "scores[batch_inds, topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_560": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlvl_tensor[0].size(0)",
                            "Call"
                        ],
                        [
                            "cls_scores[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_459": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_460": {
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_663": {
                "input": {
                    "value": "pis * pos_bboxes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_664": {
                "input": {
                    "value": "pis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.exp(-(1 - pos_ious) ** 2 / 0.025) * pos_scores)[:, None]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_668": {
                "tensors": {
                    "value": "(voted_box[None, :], voted_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_661": {
                "input": {
                    "value": "-(1 - pos_ious) ** 2 / 0.025",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    ".dev_scripts/gather_models.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_35": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_file",
                            "Method Argument"
                        ]
                    ]
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_37": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_file",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "demo/webcam_demo.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/inference.py": {
        "torch": {
            "set_grad_enabled_207": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/test.py": {
        "torch": {
            "tensor_163": {
                "variable": {
                    "value": "part_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(pickle.dumps(result_part))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "shape_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "part_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "shape_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape_tensor.clone() for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "max_170": {
                "variable": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "part_send",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(shape_list).max()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_123": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_133": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/train.py": {
        "torch": {
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_31": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "current_device_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/anchor/anchor_generator.py": {
        "torch": {
            "sqrt_176": {
                "variable": {
                    "value": "h_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratios",
                            "Method Argument"
                        ],
                        [
                            "ratios",
                            "Method Argument"
                        ],
                        [
                            "ratios",
                            "Method Argument"
                        ],
                        [
                            "ratios",
                            "Method Argument"
                        ],
                        [
                            "ratios",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_191": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_center - 0.5 * ws, y_center - 0.5 * hs, x_center + 0.5 * ws, y_center + 0.5 * hs]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.base_anchors[level_idx].to(device)",
                            "Call"
                        ],
                        [
                            "self.gen_single_level_base_anchors(base_size, scales=self.scales[i], ratios=self.ratios[i], center=self.centers[i])",
                            "Call"
                        ],
                        [
                            "torch.index_select(base_anchors, 0, torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "[x_center - 0.5 * (ws - 1), y_center - 0.5 * (hs - 1), x_center + 0.5 * (ws - 1), y_center + 0.5 * (hs - 1)]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1).round()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "base_anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_261": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, shift_xx, shift_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_370": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, shift_xx, shift_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_431": {
                "variable": {
                    "value": "valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_432": {
                "variable": {
                    "value": "valid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_663": {
                "variable": {
                    "value": "h_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratios",
                            "Method Argument"
                        ],
                        [
                            "ratios",
                            "Method Argument"
                        ],
                        [
                            "ratios",
                            "Method Argument"
                        ],
                        [
                            "ratios",
                            "Method Argument"
                        ],
                        [
                            "ratios",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_678": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_center - 0.5 * ws, y_center - 0.5 * hs, x_center + 0.5 * ws, y_center + 0.5 * hs]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.base_anchors[level_idx].to(device)",
                            "Call"
                        ],
                        [
                            "self.gen_single_level_base_anchors(base_size, scales=self.scales[i], ratios=self.ratios[i], center=self.centers[i])",
                            "Call"
                        ],
                        [
                            "torch.index_select(base_anchors, 0, torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "[x_center - 0.5 * (ws - 1), y_center - 0.5 * (hs - 1), x_center + 0.5 * (ws - 1), y_center + 0.5 * (hs - 1)]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1).round()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "base_anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_678": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_774": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_center - 0.5 * ws, y_center - 0.5 * hs, x_center + 0.5 * ws, y_center + 0.5 * hs]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.base_anchors[level_idx].to(device)",
                            "Call"
                        ],
                        [
                            "self.gen_single_level_base_anchors(base_size, scales=self.scales[i], ratios=self.ratios[i], center=self.centers[i])",
                            "Call"
                        ],
                        [
                            "torch.index_select(base_anchors, 0, torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "[x_center - 0.5 * (ws - 1), y_center - 0.5 * (hs - 1), x_center + 0.5 * (ws - 1), y_center + 0.5 * (hs - 1)]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1).round()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "base_anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_826": {
                "variable": {
                    "value": "gt_bboxes_grid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes_cx / stride[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_827": {
                "variable": {
                    "value": "gt_bboxes_grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes_cy / stride[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_832": {
                "variable": {
                    "value": "responsible_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h * feat_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_562": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_center - 0.5 * ws, y_center - 0.5 * hs, x_center + 0.5 * ws, y_center + 0.5 * hs]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.base_anchors[level_idx].to(device)",
                            "Call"
                        ],
                        [
                            "self.gen_single_level_base_anchors(base_size, scales=self.scales[i], ratios=self.ratios[i], center=self.centers[i])",
                            "Call"
                        ],
                        [
                            "torch.index_select(base_anchors, 0, torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "[x_center - 0.5 * (ws - 1), y_center - 0.5 * (hs - 1), x_center + 0.5 * (ws - 1), y_center + 0.5 * (hs - 1)]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=-1).round()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(base_anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "base_anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_769": {
                "variable": {
                    "value": "base_anchor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_101": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_257": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_258": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_303": {
                "tensors": {
                    "value": "[x, y, x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_366": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_367": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_536": {},
            "Tensor_537": {}
        }
    },
    "mmdet/core/anchor/point_generator.py": {
        "torch": {
            "stack_25": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, stride]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "valid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "valid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_239": {
                "variable": {
                    "value": "prioris",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, stride_w, stride_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_22": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_140": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_142": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/anchor/utils.py": {
        "torch": {
            "stack_9": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_62": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[0] + ratio * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_63": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[1] + ratio * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_64": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[0] + (1 - ratio) * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_65": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[1] + (1 - ratio) * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/approx_max_iou_assigner.py": {
        "torch": {
            "transpose_107": {
                "variable": {
                    "value": "approxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "approxs.view(num_squares, approxs_per_octave, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "variable": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "approxs.new(num_gts, num_squares)",
                            "Call"
                        ],
                        [
                            "all_overlaps.view(approxs_per_octave, num_squares, num_gts).max(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.transpose(overlaps, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/assign_result.py": {
        "torch": {
            "arange_196": {
                "variable": {
                    "value": "self_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(gt_labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "self.gt_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_inds, self.gt_inds]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "self.max_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.max_overlaps.new_ones(len(gt_labels)), self.max_overlaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "max_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_preds",
                            "Call"
                        ],
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_preds",
                            "Call"
                        ],
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "max_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.rand(num_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "is_assigned",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.rand(num_preds) < p_assigned",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_preds",
                            "Call"
                        ],
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "true_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "true_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(num_gts)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(true_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.randint(1, num_gts + 1, size=num_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_labels, self.labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_preds",
                            "Call"
                        ],
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "ndarray": {
                    "value": "rng.rand(num_preds) < p_ignore",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_preds",
                            "Call"
                        ],
                        [
                            "kwargs.get('num_preds', None)",
                            "Call"
                        ],
                        [
                            "rng.randint(0, 16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.randint(0, num_classes, size=num_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/atss_assigner.py": {
        "torch": {
            "stack_96": {
                "variable": {
                    "value": "gt_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_cx, gt_cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "bboxes_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes_cx, bboxes_cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "candidate_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidate_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(candidate_idxs, dim=0)",
                            "Call"
                        ],
                        [
                            "candidate_idxs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_158": {
                "variable": {
                    "value": "overlaps_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iou_calculator(bboxes, gt_bboxes)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-INF",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_158": {
                "variable": {
                    "value": "overlaps_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_170": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_170": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_131": {
                "start": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_153": {
                "tensors": {
                    "value": "[l_, t_, r_, b_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_153": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/center_region_assigner.py": {
        "torch": {
            "zeros_like_28": {
                "variable": {
                    "value": "boxes_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_298": {
                "variable": {
                    "value": "shadowed_gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_bbox_in_gt_shadow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iou_calculator(bboxes, gt_shadow, mode='iof') > self.min_pos_iof",
                            "Compare"
                        ],
                        [
                            "is_bbox_in_gt_shadow & ~is_bbox_in_gt_core",
                            "BinOp"
                        ],
                        [
                            "is_bbox_in_gt_shadow",
                            "Method Argument"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "any_313": {
                "variable": {
                    "value": "inds_of_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_bbox_in_gt_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_bbox_in_gt & (bbox_and_gt_core_overlaps > self.min_pos_iof)",
                            "BinOp"
                        ],
                        [
                            "is_bbox_in_gt_core",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "shadowed_gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shadowed_gt_inds, torch.nonzero(is_bbox_in_gt_core, as_tuple=False))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_226": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_226": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_288": {
                "variable": {
                    "value": "gt_priority",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "is_bbox_in_gt_core.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_316": {
                "input": {
                    "value": "is_bbox_in_gt_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_bbox_in_gt & (bbox_and_gt_core_overlaps > self.min_pos_iof)",
                            "BinOp"
                        ],
                        [
                            "is_bbox_in_gt_core",
                            "Method Argument"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_327": {
                "input": {
                    "value": "is_bbox_in_gt_core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_bbox_in_gt & (bbox_and_gt_core_overlaps > self.min_pos_iof)",
                            "BinOp"
                        ],
                        [
                            "is_bbox_in_gt_core",
                            "Method Argument"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/grid_assigner.py": {
        "torch": {
            "nonzero_145": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_145": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/hungarian_assigner.py": {
        "torch": {
            "from_numpy_133": {
                "variable": {
                    "value": "matched_row_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "matched_row_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_sum_assignment(cost)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(matched_row_inds).to(bbox_pred.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "matched_col_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "matched_col_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_sum_assignment(cost)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(matched_col_inds).to(bbox_pred.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/max_iou_assigner.py": {
        "torch": {
            "nonzero_203": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/point_assigner.py": {
        "torch": {
            "log2_69": {
                "variable": {
                    "value": "points_lvl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_79": {
                "variable": {
                    "value": "gt_bboxes_lvl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes_lvl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((torch.log2(gt_bboxes_wh[:, 0] / scale) + torch.log2(gt_bboxes_wh[:, 1] / scale)) / 2).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_bboxes_lvl, min=lvl_min, max=lvl_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "lvl_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_lvl.min()",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "lvl_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_lvl.max()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_85": {
                "variable": {
                    "value": "points_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "points.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_102": {
                "variable": {
                    "value": "(min_dist, min_dist_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "points_gt_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((lvl_points - gt_point) / gt_wh).norm(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.pos_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_124": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log2_77": {
                "input": {
                    "value": "gt_bboxes_wh[:, 0] / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log2_78": {
                "input": {
                    "value": "gt_bboxes_wh[:, 1] / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/region_assigner.py": {
        "torch": {
            "round_14": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * f_bbox[0] + ratio * f_bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_15": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * f_bbox[1] + ratio * f_bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_16": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * f_bbox[0] + (1 - ratio) * f_bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_17": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * f_bbox[1] + (1 - ratio) * f_bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes[:, 2] - gt_bboxes[:, 0]) * (gt_bboxes[:, 3] - gt_bboxes[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_135": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale) - torch.log2(min_anchor_size) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "flat_assigned_gt_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_assigned_gt_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "flat_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlvl_anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_203": {
                "variable": {
                    "value": "flat_valid_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_valid_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlvl_valid_flags",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_148": {
                "variable": {
                    "value": "ignore_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes.new_zeros((num_bboxes,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "gt_bboxes.new_full((h * w,), 0, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "assigned_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_assigned_gt_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(mlvl_assigned_gt_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "log2_136": {
                "input": {
                    "value": "min_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.new_full((1,), float(anchor_scale * anchor_strides[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/uniform_assigner.py": {
        "torch": {
            "cdist_66": {
                "variable": {
                    "value": "cost_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "bbox_xyxy_to_cxcywh(bbox_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "bbox_xyxy_to_cxcywh(gt_bboxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_70": {
                "variable": {
                    "value": "cost_bbox_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "bbox_xyxy_to_cxcywh(anchor)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "bbox_xyxy_to_cxcywh(gt_bboxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(index, index1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_104": {
                "variable": {
                    "value": "pos_gt_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "C1.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "bbox_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_116": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_116": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_81": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cost_bbox.cpu()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.match_times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "topk_88": {
                "input": {
                    "value": "C1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cost_bbox_anchors.cpu()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.match_times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/coder/bucketing_bbox_coder.py": {
        "torch": {
            "arange_212": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "proposals.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_offsets, r_offsets, t_offsets, d_offsets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "offsets_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[offset_l_weights, offset_r_weights, offset_t_weights, offset_d_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_243": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_label[:, 0], r_label[:, 0], t_label[:, 0], d_label[:, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_247": {
                "variable": {
                    "value": "bucket_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "side_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_253": {
                "variable": {
                    "value": "bucket_cls_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bucket_cls_l_weights, bucket_cls_r_weights, bucket_cls_t_weights, bucket_cls_d_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_300": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_preds.view(-1, side_num)",
                            "Call"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_325": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "proposals.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1[:, None], y1[:, None], x2[:, None], y2[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "side_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_132": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "side_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_135": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "side_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_138": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "side_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(num_buckets / 2.0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/coder/delta_xywh_bbox_coder.py": {
        "torch": {
            "log_132": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / pw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_133": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy, dw, dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_248": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_229": {
                "variable": {
                    "value": "dx_width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dx_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pw * dx",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dx_width, max=ctr_clamp, min=-ctr_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "ctr_clamp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-ctr_clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_230": {
                "variable": {
                    "value": "dy_height",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dy_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ph * dy",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dy_height, max=ctr_clamp, min=-ctr_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "ctr_clamp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-ctr_clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_231": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(gw / pw)",
                            "Call"
                        ],
                        [
                            "denorm_deltas[..., 2::4]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(dw, max=max_ratio)",
                            "Call"
                        ],
                        [
                            "dw.clamp(min=-max_ratio, max=max_ratio)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.abs(np.log(wh_ratio_clip))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_232": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(gh / ph)",
                            "Call"
                        ],
                        [
                            "denorm_deltas[..., 3::4]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(dh, max=max_ratio)",
                            "Call"
                        ],
                        [
                            "dh.clamp(min=-max_ratio, max=max_ratio)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.abs(np.log(wh_ratio_clip))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_265": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_shape] * (deltas.size(-1) // 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flip_265": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_265": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_268": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bboxes < min_xy",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.new_tensor(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x1, y1, x2, y2], dim=-1).view(deltas.size())",
                            "Call"
                        ],
                        [
                            "torch.stack([x1, y1, x2, y2], dim=-1).view(deltas.size())",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes < min_xy, min_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes > max_xy, max_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_269": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bboxes > max_xy",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([max_shape] * (deltas.size(-1) // 2), dim=-1).flip(-1).unsqueeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x1, y1, x2, y2], dim=-1).view(deltas.size())",
                            "Call"
                        ],
                        [
                            "torch.stack([x1, y1, x2, y2], dim=-1).view(deltas.size())",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes < min_xy, min_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes > max_xy, max_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_255": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/coder/legacy_delta_xywh_bbox_coder.py": {
        "torch": {
            "log_121": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / pw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_122": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy, dw, dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_214": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/coder/tblr_bbox_coder.py": {
        "torch": {
            "cat_111": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(top, bottom, left, right)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(normalizer, device=priors.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(normalizer, device=priors.device)",
                            "Call"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "priors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_115": {
                "variable": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "priors[:, 2:4] - priors[:, 0:2]",
                            "BinOp"
                        ],
                        [
                            "priors[..., 2:4] - priors[..., 0:2]",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(normalizer, device=priors.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(normalizer, device=priors.device)",
                            "Call"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ],
                        [
                            "4.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "priors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_170": {
                "variable": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "priors[:, 2:4] - priors[:, 0:2]",
                            "BinOp"
                        ],
                        [
                            "priors[..., 2:4] - priors[..., 0:2]",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "loc_decode",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th, tw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_shape, max_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flip_200": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_200": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_202": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bboxes < min_xy",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "priors.new_tensor(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([xmin, ymin, xmax, ymax], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes < min_xy, min_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes > max_xy, max_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_203": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bboxes > max_xy",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([max_shape, max_shape], dim=-1).flip(-1).unsqueeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([xmin, ymin, xmax, ymax], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes < min_xy, min_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes > max_xy, max_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xmin, ymin, xmax, ymax]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/coder/yolo_bbox_coder.py": {
        "torch": {
            "log_50": {
                "variable": {
                    "value": "w_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w_gt / w).clamp(min=self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_51": {
                "variable": {
                    "value": "h_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(h_gt / h).clamp(min=self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "encoded_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_center_target, y_center_target, w_target, h_target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_84": {
                "variable": {
                    "value": "decoded_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_center_pred - w_pred / 2, y_center_pred - h_pred / 2, x_center_pred + w_pred / 2, y_center_pred + h_pred / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_81": {
                "input": {
                    "value": "pred_bboxes[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "pred_bboxes[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/demodata.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tlbr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.rand(num, 4).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/iou_calculators/iou2d_calculator.py": {
        "torch": {
            "max_251": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "area1 + area2 - overlap",
                            "BinOp"
                        ],
                        [
                            "area1",
                            "variable"
                        ],
                        [
                            "area1[..., None] + area2[..., None, :] - overlap",
                            "BinOp"
                        ],
                        [
                            "area1[..., None]",
                            "Subscript"
                        ],
                        [
                            "torch.max(union, eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_258": {
                "variable": {
                    "value": "enclose_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enclose_area",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enclose_wh[..., 0] * enclose_wh[..., 1]",
                            "BinOp"
                        ],
                        [
                            "torch.max(enclose_area, eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_218": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_219": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[..., 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_232": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[..., :, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_234": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[..., :, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_229": {
                "variable": {
                    "value": "enclosed_lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_230": {
                "variable": {
                    "value": "enclosed_rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[..., 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_245": {
                "variable": {
                    "value": "enclosed_lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[..., :, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_247": {
                "variable": {
                    "value": "enclosed_rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[..., :, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/match_costs/match_cost.py": {
        "torch": {
            "cdist_48": {
                "variable": {
                    "value": "bbox_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_cxcywh_to_xyxy(bbox_pred)",
                            "Call"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_xyxy_to_cxcywh(gt_bboxes)",
                            "Call"
                        ],
                        [
                            "gt_bboxes",
                            "Method Argument"
                        ],
                        [
                            "gt_bboxes",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/base_sampler.py": {
        "torch": {
            "cat_77": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "gt_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/instance_balanced_pos_sampler.py": {
        "torch": {
            "nonzero_23": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sampled_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "self.random_choice(sampled_inds, num_expected)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_34": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == i.item()",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(set(pos_inds.cpu()) - set(sampled_inds.cpu())))",
                            "Call"
                        ],
                        [
                            "self.random_choice(extra_inds, num_extra)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(extra_inds).to(assign_result.gt_inds.device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_inds, extra_inds]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/iou_balanced_neg_sampler.py": {
        "torch": {
            "nonzero_98": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(sampled_inds)",
                            "Call"
                        ],
                        [
                            "np.concatenate([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_floor_inds, iou_sampled_inds))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sampled_inds).long().to(assign_result.gt_inds.device)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_inds, extra_inds))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/ohem_sampler.py": {
        "torch": {
            "nonzero_70": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_98": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/pseudo_sampler.py": {
        "torch": {
            "nonzero_34": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_34": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_36": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_36": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/random_sampler.py": {
        "torch": {
            "nonzero_65": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_75": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(gallery, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "gallery",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_50": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_57": {
                "n": {
                    "value": "gallery.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/sampling_result.py": {
        "torch": {
            "empty_like_39": {
                "variable": {
                    "value": "self.pos_gt_bboxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "demodata.random_boxes(assign_result.num_gts, rng=rng)",
                            "Call"
                        ],
                        [
                            "gt_bboxes.squeeze()",
                            "Call"
                        ],
                        [
                            "gt_bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "[self.pos_bboxes, self.neg_bboxes]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/score_hlr_sampler.py": {
        "torch": {
            "nonzero_93": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flatten_93": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_128": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flatten_128": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gallery",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(gallery, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "gallery",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "gt_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_81": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_85": {
                "n": {
                    "value": "gallery.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "gallery.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "pred_bboxes_with_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_bboxes, valid_max_score[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "select_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[valid_inds[hlr_inds], invalid_inds[rand_inds]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_211": {
                "n": {
                    "value": "num_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_inds.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_189": {
                "n": {
                    "value": "num_invalid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "invalid_inds.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/transforms.py": {
        "torch": {
            "cat_76": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_91": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_shape, max_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flip_157": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_157": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_159": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bboxes < min_xy",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.new_tensor(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes in enumerate(bbox_list)",
                            "Call"
                        ],
                        [
                            "bboxes.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([x1, y1, x2, y2], -1)",
                            "Call"
                        ],
                        [
                            "torch.stack([x1, y1, x2, y2], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes < min_xy, min_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes > max_xy, max_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_160": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bboxes > max_xy",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([max_shape, max_shape], dim=-1).flip(-1).unsqueeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes in enumerate(bbox_list)",
                            "Call"
                        ],
                        [
                            "bboxes.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([x1, y1, x2, y2], -1)",
                            "Call"
                        ],
                        [
                            "torch.stack([x1, y1, x2, y2], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes < min_xy, min_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes > max_xy, max_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_186": {
                "tensors": {
                    "value": "[left, top, right, bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_215": {
                "variable": {
                    "value": "rescaled_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inds_, x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_217": {
                "variable": {
                    "value": "rescaled_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "bbox_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cx - 0.5 * w, cy - 0.5 * h, cx + 0.5 * w, cy + 0.5 * h]",
                            "List"
                        ],
                        [
                            "[(x1 + x2) / 2, (y1 + y2) / 2, x2 - x1, y2 - y1]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_246": {
                "tensors": {
                    "value": "bbox_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cx - 0.5 * w, cy - 0.5 * h, cx + 0.5 * w, cy + 0.5 * h]",
                            "List"
                        ],
                        [
                            "[(x1 + x2) / 2, (y1 + y2) / 2, x2 - x1, y2 - y1]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, bboxes[:, :4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_147": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/evaluation/eval_hooks.py": {
        "torch": {
            "broadcast_38": {
                "tensor": {
                    "value": "module.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_39": {
                "tensor": {
                    "value": "module.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/export/model_wrappers.py": {
        "torch": {
            "device_178": {
                "type": {
                    "value": "self.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_masks[i]",
                            "Subscript"
                        ],
                        [
                            "masks[:, :img_h, :img_w]",
                            "Subscript"
                        ],
                        [
                            "masks.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(masks)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(masks.unsqueeze(0), size=(ori_h, ori_w))",
                            "Call"
                        ],
                        [
                            "masks.squeeze(0).detach().numpy()",
                            "Call"
                        ],
                        [
                            "masks >= 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(ori_h, ori_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/export/onnx_helper.py": {
        "torch": {
            "clamp_32": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 / max_shape[1]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x1, 0, 1)",
                            "Call"
                        ],
                        [
                            "x1 * max_shape[1]",
                            "BinOp"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_33": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1 / max_shape[0]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y1, 0, 1)",
                            "Call"
                        ],
                        [
                            "y1 * max_shape[0]",
                            "BinOp"
                        ],
                        [
                            "y1",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_34": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2 / max_shape[1]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x2, 0, 1)",
                            "Call"
                        ],
                        [
                            "x2 * max_shape[1]",
                            "BinOp"
                        ],
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_35": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y2 / max_shape[0]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y2, 0, 1)",
                            "Call"
                        ],
                        [
                            "y2 * max_shape[0]",
                            "BinOp"
                        ],
                        [
                            "y2",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "iou_threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[iou_threshold]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "score_threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[score_threshold]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "nms_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pre_top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_147": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "(num_fake_det, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_148": {
                "variable": {
                    "value": "cls_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "(num_fake_det, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_149": {
                "variable": {
                    "value": "box_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "(num_fake_det, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_inds, cls_inds, box_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "nms_after",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "after_top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_129": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_163": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_72": {
                "variable": {
                    "value": "ret_k",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k < size",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/export/pytorch2onnx.py": {
        "torch": {
            "from_numpy_148": {
                "variable": {
                    "value": "one_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "one_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_example_input(input_config)",
                            "Call"
                        ],
                        [
                            "mmcv.imread(input_path)",
                            "Call"
                        ],
                        [
                            "mmcv.imresize(one_img, input_shape[2:][::-1])",
                            "Call"
                        ],
                        [
                            "mmcv.imnormalize(one_img, mean, std, to_rgb=to_rgb)",
                            "Call"
                        ],
                        [
                            "one_img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(one_img).unsqueeze(0).float().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "one_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/mask/mask_target.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(mask_target_single, pos_proposals_list, pos_assigned_gt_inds_list, gt_masks_list, cfg_list)",
                            "Call"
                        ],
                        [
                            "list(mask_targets)",
                            "Call"
                        ],
                        [
                            "torch.cat(mask_targets)",
                            "Call"
                        ],
                        [
                            "gt_masks.crop_and_resize(proposals_np, mask_size, device=device, inds=pos_assigned_gt_inds, binarize=binarize).to_ndarray()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_targets).float().to(device)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros((0,) + mask_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(mask_target_single, pos_proposals_list, pos_assigned_gt_inds_list, gt_masks_list, cfg_list)",
                            "Call"
                        ],
                        [
                            "list(mask_targets)",
                            "Call"
                        ],
                        [
                            "torch.cat(mask_targets)",
                            "Call"
                        ],
                        [
                            "gt_masks.crop_and_resize(proposals_np, mask_size, device=device, inds=pos_assigned_gt_inds, binarize=binarize).to_ndarray()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_targets).float().to(device)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros((0,) + mask_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/mask/structures.py": {
        "torch": {
            "cat_353": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_inds, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bboxes).to(device=device)",
                            "Call"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ],
                        [
                            "bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_348": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inds).to(device=device)",
                            "Call"
                        ],
                        [
                            "inds",
                            "Method Argument"
                        ],
                        [
                            "inds",
                            "Method Argument"
                        ],
                        [
                            "inds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_356": {
                "variable": {
                    "value": "gt_masks_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_356": {
                "variable": {
                    "value": "gt_masks_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(inds).to(device=device)",
                            "Call"
                        ],
                        [
                            "inds",
                            "Method Argument"
                        ],
                        [
                            "inds",
                            "Method Argument"
                        ],
                        [
                            "inds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_508": {
                "data": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "np.uint8",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "np.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_901": {
                "data": {
                    "value": "ndarray_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_ndarray()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "np.uint8",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "np.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_351": {
                "start": {
                    "value": "num_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_897": {
                "*size": {
                    "value": "(0, self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "np.uint8",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "np.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/post_processing/bbox_nms.py": {
        "torch": {
            "arange_44": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_scores.size(1) - 1",
                            "BinOp"
                        ],
                        [
                            "idx.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes, scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, bboxes.new_zeros(1, 4)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scores, scores.new_zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels, labels.new_zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_151": {
                "start": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_scores.size(1) - 1",
                            "BinOp"
                        ],
                        [
                            "idx.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/post_processing/merge_augs.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "aug_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_104": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aug_scores",
                            "Method Argument"
                        ],
                        [
                            "aug_scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_108": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_115": {
                "input": {
                    "value": "torch.stack(aug_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_115": {
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aug_scores",
                            "Method Argument"
                        ],
                        [
                            "aug_scores",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/utils/dist_utils.py": {
        "torch": {
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/utils/misc.py": {
        "torch": {
            "flip_79": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_81": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_83": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/datasets/builder.py": {
        "torch": {
            "DataLoader_125": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset([build_dataset(c, default_args) for c in cfg])",
                            "Call"
                        ],
                        [
                            "ConcatDataset([build_dataset(c, default_args) for c in cfg['datasets']], cfg.get('separate_eval', True))",
                            "Call"
                        ],
                        [
                            "RepeatDataset(build_dataset(cfg['dataset'], default_args), cfg['times'])",
                            "Call"
                        ],
                        [
                            "ClassBalancedDataset(build_dataset(cfg['dataset'], default_args), cfg['oversample_thr'])",
                            "Call"
                        ],
                        [
                            "_concat_dataset(cfg, default_args)",
                            "Call"
                        ],
                        [
                            "build_from_cfg(cfg, DATASETS, default_args)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * samples_per_gpu",
                            "BinOp"
                        ],
                        [
                            "samples_per_gpu",
                            "variable"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupSampler(dataset, samples_per_gpu) if shuffle else None",
                            "IfExp"
                        ],
                        [
                            "DistributedGroupSampler(dataset, samples_per_gpu, world_size, rank, seed=seed)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "variable"
                        ],
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=samples_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(worker_init_fn, num_workers=num_workers, rank=rank, seed=seed) if seed is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/datasets/custom.py": {
        "torch": {}
    },
    "mmdet/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "mmdet/datasets/pipelines/formating.py": {
        "torch": {
            "from_numpy_25": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/datasets/samplers/distributed_sampler.py": {
        "torch": {
            "Generator_23": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_25": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_27": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/datasets/samplers/group_sampler.py": {
        "torch": {
            "Generator_103": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_131": {
                "n": {
                    "value": "len(indices) // self.samples_per_gpu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_115": {
                "n": {
                    "value": "int(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/backbones/darknet.py": {
        "torch": {
            "Sequential_204": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/detectors_resnet.py": {
        "torch": {
            "Sequential_183": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_168": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/hourglass.py": {
        "torch": {
            "Sequential_150": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(3, 128, 7, padding=3, stride=2, norm_cfg=norm_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.hourglass_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[HourglassModule(downsample_times, stage_channels, stage_blocks) for _ in range(num_stacks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_166": {
                "variable": {
                    "value": "self.conv1x1s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvModule(cur_channel, cur_channel, 1, norm_cfg=norm_cfg, act_cfg=None) for _ in range(num_stacks - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_172": {
                "variable": {
                    "value": "self.out_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvModule(cur_channel, feat_channel, 3, padding=1, norm_cfg=norm_cfg) for _ in range(num_stacks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "variable": {
                    "value": "self.remap_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvModule(feat_channel, cur_channel, 1, norm_cfg=norm_cfg, act_cfg=None) for _ in range(num_stacks - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_184": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/hrnet.py": {
        "torch": {
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_329": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, self.in_channels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_431": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_436": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_429": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, num_channels_pre_layer[i], num_channels_cur_layer[i], kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, out_channels, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_143": {
                "scale_factor": {
                    "value": "2 ** (j - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_408": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_428": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[j], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/mobilenet_v2.py": {
        "torch": {
            "Sequential_164": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/regnet.py": {
        "torch": {
            "ReLU_249": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/res2net.py": {
        "torch": {
            "AvgPool2d_49": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_118": {
                "variable": {
                    "value": "spx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cp.checkpoint(_inner_forward, x)",
                            "Call"
                        ],
                        [
                            "_inner_forward(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.forward_plugin(out, self.after_conv1_plugin_names)",
                            "Call"
                        ],
                        [
                            "sp",
                            "variable"
                        ],
                        [
                            "torch.cat((out, spx[self.scales - 1]), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, sp), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, self.pool(spx[self.scales - 1])), 1)",
                            "Call"
                        ],
                        [
                            "self.forward_plugin(out, self.after_conv2_plugin_names)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.norm3(out)",
                            "Call"
                        ],
                        [
                            "self.forward_plugin(out, self.after_conv3_plugin_names)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=stride, stride=stride, ceil_mode=True, count_include_pad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, sp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, spx[self.scales - 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, self.pool(spx[self.scales - 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_198": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/resnest.py": {
        "torch": {
            "ReLU_104": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_136": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splits.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.adaptive_avg_pool2d(gap, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(gap)",
                            "Call"
                        ],
                        [
                            "self.norm1(gap)",
                            "Call"
                        ],
                        [
                            "self.relu(gap)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, self.groups, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, self.groups, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_147": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attens * splits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_223": {
                "variable": {
                    "value": "self.avd_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/resnet.py": {
        "torch": {
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_610": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_566": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, stem_channels // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_609": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_576": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_586": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_596": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/ssd_vgg.py": {
        "torch": {
            "MaxPool2d_68": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/trident_resnet.py": {
        "torch": {
            "Parameter_53": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cp.checkpoint(_inner_forward, x)",
                            "Call"
                        ],
                        [
                            "_inner_forward(x)",
                            "Call"
                        ],
                        [
                            "[self.relu(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(out, dim=0)",
                            "Call"
                        ],
                        [
                            "[self.conv1(b) for b in x]",
                            "ListComp"
                        ],
                        [
                            "[self.norm1(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "[self.relu(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "[self.norm2(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "[self.relu(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "[self.conv3(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "[self.norm3(b) for b in out]",
                            "ListComp"
                        ],
                        [
                            "[out_b + identity_b for (out_b, identity_b) in zip(out, identity)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_75": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trident_dilations",
                            "variable"
                        ]
                    ]
                }
            },
            "conv2d_82": {
                "input": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.paddings[self.test_branch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilations[self.test_branch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/anchor_free_head.py": {
        "torch": {
            "ModuleList_97": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_298": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_299": {
                "variable": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_300": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(h, device=device).to(dtype)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(w, device=device).to(dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/anchor_head.py": {
        "torch": {
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "zip(mlvl_cls_scores, mlvl_bbox_preds, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "anchors.expand_as(bbox_pred)",
                            "Call"
                        ],
                        [
                            "anchors[batch_inds, topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_225": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "zip(mlvl_cls_scores, mlvl_bbox_preds, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "anchors.expand_as(bbox_pred)",
                            "Call"
                        ],
                        [
                            "anchors[batch_inds, topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_633": {
                "variable": {
                    "value": "nms_pre_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.get('nms_pre', -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "mlvl_cls_scores[0].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_679": {
                "variable": {
                    "value": "batch_mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_683": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_708": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_668": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlvl_cls_scores[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_328": {
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_475": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/atss_head.py": {
        "torch": {
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.atss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.atss_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.atss_centerness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.anchor_generator.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "left_right",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_, r_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_304": {
                "variable": {
                    "value": "top_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_, b_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_305": {
                "variable": {
                    "value": "centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_415": {
                "variable": {
                    "value": "nms_pre_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.get('nms_pre', -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ],
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ],
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "batch_mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores, batch_mlvl_centerness)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores, batch_mlvl_centerness)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "batch_mlvl_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores, batch_mlvl_centerness)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_482": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_633": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "zip(cls_scores, bbox_preds, centernesses, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.expand_as(bbox_pred)",
                            "Call"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_634": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "zip(cls_scores, bbox_preds, centernesses, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.expand_as(bbox_pred)",
                            "Call"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_680": {
                "variable": {
                    "value": "split_inside_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inside_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_inside_flags(flat_anchors, valid_flags, img_meta['img_shape'][:2], self.train_cfg.allowed_border)",
                            "Call"
                        ],
                        [
                            "inside_flags",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_level_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[anchors.size(0) for anchors in anchor_list[0]]",
                            "ListComp"
                        ],
                        [
                            "num_level_anchors",
                            "Method Argument"
                        ],
                        [
                            "num_level_anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_472": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_530": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_531": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_308": {
                "input": {
                    "value": "centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.atss_centerness(reg_feat)",
                            "Call"
                        ],
                        [
                            "centerness.permute(0, 2, 3, 1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0]))",
                            "Call"
                        ],
                        [
                            "zip(cls_scores, bbox_preds, centernesses, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "centerness.permute(0, 2, 3, 1).reshape(batch_size, -1).sigmoid()",
                            "Call"
                        ],
                        [
                            "centerness[batch_inds, topk_inds]",
                            "Subscript"
                        ],
                        [
                            "centerness",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "any_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_437": {
                "variable": {
                    "value": "nms_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "nms_pre_tensor < num_anchor",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "nms_pre_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(cfg.get('nms_pre', -1), device=device, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_shape_as_tensor(scores)[-2].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_443": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_269": {
                "data": {
                    "value": "num_total_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([max(inds.numel(), 1) for inds in pos_inds_list])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ],
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ],
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/autoassign_head.py": {
        "torch": {
            "Parameter_39": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_classes, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_classes, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "center_prior_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "center_prior_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.reshape(-1) * stride, y.reshape(-1) * stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_210": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(FCOSHead, self).forward_single(x)",
                            "Call"
                        ],
                        [
                            "scale(bbox_pred).float()",
                            "Call"
                        ],
                        [
                            "F.relu(bbox_pred)",
                            "Call"
                        ],
                        [
                            "bbox_pred * stride",
                            "BinOp"
                        ],
                        [
                            "zip(bbox_preds, bbox_targets_list, inside_gt_bbox_mask_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_238": {
                "variable": {
                    "value": "p_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-reg_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_246": {
                "variable": {
                    "value": "confidence_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_pos * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_251": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reweighted_p_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p_pos * p_pos_weight).sum(0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones_like(reweighted_p_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_284": {
                "variable": {
                    "value": "p_neg_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score * objectness",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_364": {
                "variable": {
                    "value": "mlvl_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_level_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_points(featmap_sizes, bbox_preds[0].dtype, bbox_preds[0].device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_467": {
                "variable": {
                    "value": "concat_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((x.reshape(-1) * stride, y.reshape(-1) * stride), dim=-1)",
                            "Call"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_510": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left, top, right, bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "gt_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_center_x, gt_center_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_97": {
                "variable": {
                    "value": "center_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-distance / (2 * instance_sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_97": {
                "variable": {
                    "value": "center_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_103": {
                "variable": {
                    "value": "gt_inds_no_points_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inside_gt_bbox_mask.sum(0) == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "gt_inds_no_points_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_292": {
                "variable": {
                    "value": "foreground_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inside_gt_bbox_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inside_gt_bbox_mask.clone()",
                            "Call"
                        ],
                        [
                            "inside_gt_bbox_mask.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "zip(gt_bboxes, gt_labels, inside_gt_bbox_mask_list)",
                            "Call"
                        ],
                        [
                            "self.center_prior(all_level_points, gt_bboxe, gt_label, inside_gt_bbox_mask)",
                            "Call"
                        ],
                        [
                            "zip(bbox_preds, bbox_targets_list, inside_gt_bbox_mask_list)",
                            "Call"
                        ],
                        [
                            "bbox_targets.min(-1)[0] > 0",
                            "Compare"
                        ],
                        [
                            "bbox_targets.new_zeros((num_points, num_gts), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "inside_gt_bbox_mask",
                            "Method Argument"
                        ],
                        [
                            "inside_gt_bbox_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_112": {
                "variable": {
                    "value": "inside_gt_bbox_mask[:, gt_inds_no_points_inside]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inside_gt_bbox_mask[:, gt_inds_no_points_inside]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "topk_center_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_prior_weights[:, gt_inds_no_points_inside].topk(self.topk, dim=0)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "src": {
                    "value": "torch.ones_like(topk_center_index, dtype=torch.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_253": {
                "input": {
                    "value": "reweighted_p_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p_pos * p_pos_weight).sum(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_308": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_conf * p_neg_weight",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros_like(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_430": {
                "tensors": {
                    "value": "center_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(center_loss).mean() * self.center_loss_weight",
                            "BinOp"
                        ],
                        [
                            "objectnesses[0].sum() * 0 + dummy_center_prior_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_477": {
                "tensors": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_309": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_conf * p_neg_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_115": {
                "input": {
                    "value": "topk_center_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_prior_weights[:, gt_inds_no_points_inside].topk(self.topk, dim=0)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/cascade_rpn_head.py": {
        "torch": {
            "Conv2d_159": {
                "variable": {
                    "value": "self.rpn_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "flat_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat(mlvl_valid_anchors)",
                            "Call"
                        ],
                        [
                            "mlvl_anchors[idx]",
                            "Subscript"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_204": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(anchors)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_205": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(anchors)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_623": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_624": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_valid_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_625": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_628": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "level_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3)",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3)",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.rpn_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_344": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-pad",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "pad + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_list[0][0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "x[0].device",
                            "Attribute"
                        ],
                        [
                            "x[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_345": {
                "variable": {
                    "value": "(yy, xx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-pad, pad + 1, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "idx in range(len(cls_scores))",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-pad, pad + 1, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "idx in range(len(cls_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_366": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_367": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_368": {
                "variable": {
                    "value": "(yy, xx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.meshgrid(idx, idx)",
                            "Call"
                        ],
                        [
                            "yy.reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, feat_h, device=anchors.device)",
                            "Call"
                        ],
                        [
                            "torch.meshgrid(yy, xx)",
                            "Call"
                        ],
                        [
                            "yy.reshape(-1).type_as(y)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.meshgrid(idx, idx)",
                            "Call"
                        ],
                        [
                            "xx.reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, feat_w, device=anchors.device)",
                            "Call"
                        ],
                        [
                            "torch.meshgrid(yy, xx)",
                            "Call"
                        ],
                        [
                            "xx.reshape(-1).type_as(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_634": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_634": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_397": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[offset_y, offset_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_486": {
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat(mlvl_valid_anchors)",
                            "Call"
                        ],
                        [
                            "mlvl_anchors[idx]",
                            "Subscript"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_400": {
                "tensors": {
                    "value": "mlvl_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/centernet_head.py": {
        "torch": {
            "Sequential_65": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, feat_channel, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_361": {
                "variable": {
                    "value": "batch_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tl_x, tl_y, br_x, br_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_362": {
                "variable": {
                    "value": "batch_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_bboxes, batch_scores[..., None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "gt_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(center_x, center_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_375": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_bboxes[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feat_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_channel",
                            "Method Argument"
                        ],
                        [
                            "feat_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "feat_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_channel",
                            "Method Argument"
                        ],
                        [
                            "feat_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/centripetal_head.py": {
        "torch": {
            "ModuleList_79": {
                "variable": {
                    "value": "self.tl_feat_adaption",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.br_feat_adaption",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.tl_dcn_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_82": {
                "variable": {
                    "value": "self.br_dcn_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.tl_guiding_shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.br_guiding_shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.tl_centripetal_shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.br_centripetal_shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/corner_head.py": {
        "torch": {
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_778": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, scores.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_951": {
                "variable": {
                    "value": "tl_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tl_xs > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tl_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_topk_from_heatmap(tl_heat, k=k)",
                            "Call"
                        ],
                        [
                            "tl_xs.view(batch, k, 1).repeat(1, 1, k)",
                            "Call"
                        ],
                        [
                            "tl_xs + tl_off[..., 0]",
                            "BinOp"
                        ],
                        [
                            "tl_xs - x_off",
                            "BinOp"
                        ],
                        [
                            "torch.where(tl_xs > 0.0, tl_xs, zeros)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl_xs.new_zeros(*tl_xs.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "where_952": {
                "variable": {
                    "value": "tl_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tl_ys > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tl_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_topk_from_heatmap(tl_heat, k=k)",
                            "Call"
                        ],
                        [
                            "tl_ys.view(batch, k, 1).repeat(1, 1, k)",
                            "Call"
                        ],
                        [
                            "tl_ys + tl_off[..., 1]",
                            "BinOp"
                        ],
                        [
                            "tl_ys - y_off",
                            "BinOp"
                        ],
                        [
                            "torch.where(tl_ys > 0.0, tl_ys, zeros)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl_xs.new_zeros(*tl_xs.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "where_953": {
                "variable": {
                    "value": "br_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "br_xs > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "br_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_topk_from_heatmap(br_heat, k=k)",
                            "Call"
                        ],
                        [
                            "br_xs.view(batch, 1, k).repeat(1, k, 1)",
                            "Call"
                        ],
                        [
                            "br_xs + br_off[..., 0]",
                            "BinOp"
                        ],
                        [
                            "br_xs - x_off",
                            "BinOp"
                        ],
                        [
                            "torch.where(br_xs > 0.0, br_xs, zeros)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl_xs.new_zeros(*tl_xs.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "where_954": {
                "variable": {
                    "value": "br_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "br_ys > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "br_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_topk_from_heatmap(br_heat, k=k)",
                            "Call"
                        ],
                        [
                            "br_ys.view(batch, 1, k).repeat(1, k, 1)",
                            "Call"
                        ],
                        [
                            "br_ys + br_off[..., 1]",
                            "BinOp"
                        ],
                        [
                            "br_ys - y_off",
                            "BinOp"
                        ],
                        [
                            "torch.where(br_ys > 0.0, br_ys, zeros)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl_xs.new_zeros(*tl_xs.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_956": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tl_xs, tl_ys, br_xs, br_ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_1031": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cls_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl_clses != br_clses",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "negative_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * torch.ones_like(scores)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_scores.view([-1, 1])",
                            "Call"
                        ],
                        [
                            "scores.sort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.view(-1)",
                            "Call"
                        ],
                        [
                            "(tl_scores + br_scores) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(cls_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(width_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(height_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(dist_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(scores, num_dets)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1032": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "width_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "br_xs <= tl_xs",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "negative_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * torch.ones_like(scores)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_scores.view([-1, 1])",
                            "Call"
                        ],
                        [
                            "scores.sort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.view(-1)",
                            "Call"
                        ],
                        [
                            "(tl_scores + br_scores) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(cls_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(width_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(height_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(dist_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(scores, num_dets)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1033": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "height_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "br_ys <= tl_ys",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "negative_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * torch.ones_like(scores)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_scores.view([-1, 1])",
                            "Call"
                        ],
                        [
                            "scores.sort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.view(-1)",
                            "Call"
                        ],
                        [
                            "(tl_scores + br_scores) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(cls_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(width_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(height_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(dist_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(scores, num_dets)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1034": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "dist_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dists > distance_threshold",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "negative_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * torch.ones_like(scores)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_scores.view([-1, 1])",
                            "Call"
                        ],
                        [
                            "scores.sort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.view(-1)",
                            "Call"
                        ],
                        [
                            "(tl_scores + br_scores) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(cls_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(width_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(height_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(dist_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(scores, num_dets)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_1043": {
                "variable": {
                    "value": "(scores, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_scores.view([-1, 1])",
                            "Call"
                        ],
                        [
                            "scores.sort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.view(-1)",
                            "Call"
                        ],
                        [
                            "(tl_scores + br_scores) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(cls_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(width_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(height_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(dist_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(scores, num_dets)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "num_dets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_158": {
                "*args": {
                    "value": "ConvModule(in_channels, feat_channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_805": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_bboxes[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_970": {
                "variable": {
                    "value": "ct_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tl_ctxs, tl_ctys, br_ctxs, br_ctys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_974": {
                "variable": {
                    "value": "rcentral",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ct_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((tl_ctxs, tl_ctys, br_ctxs, br_ctys), dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1007": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tl_emb - br_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_1030": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_scores.view([-1, 1])",
                            "Call"
                        ],
                        [
                            "scores.sort(dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "scores.view(-1)",
                            "Call"
                        ],
                        [
                            "(tl_scores + br_scores) / 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(cls_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(width_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(height_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "torch.where(dist_inds, negative_scores, scores)",
                            "Call"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.topk(scores, num_dets)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_976": {
                "input": {
                    "value": "area_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((br_xs - tl_xs) * (br_ys - tl_ys)).abs()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/deformable_detr_head.py": {
        "torch": {
            "Sequential_58": {
                "variable": {
                    "value": "reg_branch",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reg_branch",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "outputs_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_173": {
                "variable": {
                    "value": "outputs_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs_coords)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.cls_branches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[fc_cls for _ in range(num_pred)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.reg_branches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[reg_branch for _ in range(num_pred)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_79": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_134": {
                "input": {
                    "value": "img_masks[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "feat.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_134": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_241": {
                "input": {
                    "value": "gt_labels_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/dense_test_mixins.py": {
        "torch": {
            "cat_195": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "aug_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "aug_factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/detr_head.py": {
        "torch": {
            "Embedding_164": {
                "variable": {
                    "value": "self.query_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_253": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_253": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_369": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._get_target_single, cls_scores_list, bbox_preds_list, gt_bboxes_list, gt_labels_list, img_metas, gt_bboxes_ignore_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._get_target_single, cls_scores_list, bbox_preds_list, gt_bboxes_list, gt_labels_list, img_metas, gt_bboxes_ignore_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._get_target_single, cls_scores_list, bbox_preds_list, gt_bboxes_list, gt_labels_list, img_metas, gt_bboxes_ignore_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._get_target_single, cls_scores_list, bbox_preds_list, gt_bboxes_list, gt_labels_list, img_metas, gt_bboxes_ignore_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_390": {
                "variable": {
                    "value": "num_total_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reduce_mean(num_total_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "factors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(factors, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_529": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(img_metas, bbox_preds)",
                            "Call"
                        ],
                        [
                            "bbox_preds[img_id]",
                            "Subscript"
                        ],
                        [
                            "bbox_pred[bbox_index]",
                            "Subscript"
                        ],
                        [
                            "bbox_pred[bbox_index]",
                            "Subscript"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_530": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(img_metas, bbox_preds)",
                            "Call"
                        ],
                        [
                            "bbox_preds[img_id]",
                            "Subscript"
                        ],
                        [
                            "bbox_pred[bbox_index]",
                            "Subscript"
                        ],
                        [
                            "bbox_pred[bbox_index]",
                            "Subscript"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_680": {
                "variable": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(det_bboxes, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_763": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_763": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_840": {
                "variable": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_841": {
                "variable": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(det_bboxes, scores.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_668": {
                "variable": {
                    "value": "(scores, det_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_821": {
                "variable": {
                    "value": "(scores, det_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_805": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "cls_scores.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_97": {
                "*size": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_668": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[img_id]",
                            "Subscript"
                        ],
                        [
                            "cls_score.sigmoid()",
                            "Call"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_821": {
                "input": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores.reshape(-1, self.cls_out_channels)",
                            "Call"
                        ],
                        [
                            "all_cls_scores_list[-1][-1]",
                            "Subscript"
                        ],
                        [
                            "all_cls_scores_list[-1][-1]",
                            "Subscript"
                        ],
                        [
                            "cls_scores.sigmoid()",
                            "Call"
                        ],
                        [
                            "cls_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/embedding_rpn_head.py": {
        "torch": {
            "Embedding_39": {
                "variable": {
                    "value": "self.init_proposal_bboxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_proposals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "self.init_proposal_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_proposals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.proposal_feature_channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "imgs_whwh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_whwh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_whwh, dim=0)",
                            "Call"
                        ],
                        [
                            "imgs_whwh[:, None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/fcos_head.py": {
        "torch": {
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv_centerness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_215": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_216": {
                "variable": {
                    "value": "flatten_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[centerness.permute(0, 2, 3, 1).reshape(-1) for centerness in centernesses]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_217": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_targets(all_level_points, gt_bboxes, gt_labels)",
                            "Call"
                        ],
                        [
                            "gt_labels[min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_218": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_targets(all_level_points, gt_bboxes, gt_labels)",
                            "Call"
                        ],
                        [
                            "torch.cat([bbox_targets[i] for bbox_targets in bbox_targets_list])",
                            "Call"
                        ],
                        [
                            "bbox_targets / self.strides[i]",
                            "BinOp"
                        ],
                        [
                            "torch.stack((left, top, right, bottom), -1)",
                            "Call"
                        ],
                        [
                            "bbox_targets[range(num_points), min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_220": {
                "variable": {
                    "value": "flatten_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points.repeat(num_imgs, 1) for points in all_level_points]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(pos_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "bbox_preds[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "nms_pre_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.get('nms_pre', -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "batch_mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores, batch_mlvl_centerness)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_428": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores, batch_mlvl_centerness)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "batch_mlvl_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores, batch_mlvl_centerness)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "concat_regress_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "expanded_regress_ranges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[points[i].new_tensor(self.regress_ranges[i])[None].expand_as(points[i]) for i in range(num_levels)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "concat_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(cls_scores, bbox_preds, centernesses, mlvl_points)",
                            "Call"
                        ],
                        [
                            "points.expand(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "points.reshape(-1, 2)[transformed_inds, :].reshape(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "points[batch_inds, topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((x.reshape(-1) * stride, y.reshape(-1) * stride), dim=-1) + stride // 2",
                            "BinOp"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_570": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left, top, right, bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().forward_single(x)",
                            "Call"
                        ],
                        [
                            "scale(bbox_pred).float()",
                            "Call"
                        ],
                        [
                            "F.relu(bbox_pred)",
                            "Call"
                        ],
                        [
                            "bbox_pred.exp()",
                            "Call"
                        ],
                        [
                            "bbox_pred * stride",
                            "BinOp"
                        ],
                        [
                            "zip(cls_scores, bbox_preds, centernesses, mlvl_points)",
                            "Call"
                        ],
                        [
                            "bbox_pred.permute(0, 2, 3, 1).reshape(batch_size, -1, 4)",
                            "Call"
                        ],
                        [
                            "bbox_pred.reshape(-1, 4)[transformed_inds, :].reshape(batch_size, -1, 4)",
                            "Call"
                        ],
                        [
                            "bbox_pred[batch_inds, topk_inds, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_538": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_targets[i] for bbox_targets in bbox_targets_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_577": {
                "variable": {
                    "value": "center_gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes[None].expand(num_points, num_gts, 4)",
                            "Call"
                        ],
                        [
                            "gt_bboxes",
                            "Method Argument"
                        ],
                        [
                            "gt_bboxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_591": {
                "variable": {
                    "value": "center_gts[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_mins > gt_bboxes[..., 0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_xs - stride",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_bboxes[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_593": {
                "variable": {
                    "value": "center_gts[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "y_mins > gt_bboxes[..., 1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_ys - stride",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_bboxes[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_595": {
                "variable": {
                    "value": "center_gts[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "x_maxs > gt_bboxes[..., 2]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_bboxes[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x_maxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_xs + stride",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_597": {
                "variable": {
                    "value": "center_gts[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "y_maxs > gt_bboxes[..., 3]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_bboxes[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_maxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_ys + stride",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_604": {
                "variable": {
                    "value": "center_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cb_dist_left, cb_dist_top, cb_dist_right, cb_dist_bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_648": {
                "input": {
                    "value": "centerness_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "left_right[..., 0]",
                            "Subscript"
                        ],
                        [
                            "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_397": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_480": {
                "tensors": {
                    "value": "(x.reshape(-1) * stride, y.reshape(-1) * stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_537": {
                "tensors": {
                    "value": "[labels[i] for labels in labels_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/fovea_head.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "deform_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_156": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_targets(gt_bbox_list, gt_label_list, featmap_sizes, points)",
                            "Call"
                        ],
                        [
                            "[torch.cat([labels_level_img.flatten() for labels_level_img in labels_level]) for labels_level in zip(*label_list)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_203": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_targets(gt_bbox_list, gt_label_list, featmap_sizes, points)",
                            "Call"
                        ],
                        [
                            "[torch.cat([bbox_targets_level_img.reshape(-1, 4) for bbox_targets_level_img in bbox_targets_level]) for bbox_targets_level in zip(*bbox_target_list)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_212": {
                "variable": {
                    "value": "gt_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes_raw[:, 2] - gt_bboxes_raw[:, 0]) * (gt_bboxes_raw[:, 3] - gt_bboxes_raw[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_337": {
                "variable": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_bboxes_single(cls_score_list, bbox_pred_list, featmap_sizes, points, img_shape, scale_factor, cfg, rescale)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_bboxes)",
                            "Call"
                        ],
                        [
                            "det_bboxes / det_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ],
                        [
                            "multiclass_nms(det_bboxes, det_scores, cfg.score_thr, cfg.nms, cfg.max_per_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_340": {
                "variable": {
                    "value": "det_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(det_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([det_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_344": {
                "variable": {
                    "value": "det_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[det_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(self.feat_channels * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "loss_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "flatten_bbox_preds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "flatten_bbox_preds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_231": {
                "variable": {
                    "value": "(_, hit_index_order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-gt_areas[hit_indices]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ceil_238": {
                "variable": {
                    "value": "pos_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 0] + (1 - self.sigma) * half_w - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_238": {
                "variable": {
                    "value": "pos_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_241": {
                "variable": {
                    "value": "pos_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 0] + (1 + self.sigma) * half_w - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_241": {
                "variable": {
                    "value": "pos_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_244": {
                "variable": {
                    "value": "pos_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 1] + (1 - self.sigma) * half_h - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_244": {
                "variable": {
                    "value": "pos_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_247": {
                "variable": {
                    "value": "pos_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, 1] + (1 + self.sigma) * half_h - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_247": {
                "variable": {
                    "value": "pos_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "featmap_size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_334": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_192": {
                "tensors": {
                    "value": "[labels_level_img.flatten() for labels_level_img in labels_level]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_197": {
                "tensors": {
                    "value": "[bbox_targets_level_img.reshape(-1, 4) for bbox_targets_level_img in bbox_targets_level]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_264": {
                "input": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes_raw.new(featmap_size[0], featmap_size[1], 4) + 1",
                            "BinOp"
                        ],
                        [
                            "bbox_targets.clamp(min=1.0 / 16, max=16.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_229": {
                "input": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_bboxes_raw.new(featmap_size[0], featmap_size[1], 4) + 1",
                            "BinOp"
                        ],
                        [
                            "bbox_targets.clamp(min=1.0 / 16, max=16.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/free_anchor_retina_head.py": {
        "torch": {
            "cat_94": {
                "variable": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls.permute(0, 2, 3, 1).reshape(cls.size(0), -1, self.cls_out_channels) for cls in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cls_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "cls_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(bbox_pred.size(0), -1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(bbox_preds, dim=1)",
                            "Call"
                        ],
                        [
                            "bbox_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls.permute(0, 2, 3, 1).reshape(cls.size(0), -1, self.cls_out_channels) for cls in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(cls_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "cls_scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_201": {
                "variable": {
                    "value": "box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(box_prob, dim=0)",
                            "Call"
                        ],
                        [
                            "box_prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_170": {
                "variable": {
                    "value": "(_, matched)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps(gt_bboxes_, anchors_)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.pre_anchor_topk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_178": {
                "variable": {
                    "value": "matched_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_prob_[matched]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "gt_labels_.view(-1, 1, 1).repeat(1, self.pre_anchor_topk, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_178": {
                "variable": {
                    "value": "matched_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_192": {
                "variable": {
                    "value": "matched_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-loss_bbox",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "positive_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_239": {
                "input": {
                    "value": "1 - matched_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_243": {
                "input": {
                    "value": "bag_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight * matched_prob).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones_like(bag_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_268": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_prob * (1 - box_prob)",
                            "BinOp"
                        ],
                        [
                            "prob.clamp(min=EPS, max=1 - EPS)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros_like(prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "image_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors_.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(num_obj).type_as(gt_labels_), gt_labels_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_131": {
                "variable": {
                    "value": "object_cls_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.arange(num_obj).type_as(gt_labels_), gt_labels_], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(box_cls_prob, as_tuple=False).t_()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "object_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((object_box_iou - t1) / (t2 - t1)).clamp(min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_142": {
                "variable": {
                    "value": "box_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "object_cls_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse_coo_tensor(indices, object_box_prob)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_145": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_cls_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sparse.sum(object_cls_box_prob, dim=0).to_dense()",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_244": {
                "input": {
                    "value": "bag_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight * matched_prob).sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_269": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_prob * (1 - box_prob)",
                            "BinOp"
                        ],
                        [
                            "prob.clamp(min=EPS, max=1 - EPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "image_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors_.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_159": {
                "variable": {
                    "value": "image_box_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices.flip([0])",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "nonzero_box_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(gt_labels_.unsqueeze(dim=-1) == indices[0], object_box_prob[:, indices[1]], torch.tensor([0]).type_as(object_box_prob)).max(dim=0).values",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "(anchors_.size(0), self.cls_out_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_128": {
                "start": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels_.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_151": {
                "condition": {
                    "value": "gt_labels_.unsqueeze(dim=-1) == indices[0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "object_box_prob[:, indices[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor([0]).type_as(object_box_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_151": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/fsaf_head.py": {
        "torch": {
            "zeros_like_112": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags.type(torch.bool), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_113": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags.type(torch.bool), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_272": {
                "variable": {
                    "value": "label_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(map(len, gt_labels)))",
                            "Call"
                        ],
                        [
                            "sum(map(len, gt_labels))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_299": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampling_result.pos_inds",
                            "Attribute"
                        ],
                        [
                            "multi_apply(self.reweight_loss_single, losses_cls, losses_bbox, pos_assigned_gt_inds_list, labels_list, list(range(len(losses_cls))), min_levels=argmin)",
                            "Call"
                        ],
                        [
                            "pos_inds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_299": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_409": {
                "variable": {
                    "value": "loc_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_loss.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "weight_reduce_loss(reg_loss, loc_weight, reduction='sum')",
                            "Call"
                        ],
                        [
                            "reg_loss",
                            "Method Argument"
                        ],
                        [
                            "reg_loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_410": {
                "variable": {
                    "value": "cls_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_loss.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "weight_reduce_loss(cls_loss, cls_weight, reduction='sum')",
                            "Call"
                        ],
                        [
                            "cls_loss",
                            "Method Argument"
                        ],
                        [
                            "cls_loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_412": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assigned_gt_inds >= 0",
                            "Compare"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_412": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_282": {
                "variable": {
                    "value": "loss_levels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self.collect_loss_level_single, losses_cls, losses_bbox, pos_assigned_gt_inds_list, labels_seq=label_sequence)",
                            "Call"
                        ],
                        [
                            "torch.stack(loss_levels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls.permute(0, 2, 3, 1).reshape(-1, num_class)[pos] for (cls, pos) in zip(cls_scores, pos_inds)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(scores, dim=0)",
                            "Call"
                        ],
                        [
                            "scores.sigmoid()",
                            "Call"
                        ],
                        [
                            "scores.softmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.new_full((num_valid_anchors,), self.num_classes, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "unmap(labels, num_total_anchors, inside_flags)",
                            "Call"
                        ],
                        [
                            "[label.reshape(-1)[pos] for (label, pos) in zip(labels_list, pos_inds)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/ga_retina_head.py": {
        "torch": {
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/ga_rpn_head.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_156": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/gfl_head.py": {
        "torch": {
            "softmax_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.reshape(-1, self.reg_max + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(x.reshape(-1, self.reg_max + 1), dim=1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.project.type_as(x)).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.project.type_as(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.gfl_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.gfl_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * (self.reg_max + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.anchor_generator.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "batch_mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_450": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "zip(batch_mlvl_bboxes, batch_mlvl_scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_602": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "zip(cls_scores, bbox_preds, self.anchor_generator.strides, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.expand_as(bbox_pred)",
                            "Call"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_603": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "zip(cls_scores, bbox_preds, self.anchor_generator.strides, mlvl_anchors)",
                            "Call"
                        ],
                        [
                            "anchors[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "anchors.expand_as(bbox_pred)",
                            "Call"
                        ],
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "unmap(anchors, num_total_anchors, inside_flags)",
                            "Call"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_644": {
                "variable": {
                    "value": "split_inside_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inside_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_inside_flags(flat_anchors, valid_flags, img_meta['img_shape'][:2], self.train_cfg.allowed_border)",
                            "Call"
                        ],
                        [
                            "inside_flags",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_level_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[anchors.size(0) for anchors in anchor_list[0]]",
                            "ListComp"
                        ],
                        [
                            "num_level_anchors",
                            "Method Argument"
                        ],
                        [
                            "num_level_anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_208": {
                "tensors": {
                    "value": "[anchors_cx, anchors_cy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_498": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_499": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_32": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.reg_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.reg_max + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_432": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_349": {
                "data": {
                    "value": "num_total_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([max(inds.numel(), 1) for inds in pos_inds_list])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/guided_anchor_head.py": {
        "torch": {
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "deform_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "self.conv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "variable": {
                    "value": "self.conv_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_519": {
                "variable": {
                    "value": "bbox_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squares_list[img_id][i]",
                            "Subscript"
                        ],
                        [
                            "squares[mask]",
                            "Subscript"
                        ],
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "squares",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_520": {
                "variable": {
                    "value": "bbox_gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squares_list[img_id][i]",
                            "Subscript"
                        ],
                        [
                            "squares[mask]",
                            "Subscript"
                        ],
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "squares",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_521": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squares_list[img_id][i]",
                            "Subscript"
                        ],
                        [
                            "squares[mask]",
                            "Subscript"
                        ],
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "squares",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_614": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_weights[:, 0] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_614": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_844": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_847": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_408": {
                "variable": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "img_per_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(gt_bboxes_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_bboxes_list[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_415": {
                "variable": {
                    "value": "loc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.ga_loc_targets(gt_bboxes, featmap_sizes)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_416": {
                "variable": {
                    "value": "ignore_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "self.ga_loc_targets(gt_bboxes, featmap_sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_422": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes[:, 2] - gt_bboxes[:, 0]) * (gt_bboxes[:, 3] - gt_bboxes[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_427": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale) - torch.log2(min_anchor_size) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_853": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_573": {
                "tensors": {
                    "value": "inside_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_574": {
                "tensors": {
                    "value": "approx_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_575": {
                "tensors": {
                    "value": "square_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_701": {
                "tensors": {
                    "value": "guided_anchors_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_284": {
                "tensors": {
                    "value": "inside_flags_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_284": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_428": {
                "input": {
                    "value": "min_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.new_full((1,), float(anchor_scale * anchor_strides[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/ld_head.py": {
        "torch": {
            "tensor_236": {
                "data": {
                    "value": "num_total_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/nasfcos_head.py": {
        "torch": {
            "ModuleList_52": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv_centerness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/pisa_retinanet_head.py": {
        "torch": {
            "cat_87": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(num_imgs, -1, label_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores, dim=1).reshape(-1, flatten_cls_scores[0].size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "flatten_cls_scores[0].size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(num_imgs, -1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds, dim=1).view(-1, flatten_bbox_preds[0].size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "flatten_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "flatten_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "flatten_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_anchor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_to_levels(concat_anchor_list, num_level_anchors)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "flatten_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "flatten_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "flatten_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/pisa_ssd_head.py": {
        "torch": {
            "cat_63": {
                "variable": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "all_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "all_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "all_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isfinite_121": {
                "input": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_123": {
                "input": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "all_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/reppoints_head.py": {
        "torch": {
            "tensor_84": {
                "variable": {
                    "value": "self.dcn_base_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dcn_base_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([dcn_base_y, dcn_base_x], axis=1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "self.dcn_base_offset.type_as(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.reppoints_cls_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.reppoints_pts_init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.reppoints_pts_init_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pts_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.use_grid_points else 2 * self.num_points",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.reppoints_pts_refine_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pts_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.use_grid_points else 2 * self.num_points",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_238": {
                "variable": {
                    "value": "intervel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.dcn_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_246": {
                "variable": {
                    "value": "grid_yx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_y, grid_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "regressed_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_left, grid_top, grid_left + grid_width, grid_top + grid_height]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_392": {
                "variable": {
                    "value": "pos_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_proposals[inside_flags, :]",
                            "Subscript"
                        ],
                        [
                            "self._get_bboxes_single(cls_score_list, bbox_pred_list, multi_level_points, img_shape, scale_factor, cfg, rescale, with_nms)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_733": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_736": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.moment_transfer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_left, bbox_up, bbox_right, bbox_bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_361": {
                "variable": {
                    "value": "pts_lvl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pts_lvl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pts_lvl, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_485": {
                "variable": {
                    "value": "proposals_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proposals_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_486": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_724": {
                "variable": {
                    "value": "bbox_pos_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points[:, :2], points[:, :2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_730": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_742": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_left, bbox_up, bbox_right, bbox_bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_233": {
                "input": {
                    "value": "reg[:, 2:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_336": {
                "variable": {
                    "value": "bbox_shift",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "bbox_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point[i_lvl][:, :2], point[i_lvl][:, :2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_357": {
                "variable": {
                    "value": "xy_pts_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_pts_shift, y_pts_shift]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_609": {
                "variable": {
                    "value": "bbox_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center[i_lvl][:, :2], center[i_lvl][:, :2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_202": {
                "variable": {
                    "value": "pts_y_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts_y - pts_y_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_203": {
                "variable": {
                    "value": "pts_x_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts_x - pts_x_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pts_x_mean - half_width, pts_y_mean - half_height, pts_x_mean + half_width, pts_y_mean + half_height]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_231": {
                "input": {
                    "value": "reg[:, 2:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_208": {
                "input": {
                    "value": "moment_width_transfer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moment_transfer[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_209": {
                "input": {
                    "value": "moment_height_transfer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moment_transfer[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/retina_head.py": {
        "torch": {
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.retina_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/retina_sepbn_head.py": {
        "torch": {
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.retina_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "cls_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "reg_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/rpn_head.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.rpn_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.rpn_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_205": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_valid_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_206": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_209": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "level_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "nms_pre_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.nms_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_scores[0].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "batch_mlvl_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_valid_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "batch_mlvl_rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_288": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/dense_heads/sabl_retina_head.py": {
        "torch": {
            "ReLU_153": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "variable": {
                    "value": "self.retina_bbox_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.side_num * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.retina_bbox_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.side_num * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_607": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_610": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_611": {
                "variable": {
                    "value": "mlvl_confids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_confids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_confids)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_614": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "inside_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "approx_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_277": {
                "tensors": {
                    "value": "square_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/ssd_head.py": {
        "torch": {
            "ModuleList_110": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "all_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "all_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "all_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isfinite_330": {
                "input": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_332": {
                "input": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_229": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "variable"
                        ],
                        [
                            "self.feat_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1 if self.use_depthwise else 3",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0 if self.use_depthwise else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "variable"
                        ],
                        [
                            "self.feat_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1 if self.use_depthwise else 3",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0 if self.use_depthwise else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "*args": {
                    "value": "*cls_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "*args": {
                    "value": "*reg_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/vfnet_head.py": {
        "torch": {
            "tensor_120": {
                "variable": {
                    "value": "self.dcn_base_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dcn_base_offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([dcn_base_y, dcn_base_x], axis=1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "self.dcn_base_offset.type_as(bbox_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_162": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.vfnet_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.vfnet_reg_refine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.scales_refine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.vfnet_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels).contiguous() for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_372": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4).contiguous() for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_373": {
                "variable": {
                    "value": "flatten_bbox_preds_refine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds_refine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred_refine.permute(0, 2, 3, 1).reshape(-1, 4).contiguous() for bbox_pred_refine in bbox_preds_refine]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds_refine)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_374": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_targets(cls_scores, all_level_points, gt_bboxes, gt_labels, img_metas, gt_bboxes_ignore)",
                            "Call"
                        ],
                        [
                            "FCOSHead.get_targets(self, points, gt_bboxes_list, gt_labels_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_375": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_targets(cls_scores, all_level_points, gt_bboxes, gt_labels, img_metas, gt_bboxes_ignore)",
                            "Call"
                        ],
                        [
                            "FCOSHead.get_targets(self, points, gt_bboxes_list, gt_labels_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_377": {
                "variable": {
                    "value": "flatten_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points.repeat(num_imgs, 1) for points in all_level_points]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_580": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_583": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_587": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_604": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_606": {
                "variable": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores[0].device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_608": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_758": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[label_weights.reshape(-1) for label_weights in label_weights_list]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_759": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_weights.reshape(-1) for bbox_weights in bbox_weights_list]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "where_382": {
                "condition": {
                    "value": "(flatten_labels >= 0) & (flatten_labels < bg_class_ind) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_437": {
                "variable": {
                    "value": "cls_iou_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels).contiguous() for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_443": {
                "variable": {
                    "value": "cls_iou_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels).contiguous() for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_611": {
                "tensors": {
                    "value": "(x.reshape(-1), y.reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_615": {
                "tensors": {
                    "value": "(x.reshape(-1), y.reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/yolact_head.py": {
        "torch": {
            "ReLU_89": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv_coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.num_protos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_443": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([mlvl_scores, padding], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_444": {
                "variable": {
                    "value": "mlvl_coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_coeffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_coeffs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_495": {
                "variable": {
                    "value": "self.segm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_825": {
                "variable": {
                    "value": "gt_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask_h, mask_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_825": {
                "variable": {
                    "value": "gt_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_886": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_889": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_927": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sanitize_coordinates(boxes[:, 0], boxes[:, 2], w, padding, cast=False)",
                            "Call"
                        ],
                        [
                            "x1 * img_size",
                            "BinOp"
                        ],
                        [
                            "x1.long()",
                            "Call"
                        ],
                        [
                            "torch.min(x1, x2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x1 - padding, min=0)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_928": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sanitize_coordinates(boxes[:, 0], boxes[:, 2], w, padding, cast=False)",
                            "Call"
                        ],
                        [
                            "x1 * img_size",
                            "BinOp"
                        ],
                        [
                            "x1.long()",
                            "Call"
                        ],
                        [
                            "torch.min(x1, x2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x1 - padding, min=0)",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_929": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 - padding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_930": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 + padding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_195": {
                "variable": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "all_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "all_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "all_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_450": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_563": {
                "variable": {
                    "value": "downsampled_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_masks.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask_h, mask_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_563": {
                "variable": {
                    "value": "downsampled_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_568": {
                "variable": {
                    "value": "segm_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segm_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segm_pred",
                            "Method Argument"
                        ],
                        [
                            "segm_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_663": {
                "*args": {
                    "value": "*protonets",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_699": {
                "variable": {
                    "value": "coeff_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "coeff_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[coeff_preds[i][img_id].detach() for i in range(num_levels)]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_721": {
                "variable": {
                    "value": "mask_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cur_prototypes @ cur_coeff_pred.t()",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(mask_pred)",
                            "Call"
                        ],
                        [
                            "self.crop(mask_pred, bboxes_for_cropping)",
                            "Call"
                        ],
                        [
                            "mask_pred.permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask_pred.unsqueeze(0), (img_h, img_w), mode='bilinear', align_corners=False).squeeze(0) > 0.5",
                            "Compare"
                        ],
                        [
                            "mask_pred.cpu().numpy().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask_pred",
                            "Method Argument"
                        ],
                        [
                            "mask_pred",
                            "Method Argument"
                        ],
                        [
                            "mask_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_1010": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_conv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "*self.args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isfinite_217": {
                "input": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_219": {
                "input": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_570": {
                "variable": {
                    "value": "segm_targets[gt_labels[obj_idx] - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "segm_targets[gt_labels[obj_idx] - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_640": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "num_channels if num_channels is not None else in_channels",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.proto_channels, self.proto_kernel_sizes)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.proto_channels, self.proto_kernel_sizes)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_769": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_assigned_gt_inds.size(0)",
                            "Call"
                        ],
                        [
                            "self.max_masks_to_train",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_858": {
                "input": {
                    "value": "mask_pred.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(img_h, img_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_858": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_652": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "num_channels if num_channels is not None else in_channels",
                            "IfExp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.proto_channels, self.proto_kernel_sizes)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "-kernel_size",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_658": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_783": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred[idx]",
                            "Subscript"
                        ],
                        [
                            "cur_mask_pred[select]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(cur_mask_pred, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros_like(cur_mask_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.zeros_like(cur_mask_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_787": {
                "variable": {
                    "value": "cur_mask_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_mask_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred[idx]",
                            "Subscript"
                        ],
                        [
                            "cur_mask_pred[select]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(cur_mask_pred, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_799": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Call"
                        ],
                        [
                            "loss",
                            "Call"
                        ],
                        [
                            "self.loss_segm(cur_segm_pred, torch.zeros_like(cur_segm_pred), torch.zeros_like(cur_segm_pred))",
                            "Call"
                        ],
                        [
                            "self.loss_segm(cur_segm_pred, segm_targets, avg_factor=num_imgs * mask_h * mask_w)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Call"
                        ],
                        [
                            "cur_mask_pred.sum() * 0.0",
                            "BinOp"
                        ],
                        [
                            "F.binary_cross_entropy(cur_mask_pred, torch.zeros_like(cur_mask_pred), torch.zeros_like(cur_mask_pred))",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy(cur_mask_pred, mask_targets, reduction='none') * self.loss_mask_weight",
                            "BinOp"
                        ],
                        [
                            "loss.mean(dim=(1, 2)) / gt_bboxes_width / gt_bboxes_height",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_214": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_535": {
                "input": {
                    "value": "cur_segm_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segm_pred[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_536": {
                "input": {
                    "value": "cur_segm_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segm_pred[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_974": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_metas[img_id]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_784": {
                "input": {
                    "value": "cur_mask_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred[idx]",
                            "Subscript"
                        ],
                        [
                            "cur_mask_pred[select]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(cur_mask_pred, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_785": {
                "input": {
                    "value": "cur_mask_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred[idx]",
                            "Subscript"
                        ],
                        [
                            "cur_mask_pred[select]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(cur_mask_pred, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_788": {
                "input": {
                    "value": "cur_mask_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred[idx]",
                            "Subscript"
                        ],
                        [
                            "cur_mask_pred[select]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(cur_mask_pred, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_targets(cur_mask_pred, cur_gt_masks, pos_assigned_gt_inds)",
                            "Call"
                        ],
                        [
                            "gt_masks[pos_assigned_gt_inds]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/yolo_head.py": {
        "torch": {
            "ModuleList_134": {
                "variable": {
                    "value": "self.convs_bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.convs_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "nms_pre_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.get('nms_pre', -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_maps_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pred_maps[0][0].device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "batch_mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "multi_lvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "multi_lvl_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "batch_mlvl_conf_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "multi_lvl_conf_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "batch_mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_mlvl_scores, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_570": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_571": {
                "variable": {
                    "value": "concat_responsible_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "responsible_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "responsible_flags",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_573": {
                "variable": {
                    "value": "anchor_strides",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(anchor_strides)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_591": {
                "variable": {
                    "value": "gt_labels_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels",
                            "Method Argument"
                        ],
                        [
                            "gt_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "conv_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.num_attrib",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_285": {
                "variable": {
                    "value": "pred_map_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_map[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "pred_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_map_conf, pred_map_rest]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_294": {
                "variable": {
                    "value": "conf_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_map[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_295": {
                "variable": {
                    "value": "cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_map[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_303": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_maps_list[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_487": {
                "input": {
                    "value": "pos_and_neg_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_mask + pos_mask",
                            "BinOp"
                        ],
                        [
                            "pos_and_neg_mask.clamp(min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_364": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_568": {
                "data": {
                    "value": "self.featmap_strides[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_bboxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/dense_heads/yolof_head.py": {
        "torch": {
            "Sequential_86": {
                "variable": {
                    "value": "self.cls_subnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cls_subnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.bbox_subnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*bbox_subnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.object_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_301": {
                "variable": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_302": {
                "variable": {
                    "value": "batch_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "rest_results[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rests",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rests in enumerate(rest_results)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_129": {
                "input": {
                    "value": "1.0 + torch.clamp(cls_score.exp(), max=INF) + torch.clamp(objectness.exp(), max=INF)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_131": {
                "input": {
                    "value": "objectness.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "INF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100000000.0",
                            "float"
                        ]
                    ]
                }
            },
            "clamp_130": {
                "input": {
                    "value": "cls_score.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "INF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100000000.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/detectors/base.py": {
        "torch": {
            "stack_320": {
                "variable": {
                    "value": "segms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "segms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "mmcv.concat_list(segm_result)",
                            "Call"
                        ],
                        [
                            "torch.stack(segms, dim=0).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.stack(segms, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/centernet.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[imgs[ind], imgs[flip_ind]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/cornernet.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[imgs[ind], imgs[flip_ind]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "[bboxes, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/detr.py": {
        "torch": {}
    },
    "mmdet/models/detectors/kd_one_stage.py": {
        "torch": {
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/rpn.py": {
        "torch": {}
    },
    "mmdet/models/detectors/single_stage.py": {
        "torch": {}
    },
    "mmdet/models/detectors/two_stage.py": {
        "torch": {
            "randn_83": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/yolact.py": {
        "torch": {
            "isfinite_87": {
                "input": {
                    "value": "torch.stack(losses[loss_name])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_87": {
                "tensors": {
                    "value": "losses[loss_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/accuracy.py": {
        "torch": {}
    },
    "mmdet/models/losses/ae_loss.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "tl_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tl_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tl_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "br_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "br_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(br_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_48": {
                "variable": {
                    "value": "me_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "me_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(me_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_62": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tl_list.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_66": {
                "input": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "me_list.expand((N, N, M)).permute(1, 0, 2) - me_list",
                            "BinOp"
                        ],
                        [
                            "conf_weight * (margin - conf_mat.sum(-1).abs())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/balanced_l1_loss.py": {
        "torch": {
            "abs_42": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha / b * (b * diff + 1) * torch.log(b * diff / beta + 1) - alpha * diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma * diff + gamma / b - alpha * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "b * diff / beta + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_31": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_onehot_labels(label, weight, pred.size(-1))",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight, device=cls_score.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_44": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels >= 0) & (labels < label_channels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight, device=cls_score.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_135": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_137": {
                "input": {
                    "value": "pred_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight, device=cls_score.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/focal_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_39": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "F.one_hot(target, num_classes=num_classes + 1)",
                            "Call"
                        ],
                        [
                            "target[:, :num_classes]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_166": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "F.one_hot(target, num_classes=num_classes + 1)",
                            "Call"
                        ],
                        [
                            "target[:, :num_classes]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/gaussian_focal_loss.py": {
        "torch": {}
    },
    "mmdet/models/losses/gfocal_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_37": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "zerolabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor.new_zeros(pred.shape)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_46": {
                "input": {
                    "value": "pred[pos, pos_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "score[pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_75": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "dis_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.long()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_76": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "dis_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dis_left + 1",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/ghm_loss.py": {
        "torch": {
            "nonzero_10": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels >= 0) & (labels < label_channels)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_10": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_73": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.sigmoid().detach() - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_150": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff / torch.sqrt(mu * mu + diff * diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(pred.sigmoid().detach() - target)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff / torch.sqrt(mu * mu + diff * diff)).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_39": {
                "start": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_92": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_onehot_labels(target, label_weight, pred.size(-1))",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(pred)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(g)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_117": {
                "start": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "input": {
                    "value": "diff * diff + mu * mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "input": {
                    "value": "mu * mu + diff * diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/iou_loss.py": {
        "torch": {
            "stack_77": {
                "variable": {
                    "value": "loss_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss_dx, loss_dy, loss_dw, loss_dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "loss_comb < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * loss_comb * loss_comb / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "loss_comb - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_122": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_123": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_136": {
                "variable": {
                    "value": "enclose_x1y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_137": {
                "variable": {
                    "value": "enclose_x2y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_178": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_179": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_192": {
                "variable": {
                    "value": "enclose_x1y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_193": {
                "variable": {
                    "value": "enclose_x2y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_67": {
                "input": {
                    "value": "(target_w - 2 * dx.abs()) / (target_w + 2 * dx.abs() + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_70": {
                "input": {
                    "value": "(target_h - 2 * dy.abs()) / (target_h + 2 * dy.abs() + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_73": {
                "input": {
                    "value": "target_w / (pred_w + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_75": {
                "input": {
                    "value": "target_h / (pred_h + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_214": {
                "input": {
                    "value": "torch.atan(w2 / h2) - torch.atan(w1 / h1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "input": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ctrx - pred_ctrx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_72": {
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ctry - pred_ctry",
                            "BinOp"
                        ]
                    ]
                }
            },
            "atan_214": {
                "input": {
                    "value": "w1 / h1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "any_270": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_310": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_345": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_385": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_425": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/kd_loss.py": {
        "torch": {
            "softmax_27": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_label / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_31": {
                "input": {
                    "value": "F.log_softmax(pred / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(soft_label / T, dim=1)",
                            "Call"
                        ],
                        [
                            "target.detach()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_31": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_32": {
                "input": {
                    "value": "pred / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/mse_loss.py": {
        "torch": {
            "mse_loss_11": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/pisa_loss.py": {
        "torch": {
            "cat_57": {
                "variable": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(gts)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/losses/seesaw_loss.py": {
        "torch": {
            "one_hot_44": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "1203",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_69": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score + seesaw_weights.log() * (1 - onehot_labels)",
                            "BinOp"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "score_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score[..., :-2]",
                            "Subscript"
                        ],
                        [
                            "self._split_cls_score(cls_score)",
                            "Call"
                        ],
                        [
                            "self._split_cls_score(cls_score)",
                            "Call"
                        ],
                        [
                            "self._split_cls_score(cls_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "variable": {
                    "value": "score_objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score_objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score[..., -2:]",
                            "Subscript"
                        ],
                        [
                            "self._split_cls_score(cls_score)",
                            "Call"
                        ],
                        [
                            "self._split_cls_score(cls_score)",
                            "Call"
                        ],
                        [
                            "self._split_cls_score(cls_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_classes, score_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_60": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/smooth_l1_loss.py": {
        "torch": {
            "abs_25": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_26": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/utils.py": {
        "torch": {}
    },
    "mmdet/models/losses/varifocal_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_52": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/bfp.py": {
        "torch": {
            "adaptive_max_pool2d_78": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "gather_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "gather_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_96": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(feats) / len(feats)",
                            "BinOp"
                        ],
                        [
                            "self.refine(bsf)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_98": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "bsf",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/necks/channel_mapper.py": {
        "torch": {
            "ModuleList_60": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.extra_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/ct_resnet_neck.py": {
        "torch": {
            "Sequential_61": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/dilated_encoder.py": {
        "torch": {
            "Conv2d_77": {
                "variable": {
                    "value": "self.lateral_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.lateral_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.fpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.fpn_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.dilated_encoder_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*encoder_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/fpg.py": {
        "torch": {
            "interpolate_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode=self.mode, align_corners=self.align_corners)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.fuse(to_fuse)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_227": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_234": {
                "variable": {
                    "value": "self.extra_downsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_248": {
                "variable": {
                    "value": "self.fpn_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_305": {
                "variable": {
                    "value": "self.output_transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_314": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "variable": {
                    "value": "l_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels[i - self.start_level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "stage_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_238": {
                "variable": {
                    "value": "extra_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inter_channels[fpn_idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inter_channels[fpn_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_253": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_246": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/fpn.py": {
        "torch": {
            "ModuleList_120": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_182": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_186": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "prev_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laterals[i - 1].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_pool2d_200": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_214": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/fpn_carafe.py": {
        "torch": {
            "ReLU_65": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/hrfpn.py": {
        "torch": {
            "ModuleList_59": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inputs[0]]",
                            "List"
                        ],
                        [
                            "[out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "input": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/nas_fpn.py": {
        "torch": {
            "ModuleList_64": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.extra_downsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_86": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "*args": {
                    "value": "extra_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_81": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/nasfcos_fpn.py": {
        "torch": {
            "ModuleList_66": {
                "variable": {
                    "value": "self.adapt_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_99": {
                "variable": {
                    "value": "self.fpn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.extra_downsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_136": {
                "variable": {
                    "value": "feats2_resize",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats[5]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "feats1.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "input": {
                    "value": "feats_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats1 + feats2_resize",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "inputs[input_idx].size()[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/pafpn.py": {
        "torch": {
            "ModuleList_70": {
                "variable": {
                    "value": "self.downsample_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.pafpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_110": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "prev_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laterals[i - 1].shape[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_136": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_151": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/rfp.py": {
        "torch": {
            "ModuleList_32": {
                "variable": {
                    "value": "self.aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_45": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.rfp_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if dilation > 1 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation if dilation > 1 else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "add_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rfp_weight(x_idx[ft_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu__52": {
                "input": {
                    "value": "self.aspp[aspp_idx](inp)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/ssd_neck.py": {
        "torch": {
            "ModuleList_64": {
                "variable": {
                    "value": "self.extra_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "per_lvl_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(out_channels[len(in_channels) - 1 + i], out_channel // 2, 1, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/yolo_neck.py": {
        "torch": {
            "interpolate_132": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv3(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv4(tmp)",
                            "Call"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tmp, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((tmp, x), 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tmp, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/bbox_heads/bbox_head.py": {
        "torch": {
            "arange_536": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_543": {
                "variable": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_shape",
                            "Method Argument"
                        ],
                        [
                            "img_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_568": {
                "variable": {
                    "value": "batch_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_62": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.roi_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_full((num_samples,), self.num_classes, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "multi_apply(self._get_target_single, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.num_classes, dtype=torch.long).to(scores.device)",
                            "Call"
                        ],
                        [
                            "labels.view(1, 1, -1).expand_as(scores)",
                            "Call"
                        ],
                        [
                            "labels.reshape(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "add_dummy_nms_for_onnx(bboxes_for_nms, scores.unsqueeze(2), max_output_boxes_per_class, iou_threshold, score_threshold, pre_top_k=nms_pre, after_top_k=cfg.max_per_img, labels=labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ],
                        [
                            "multi_apply(self._get_target_single, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "label_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ],
                        [
                            "multi_apply(self._get_target_single, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "bbox_targets",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ],
                        [
                            "multi_apply(self._get_target_single, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "bbox_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_431": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_431": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_470": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, label + 1, label + 2, label + 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_471": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_reg(x) if self.with_reg else None",
                            "IfExp"
                        ],
                        [
                            "self.bbox_coder.decode(rois[:, 1:], bbox_pred)",
                            "Call"
                        ],
                        [
                            "torch.gather(bbox_pred, 1, inds)",
                            "Call"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ],
                        [
                            "bbox_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(rois[:, 0] == i, as_tuple=False).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack((label, label + 1, label + 2, label + 3), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_480": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, [0]], bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_shape] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flip_526": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_526": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_528": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bboxes < min_xy",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes.new_tensor(0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox_coder.decode(rois[..., 1:], bbox_pred, max_shape=img_shape)",
                            "Call"
                        ],
                        [
                            "rois[:, 1:].clone()",
                            "Call"
                        ],
                        [
                            "(bboxes.view(bboxes.size(0), -1, 4) / scale_factor).view(bboxes.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.regress_by_class(bboxes_, label_, bbox_pred_, img_meta_)",
                            "Call"
                        ],
                        [
                            "self.bbox_coder.decode(rois[:, 1:], bbox_pred, max_shape=img_meta['img_shape'])",
                            "Call"
                        ],
                        [
                            "self.bbox_coder.decode(rois[..., 1:], bbox_pred, max_shape=img_shape)",
                            "Call"
                        ],
                        [
                            "rois[..., 1:].clone()",
                            "Call"
                        ],
                        [
                            "bboxes.reshape(batch_size, -1, 4)",
                            "Call"
                        ],
                        [
                            "batch_dets[..., 0:4]",
                            "Subscript"
                        ],
                        [
                            "bboxes - offsets",
                            "BinOp"
                        ],
                        [
                            "torch.where(bboxes < min_xy, min_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes > max_xy, max_xy, bboxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_529": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "bboxes > max_xy",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([max_shape] * 2, dim=-1).flip(-1).unsqueeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox_coder.decode(rois[..., 1:], bbox_pred, max_shape=img_shape)",
                            "Call"
                        ],
                        [
                            "rois[:, 1:].clone()",
                            "Call"
                        ],
                        [
                            "(bboxes.view(bboxes.size(0), -1, 4) / scale_factor).view(bboxes.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "self.regress_by_class(bboxes_, label_, bbox_pred_, img_meta_)",
                            "Call"
                        ],
                        [
                            "self.bbox_coder.decode(rois[:, 1:], bbox_pred, max_shape=img_meta['img_shape'])",
                            "Call"
                        ],
                        [
                            "self.bbox_coder.decode(rois[..., 1:], bbox_pred, max_shape=img_shape)",
                            "Call"
                        ],
                        [
                            "rois[..., 1:].clone()",
                            "Call"
                        ],
                        [
                            "bboxes.reshape(batch_size, -1, 4)",
                            "Call"
                        ],
                        [
                            "batch_dets[..., 0:4]",
                            "Subscript"
                        ],
                        [
                            "bboxes - offsets",
                            "BinOp"
                        ],
                        [
                            "torch.where(bboxes < min_xy, min_xy, bboxes)",
                            "Call"
                        ],
                        [
                            "torch.where(bboxes > max_xy, max_xy, bboxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_261": {
                "input": {
                    "value": "label_weights > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_346": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_515": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/bbox_heads/convfc_bbox_head.py": {
        "torch": {
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/bbox_heads/dii_head.py": {
        "torch": {
            "Dropout_81": {
                "variable": {
                    "value": "self.instance_interactive_conv_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.cls_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.reg_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_full((num_samples,), self.num_classes, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "multi_apply(self._get_target_single, pos_inds_list, neg_inds_list, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ],
                        [
                            "multi_apply(self._get_target_single, pos_inds_list, neg_inds_list, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "label_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_419": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ],
                        [
                            "multi_apply(self._get_target_single, pos_inds_list, neg_inds_list, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "bbox_targets",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ],
                        [
                            "multi_apply(self._get_target_single, pos_inds_list, neg_inds_list, pos_bboxes_list, neg_bboxes_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "bbox_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/bbox_heads/double_bbox_head.py": {
        "torch": {
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.reg_class_agnostic else 4 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels * self.roi_feat_area if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/bbox_heads/sabl_head.py": {
        "torch": {
            "ModuleList_136": {
                "variable": {
                    "value": "self.reg_pre_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_147": {
                "variable": {
                    "value": "self.reg_post_conv_xs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_157": {
                "variable": {
                    "value": "self.reg_post_conv_ys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "variable": {
                    "value": "self.reg_conv_att_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reg_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.reg_conv_att_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reg_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.fc_reg_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc_reg_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_offset_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_254": {
                "variable": {
                    "value": "reg_fx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_x",
                            "variable"
                        ],
                        [
                            "(reg_fx * reg_fx_att).sum(dim=2)",
                            "Call"
                        ],
                        [
                            "self.attention_pool(reg_x)",
                            "Call"
                        ],
                        [
                            "reg_fx.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.relu(self.upsample_x(reg_fx))",
                            "Call"
                        ],
                        [
                            "torch.transpose(reg_fx, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.reg_post_conv_xs[i](reg_fx)",
                            "Call"
                        ],
                        [
                            "reg_fx.squeeze(2)",
                            "Call"
                        ],
                        [
                            "outs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_255": {
                "variable": {
                    "value": "reg_fy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_x",
                            "variable"
                        ],
                        [
                            "(reg_fy * reg_fy_att).sum(dim=3)",
                            "Call"
                        ],
                        [
                            "self.attention_pool(reg_x)",
                            "Call"
                        ],
                        [
                            "reg_fy.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "self.relu(self.upsample_y(reg_fy))",
                            "Call"
                        ],
                        [
                            "torch.transpose(reg_fy, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.reg_post_conv_ys[i](reg_fy)",
                            "Call"
                        ],
                        [
                            "reg_fy.squeeze(3)",
                            "Call"
                        ],
                        [
                            "outs[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat_fl, feat_fr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "edge_offset_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[offset_pred_x, offset_pred_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "edge_cls_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_pred_x, cls_pred_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_125": {
                "variable": {
                    "value": "self.upsample_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reg_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reg_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.reg_feat_up_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.reg_feat_up_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_130": {
                "variable": {
                    "value": "self.upsample_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reg_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reg_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.reg_feat_up_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.reg_feat_up_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._bucket_target_single, pos_proposals_list, neg_proposals_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_gt_bboxes.new_full((num_samples,), self.num_classes, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._bucket_target_single, pos_proposals_list, neg_proposals_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros(num_samples)",
                            "Call"
                        ],
                        [
                            "label_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "bucket_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bucket_cls_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._bucket_target_single, pos_proposals_list, neg_proposals_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(bucket_cls_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros(num_samples, 4 * self.side_num)",
                            "Call"
                        ],
                        [
                            "bucket_cls_targets.view(-1, self.side_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "bucket_cls_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bucket_cls_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._bucket_target_single, pos_proposals_list, neg_proposals_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(bucket_cls_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros(num_samples, 4 * self.side_num)",
                            "Call"
                        ],
                        [
                            "bucket_cls_weights.view(-1, self.side_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "bucket_offset_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bucket_offset_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._bucket_target_single, pos_proposals_list, neg_proposals_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(bucket_offset_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros(num_samples, 4 * self.side_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "bucket_offset_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bucket_offset_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_apply(self._bucket_target_single, pos_proposals_list, neg_proposals_list, pos_gt_bboxes_list, pos_gt_labels_list, cfg=rcnn_train_cfg)",
                            "Call"
                        ],
                        [
                            "torch.cat(bucket_offset_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_proposals.new_zeros(num_samples, 4 * self.side_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_535": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_535": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_581": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, [0]], bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_482": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_cls(cls_x)",
                            "Call"
                        ],
                        [
                            "self.cls_forward(x)",
                            "Call"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels if i == 0 else fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_438": {
                "input": {
                    "value": "label_weights > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_498": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.7)",
                            "Method Argument"
                        ],
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/cascade_roi_head.py": {
        "torch": {
            "ModuleList_78": {
                "variable": {
                    "value": "self.mask_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.bbox_head[i].regress_by_class(rois[j], bbox_label[j], bbox_pred[j], img_metas[j]) for j in range(num_imgs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "where_273": {
                "variable": {
                    "value": "roi_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "roi_labels == self.bbox_head[i].num_classes",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score[:, :-1].argmax(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "roi_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_results['bbox_targets'][0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(roi_labels == self.bbox_head[i].num_classes, cls_score[:, :-1].argmax(1), roi_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_366": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/dynamic_roi_head.py": {
        "torch": {
            "topk_79": {
                "variable": {
                    "value": "(ious, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.max_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "k": {
                    "value": "iou_topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.train_cfg.dynamic_rcnn.iou_topk, len(assign_result.max_overlaps))",
                            "Call"
                        ]
                    ]
                }
            },
            "kthvalue_124": {
                "input": {
                    "value": "cur_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_targets[2][pos_inds, :2].abs().mean(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.kthvalue(cur_target, beta_topk)[0].item()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beta_topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.train_cfg.dynamic_rcnn.beta_topk * num_imgs, num_pos)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/grid_roi_head.py": {
        "torch": {
            "cat_42": {
                "variable": {
                    "value": "new_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_x1y1, new_x2y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_100": {
                "n": {
                    "value": "grid_feats.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/htc_roi_head.py": {
        "torch": {
            "cat_149": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_131": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_165": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_184": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_head.regress_by_class(rois[i], bbox_label[i], bbox_pred[i], img_metas[i]) for i in range(num_imgs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_402": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_551": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/fcn_mask_head.py": {
        "torch": {
            "split_382": {
                "variable": {
                    "value": "(x0, y0, x1, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_402": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_404": {
                "variable": {
                    "value": "img_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks.to(dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([gx, gy], dim=3)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_278": {
                "variable": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(N, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "num_chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N",
                            "variable"
                        ],
                        [
                            "int(np.ceil(N * int(img_h) * int(img_w) * BYTES_PER_FLOAT / GPU_MEM_LIMIT))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "im_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(mask_pred)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "img_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(ori_shape[0] * h_scale.item()).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "img_h",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool if threshold >= 0 else torch.uint8",
                    "type": "IfExp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "mask_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_372": {
                "variable": {
                    "value": "(x0_int, y0_int)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes.min(dim=0).values.floor()[:2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_375": {
                "variable": {
                    "value": "x1_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 2].max().ceil() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "img_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(ori_shape[1] * w_scale.item()).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "img_w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_377": {
                "variable": {
                    "value": "y1_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 3].max().ceil() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "img_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.round(ori_shape[0] * h_scale.item()).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "img_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_247": {
                "variable": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_333": {
                "variable": {
                    "value": "box_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "mask_pred.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_386": {
                "start": {
                    "value": "y0_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(boxes.min(dim=0).values.floor()[:2] - 1, min=0).to(dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "end": {
                    "value": "y1_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(boxes[:, 3].max().ceil() + 1, max=img_h).to(dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "img_h",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "mask_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_387": {
                "start": {
                    "value": "x0_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(boxes.min(dim=0).values.floor()[:2] - 1, min=0).to(dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "end": {
                    "value": "x1_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(boxes[:, 2].max().ceil() + 1, max=img_w).to(dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "img_w",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "mask_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isinf_393": {
                "input": {
                    "value": "img_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x0_int, x1_int, device=device).to(torch.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "(img_x - x0) / (x1 - x0) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_394": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isinf(img_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_396": {
                "input": {
                    "value": "img_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(y0_int, y1_int, device=device).to(torch.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "(img_y - y0) / (y1 - y0) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_397": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isinf(img_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_278": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(mask_pred)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "mask_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isinf_394": {
                "input": {
                    "value": "img_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x0_int, x1_int, device=device).to(torch.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "(img_x - x0) / (x1 - x0) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isinf_397": {
                "input": {
                    "value": "img_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(y0_int, y1_int, device=device).to(torch.float32) + 0.5",
                            "BinOp"
                        ],
                        [
                            "(img_y - y0) / (y1 - y0) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "det_labels",
                            "variable"
                        ],
                        [
                            "det_labels",
                            "variable"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/feature_relay_head.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Upsample_38": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/fused_semantic_head.py": {
        "torch": {
            "ModuleList_52": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat in enumerate(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(feat, size=fused_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fused_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(x.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/global_context_head.py": {
        "torch": {
            "AdaptiveAvgPool2d_73": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_76": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/grid_head.py": {
        "torch": {
            "Sequential_83": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_85": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "deconv_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(deconv_kernel_size - 2) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_92": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_93": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "deconv_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(deconv_kernel_size - 2) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "grid_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_119": {
                "variable": {
                    "value": "self.forder_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_120": {
                "variable": {
                    "value": "self.sorder_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_so",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(self.grid_points)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_178": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "pos_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_bboxes for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "pos_gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_bboxes for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_236": {
                "variable": {
                    "value": "pos_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, self.grid_points, map_size, map_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "sub_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sub_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sub_targets, dim=1)",
                            "Call"
                        ],
                        [
                            "sub_targets.to(sampling_results[0].pos_bboxes.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "bbox_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes_x1, bboxes_y1, bboxes_x2, bboxes_y2, cls_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "fo_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "so_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm1(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "nn.Conv2d(self.point_feat_channels, self.point_feat_channels, 5, stride=1, padding=2, groups=self.point_feat_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "*args": {
                    "value": "nn.Conv2d(self.point_feat_channels, self.point_feat_channels, 5, 1, 2, groups=self.point_feat_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.point_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/mask_point_head.py": {
        "torch": {
            "ModuleList_66": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_82": {
                "variable": {
                    "value": "self.fc_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + num_classes",
                            "BinOp"
                        ],
                        [
                            "fc_channels",
                            "variable"
                        ],
                        [
                            "fc_in_channels + (num_classes if self.coarse_pred_each_layer else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if self.class_agnostic else self.num_classes",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fine_grained_feats, coarse_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_239": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_points * oversample_ratio)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "point_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(self._get_target_single, rois_list, rel_roi_points_list, pos_assigned_gt_inds_list, gt_masks, cfg_list)",
                            "Call"
                        ],
                        [
                            "list(point_targets)",
                            "Call"
                        ],
                        [
                            "torch.cat(point_targets)",
                            "Call"
                        ],
                        [
                            "point_sample(gt_masks_th, rel_img_points).squeeze(1)",
                            "Call"
                        ],
                        [
                            "rois.new_zeros((0, num_points))",
                            "Call"
                        ],
                        [
                            "point_targets",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_208": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "mask_pred.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_262": {
                "variable": {
                    "value": "rand_roi_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_random_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_points - num_uncertain_points",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(point_coords, rand_roi_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, coarse_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_210": {
                "input": {
                    "value": "gt_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.clone()",
                            "Call"
                        ],
                        [
                            "mask_pred[inds, labels].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_254": {
                "input": {
                    "value": "point_uncertainties[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "num_uncertain_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(importance_sample_ratio * num_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_256": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_heads/maskiou_head.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask_feat, mask_pred_pooled)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "area_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(area_ratios)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "area_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(area_ratios)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/mask_scoring_roi_head.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "concat_det_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "det_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "det_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/point_rend_roi_head.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "fine_grained_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_92": {
                "variable": {
                    "value": "refined_mask_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_mask_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_pred.clone()",
                            "Call"
                        ],
                        [
                            "F.interpolate(refined_mask_pred, scale_factor=self.test_cfg.scale_factor, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "refined_mask_pred.reshape(num_rois, channels, mask_height * mask_width)",
                            "Call"
                        ],
                        [
                            "refined_mask_pred.scatter_(2, point_indices, mask_point_pred)",
                            "Call"
                        ],
                        [
                            "refined_mask_pred.view(num_rois, channels, mask_height, mask_width)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.test_cfg.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "point_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/roi_extractors/base_roi_extractor.py": {
        "torch": {
            "ModuleList_57": {
                "variable": {
                    "value": "roi_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer_cls(spatial_scale=1 / s, **cfg) for s in featmap_strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 0], x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/roi_extractors/single_level_roi_extractor.py": {
        "torch": {
            "sqrt_50": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(rois[:, 3] - rois[:, 1]) * (rois[:, 4] - rois[:, 2])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_52": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale / self.finest_scale + 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_52": {
                "input": {
                    "value": "scale / self.finest_scale + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/scnet_roi_head.py": {
        "torch": {
            "unique_73": {
                "variable": {
                    "value": "img_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "fused_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sum(num_rois)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_108": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_135": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox_head.regress_by_class(rois[i], bbox_label[i], bbox_pred[i], img_metas[i]) for i in range(num_imgs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_399": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/shared_heads/res_layer.py": {
        "torch": {}
    },
    "mmdet/models/roi_heads/sparse_roi_head.py": {
        "torch": {
            "cat_131": {
                "tensors": {
                    "value": "proposal_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox_head[stage].refine_bboxes(rois, rois.new_zeros(len(rois)), bbox_pred.view(-1, bbox_pred.size(-1)), [rois.new_zeros(object_feats.size(1)) for _ in range(num_imgs)], img_metas)",
                            "Call"
                        ],
                        [
                            "[proposal_boxes[i] for i in range(len(proposal_boxes))]",
                            "ListComp"
                        ],
                        [
                            "bbox_results['detach_proposal_list']",
                            "Subscript"
                        ],
                        [
                            "[proposal_boxes[i] for i in range(num_imgs)]",
                            "ListComp"
                        ],
                        [
                            "bbox_results['detach_proposal_list']",
                            "Subscript"
                        ],
                        [
                            "[proposal_boxes[i] for i in range(len(proposal_boxes))]",
                            "ListComp"
                        ],
                        [
                            "bbox_results['detach_proposal_list']",
                            "Subscript"
                        ],
                        [
                            "proposal_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "[bbox_pred_per_img, scores_per_img[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/standard_roi_head.py": {
        "torch": {
            "cat_172": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_309": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "det_bboxes.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "det_bboxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "mask_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_index, det_bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_349": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "rois.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "rois.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_index, rois[..., :4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_156": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/roi_heads/test_mixins.py": {
        "torch": {
            "from_numpy_224": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_metas[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_metas[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "det_bboxes.new_tensor(scale_factor)",
                            "Call"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "det_bboxes.new_ones(4)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/roi_heads/trident_roi_head.py": {
        "torch": {
            "cat_68": {
                "tensors": {
                    "value": "det_bboxes_list[i * num_branch:(i + 1) * num_branch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "det_labels_list[i * num_branch:(i + 1) * num_branch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "trident_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "trident_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/utils/builder.py": {
        "torch": {}
    },
    "mmdet/models/utils/gaussian_target.py": {
        "torch": {
            "arange_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-radius",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-radius",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "radius + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_201": {
                "variable": {
                    "value": "hmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heat",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_225": {
                "variable": {
                    "value": "(topk_scores, topk_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(batch, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_59": {
                "input": {
                    "value": "masked_heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmap[y - top:y + bottom, x - left:x + right]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "out_heatmap[y - top:y + bottom, x - left:x + right]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "heatmap",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/utils/inverted_residual.py": {
        "torch": {}
    },
    "mmdet/models/utils/normed_predictor.py": {
        "torch": {
            "linear_38": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / (x.norm(dim=1, keepdim=True).pow(self.power) + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x_ * self.tempearture",
                            "BinOp"
                        ],
                        [
                            "x / (x.norm(dim=1, keepdim=True).pow(self.power) + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x_ * self.tempearture",
                            "BinOp"
                        ],
                        [
                            "self.conv2d_forward(x_, weight_)",
                            "Call"
                        ],
                        [
                            "self._conv_forward(x_, weight_, self.bias)",
                            "Call"
                        ],
                        [
                            "self._conv_forward(x_, weight_)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight / (self.weight.norm(dim=1, keepdim=True).pow(self.power) + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.weight / (self.weight.norm(dim=1, keepdim=True).pow(self.power) + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.weight / (self.weight.view(self.weight.size(0), -1).norm(dim=1, keepdim=True).pow(self.power)[..., None, None] + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/utils/positional_encoding.py": {
        "torch": {
            "arange_78": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, 0::2].sin(), pos_x[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, 0::2].sin(), pos_y[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_91": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_126": {
                "variable": {
                    "value": "self.row_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "row_num_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "num_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_feats",
                            "Method Argument"
                        ],
                        [
                            "num_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_127": {
                "variable": {
                    "value": "self.col_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "col_num_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "num_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_feats",
                            "Method Argument"
                        ],
                        [
                            "num_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_146": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_embed.unsqueeze(0).repeat(h, 1, 1), y_embed.unsqueeze(1).repeat(1, w, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_149": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/utils/res_layer.py": {
        "torch": {
            "ReLU_154": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_45": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/utils/se_layer.py": {
        "torch": {
            "AdaptiveAvgPool2d_37": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/utils/transformer.py": {
        "torch": {
            "log_43": {
                "input": {
                    "value": "x1 / x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_249": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_embed.unsqueeze(1).repeat(1, bs, 1)",
                            "Call"
                        ],
                        [
                            "query_embed",
                            "Method Argument"
                        ],
                        [
                            "query_embed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_378": {
                "variable": {
                    "value": "self.level_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_feature_levels, self.embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "output_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "proposals.sigmoid() * scale",
                            "BinOp"
                        ],
                        [
                            "proposals",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_455": {
                "variable": {
                    "value": "output_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_proposals / (1 - output_proposals)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "reference_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_507": {
                "variable": {
                    "value": "valid_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, :, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_508": {
                "variable": {
                    "value": "valid_W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, 0, :]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_511": {
                "variable": {
                    "value": "valid_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[valid_ratio_w, valid_ratio_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_520": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "proposals.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_528": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos[:, :, :, 0::2].sin(), pos[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_528": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_606": {
                "variable": {
                    "value": "feat_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feat_flatten, 1)",
                            "Call"
                        ],
                        [
                            "feat_flatten.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_607": {
                "variable": {
                    "value": "mask_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_608": {
                "variable": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lvl_pos_embed_flatten, 1)",
                            "Call"
                        ],
                        [
                            "lvl_pos_embed_flatten.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_609": {
                "variable": {
                    "value": "spatial_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "spatial_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(spatial_shapes, dtype=torch.long, device=feat_flatten.device)",
                            "Call"
                        ],
                        [
                            "spatial_shapes",
                            "Method Argument"
                        ],
                        [
                            "spatial_shapes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feat_flatten.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_611": {
                "variable": {
                    "value": "level_start_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spatial_shapes.new_zeros((1,)), spatial_shapes.prod(1).cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_613": {
                "variable": {
                    "value": "valid_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_valid_ratio(m) for m in mlvl_masks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_738": {
                "variable": {
                    "value": "self.dynamic_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_params_in + self.num_params_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_747": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_channels * input_feat_shape ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_780": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feature.view(num_proposals, self.in_channels, -1).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "input_feature.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "param_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters[:, :self.num_params_in].view(-1, self.in_channels, self.feat_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_785": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(input_feature, param_in)",
                            "Call"
                        ],
                        [
                            "self.norm_in(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ],
                        [
                            "torch.bmm(features, param_out)",
                            "Call"
                        ],
                        [
                            "self.norm_out(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ],
                        [
                            "features.flatten(1)",
                            "Call"
                        ],
                        [
                            "self.fc_layer(features)",
                            "Call"
                        ],
                        [
                            "self.fc_norm(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "param_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters[:, -self.num_params_out:].view(-1, self.feat_channels, self.out_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_174": {
                "tensors": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_382": {
                "variable": {
                    "value": "self.enc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_383": {
                "variable": {
                    "value": "self.enc_output_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_384": {
                "variable": {
                    "value": "self.pos_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_386": {
                "variable": {
                    "value": "self.pos_trans_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.embed_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_388": {
                "variable": {
                    "value": "self.reference_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_434": {
                "variable": {
                    "value": "valid_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask_flatten_[:, :, 0, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_435": {
                "variable": {
                    "value": "valid_W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask_flatten_[:, 0, :, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_437": {
                "variable": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(0, H - 1, H, dtype=torch.float32, device=memory.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(0, W - 1, W, dtype=torch.float32, device=memory.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_x.unsqueeze(-1), grid_y.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[valid_W.unsqueeze(-1), valid_H.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "proposal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid, wh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_489": {
                "variable": {
                    "value": "(ref_y, ref_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(0.5, H - 0.5, H, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(0.5, W - 0.5, W, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_498": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_x, ref_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_651": {
                "variable": {
                    "value": "topk_coords_unact",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_outputs_coord_unact",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_branches[self.decoder.num_layers](output_memory) + output_proposals",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "topk_proposals.unsqueeze(-1).repeat(1, 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_659": {
                "variable": {
                    "value": "(query_pos, query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_trans_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pos_trans_norm(self.pos_trans(self.get_proposal_pos_embed(topk_coords_unact)))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_661": {
                "variable": {
                    "value": "(query_pos, query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "query_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_embed.unsqueeze(1).repeat(1, bs, 1)",
                            "Call"
                        ],
                        [
                            "query_embed",
                            "Method Argument"
                        ],
                        [
                            "query_embed",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_345": {
                "tensors": {
                    "value": "intermediate_reference_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "linspace_438": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "memory.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_440": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "memory.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_490": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "H - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_492": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "W - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_649": {
                "input": {
                    "value": "enc_outputs_class[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.two_stage_num_proposals",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_447": {
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([grid_x.unsqueeze(-1), grid_y.unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "(grid.unsqueeze(0).expand(N, -1, -1, -1) + 0.5) / scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_313": {
                "tensors": {
                    "value": "[valid_ratios, valid_ratios]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/utils/contextmanagers.py": {
        "torch": {
            "current_stream_26": {
                "variable": {
                    "value": "stream_before_context_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_grad_enabled_42": {
                "variable": {
                    "value": "grad_enabled_before",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_104": {
                "variable": {
                    "value": "initial_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_37": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_stream_46": {
                "variable": {
                    "value": "current_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_grad_enabled_55": {
                "variable": {
                    "value": "grad_enabled_after",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_77": {
                "variable": {
                    "value": "current_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Event_33": {
                "enable_timing": {
                    "value": "DEBUG_COMPLETED_TIME",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(os.environ.get('DEBUG_COMPLETED_TIME', False))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_115": {
                "variable": {
                    "value": "current",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/utils/profiling.py": {
        "torch": {
            "Event_25": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_26": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_stream_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data/test_datasets/test_common.py": {
        "torch": {
            "DataLoader_225": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.ones((5, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_225": {
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data/test_pipelines/test_sampler.py": {
        "torch": {
            "Tensor_26": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_57": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_58": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_77": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_128": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_168": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_170": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_202": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_210": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_263": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_267": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_293": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_146": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_186": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_226": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_264": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "int(2 ** i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data/test_pipelines/test_transform/test_models_aug_test.py": {
        "torch": {
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data/test_pipelines/test_transform/test_transform.py": {
        "torch": {
            "ones_784": {
                "variable": {
                    "value": "results[gt_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_metrics/test_box_overlap.py": {
        "torch": {
            "cat_26": {
                "variable": {
                    "value": "bboxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes1, torch.rand((num_bbox, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "bboxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes2, torch.rand((num_bbox, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_33": {
                "variable": {
                    "value": "bboxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_34": {
                "variable": {
                    "value": "bboxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "x1y1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_bbox, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_16": {
                "variable": {
                    "value": "x2y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((num_bbox, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1y1, x2y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_37": {
                "input": {
                    "value": "gious == torch.empty((0,))",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_78": {
                "input": {
                    "value": "gious == torch.empty(1, 2, 0, bboxes2.size(-2))",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_30": {
                "input": {
                    "value": "gious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_38": {
                "input": {
                    "value": "gious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_49": {
                "input": {
                    "value": "gious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_54": {
                "input": {
                    "value": "gious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_61": {
                "input": {
                    "value": "gious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_68": {
                "input": {
                    "value": "gious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_73": {
                "input": {
                    "value": "gious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "empty_77": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_79": {
                "input": {
                    "value": "gious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_101": {
                "input": {
                    "value": "ious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_104": {
                "input": {
                    "value": "ious <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rand_16": {
                "*size": {
                    "value": "(num_bbox, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_26": {
                "*size": {
                    "value": "(num_bbox, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "(num_bbox, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_37": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_78": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "bboxes2.size(-2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_metrics/test_losses.py": {
        "torch": {
            "Tensor_25": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_68": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_74": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_76": {
                "variable": {
                    "value": "fake_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_100": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_107": {
                "variable": {
                    "value": "fake_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_137": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_138": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_147": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_148": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_149": {
                "variable": {
                    "value": "loss_cls.cum_samples[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor([20])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_158": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_159": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_174": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_175": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_187": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_188": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_193": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_197": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_203": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_210": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_216": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_26": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(40.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_31": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(200.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_70": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_77": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_target, fake_weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_93": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_101": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_108": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_target, fake_weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_129": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_130": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_140": {
                "input": {
                    "value": "loss['loss_cls_objectness']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(200.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_141": {
                "input": {
                    "value": "loss['loss_cls_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_151": {
                "input": {
                    "value": "loss['loss_cls_objectness']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(200.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_152": {
                "input": {
                    "value": "loss['loss_cls_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(180.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_161": {
                "input": {
                    "value": "loss['loss_cls_objectness']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(200.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_162": {
                "input": {
                    "value": "loss['loss_cls_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(200.0) + torch.tensor(100.0).log()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "allclose_179": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_180": {
                "input": {
                    "value": "acc['acc_objectness']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_181": {
                "input": {
                    "value": "acc['acc_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_182": {
                "input": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_cls.get_activation(fake_pred)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor([1.0, 0.0, 0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_233": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "data": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_149": {},
            "tensor_151": {
                "data": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "180.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_hourglass.py": {
        "torch": {
            "randn_30": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_mobilenet_v2.py": {
        "torch": {
            "randn_50": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_67": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_83": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_119": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_141": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_157": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_173": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_regnet.py": {
        "torch": {
            "randn_45": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_renext.py": {
        "torch": {
            "randn_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_71": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_res2net.py": {
        "torch": {
            "randn_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_resnest.py": {
        "torch": {
            "randn_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_resnet.py": {
        "torch": {
            "randn_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_192": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_238": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_270": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_280": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_291": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_301": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_447": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_469": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_482": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_497": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_514": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_566": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_613": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_631": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_644": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_652": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_660": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_trident_resnet.py": {
        "torch": {
            "randn_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_177": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/utils.py": {
        "torch": {}
    },
    "tests/test_models/test_dense_heads/test_anchor_head.py": {
        "torch": {
            "rand_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_44": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_atss_head.py": {
        "torch": {
            "rand_39": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_45": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_autoassign_head.py": {
        "torch": {
            "rand_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "ones_69": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_centernet_head.py": {
        "torch": {
            "rand_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                }
            },
            "empty_23": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_corner_head.py": {
        "torch": {
            "zeros_130": {
                "variable": {
                    "value": "gt_tl_embedding_heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, s // 4, s // 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "gt_br_embedding_heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1, s // 4, s // 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_25": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_156": {
                "condition": {
                    "value": "scores > 0.05",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_157": {
                "condition": {
                    "value": "scores > 0.05",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_detr_head.py": {
        "torch": {
            "rand_67": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_70": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_fcos_head.py": {
        "torch": {
            "rand_34": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_39": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_fsaf_head.py": {
        "torch": {
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_70": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_ga_anchor_head.py": {
        "torch": {
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_61": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_gfl_head.py": {
        "torch": {
            "rand_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_44": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_ld_head.py": {
        "torch": {
            "rand_58": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_66": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_110": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_paa_head.py": {
        "torch": {
            "rand_58": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_64": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "ones_100": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_101": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_102": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_pisa_head.py": {
        "torch": {
            "rand_41": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_47": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_115": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_121": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_207": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_216": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_sabl_retina_head.py": {
        "torch": {
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_45": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_vfnet_head.py": {
        "torch": {
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_yolact_head.py": {
        "torch": {
            "rand_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_74": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_76": {
                "*size": {
                    "value": "(0, 550, 550)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "(1, 550, 550)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_dense_heads/test_yolof_head.py": {
        "torch": {
            "rand_47": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_51": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_forward.py": {
        "torch": {
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_557": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_loss.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_12": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks.py": {
        "torch": {
            "rand_268": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_55": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_213": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_247": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[8, 16, 32, 64]",
                            "List"
                        ],
                        [
                            "[8, 16, 32, 64]",
                            "List"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "[16, 8, 4]",
                            "List"
                        ],
                        [
                            "[32, 8, 16]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "34",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "34",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_312": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_330": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_381": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_403": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_303": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_roi_heads/test_bbox_head.py": {
        "torch": {
            "rand_36": {
                "variable": {
                    "value": "dummy_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "8 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "dummy_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "8 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_74": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_sample, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_75": {
                "variable": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_sample, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_76": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_sample, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_ids[:, None].float(), roi_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_237": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.randint(0, 2, (n_roi,))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_229": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_230": {
                "variable": {
                    "value": "roi_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.randint(0, n_img, (n_roi,))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_ids)",
                            "Call"
                        ],
                        [
                            "torch.empty((0,), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_23": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "ndarray": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_248": {
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_roi_heads/test_mask_head.py": {
        "torch": {
            "rand_40": {
                "variable": {
                    "value": "dummy_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_roi_heads/test_roi_extractor.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 587.8285, 52.1405, 886.2484, 341.5644]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 587.8285, 52.1405, 886.2484, 341.5644]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 587.8285, 52.1405, 886.2484, 341.5644]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 587.8285, 52.1405, 886.2484, 341.5644]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "(1, 256, 200, 336)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(1, 256, 100, 168)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_34": {
                "*size": {
                    "value": "(1, 256, 50, 84)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "(1, 256, 25, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_52": {
                "*size": {
                    "value": "(1, 256, 200, 336)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_53": {
                "*size": {
                    "value": "(1, 256, 100, 168)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "(1, 256, 50, 84)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_55": {
                "*size": {
                    "value": "(1, 256, 25, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_73": {
                "*size": {
                    "value": "(1, 256, 200, 336)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_74": {
                "*size": {
                    "value": "(1, 256, 100, 168)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_75": {
                "*size": {
                    "value": "(1, 256, 50, 84)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_76": {
                "*size": {
                    "value": "(1, 256, 25, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_103": {
                "*size": {
                    "value": "(1, 256, 200, 336)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_104": {
                "*size": {
                    "value": "(1, 256, 100, 168)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_105": {
                "*size": {
                    "value": "(1, 256, 50, 84)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_106": {
                "*size": {
                    "value": "(1, 256, 25, 42)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_roi_heads/test_sabl_bbox_head.py": {
        "torch": {
            "rand_41": {
                "variable": {
                    "value": "dummy_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_68": {
                "variable": {
                    "value": "dummy_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ],
                        [
                            "sum((len(res.bboxes) for res in sampling_results))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_28": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_roi_heads/utils.py": {
        "torch": {
            "rand_9": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils/test_inverted_residual.py": {
        "torch": {
            "randn_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils/test_position_encoding.py": {
        "torch": {
            "rand_36": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ]
                    ]
                }
            },
            "rand_16": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ],
                        [
                            "6",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_models/test_utils/test_se_layer.py": {
        "torch": {
            "randn_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 32, 10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_onnx/test_head.py": {
        "torch": {
            "rand_58": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "retina_model.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_191": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "fcos_model.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_266": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "fsaf_model.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "retina_model.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_142": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64 // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "64 // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_204": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_222": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "fcos_model.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_226": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_230": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // feat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_275": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "fsaf_model.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "s // 2 ** (i + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_350": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "ssd_model.in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "featmap_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "featmap_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_onnx/test_neck.py": {
        "torch": {
            "rand_43": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "feat_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_onnx/utils.py": {
        "torch": {
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/async_benchmark.py": {
        "torch": {
            "Stream_60": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "str"
                        ]
                    ]
                }
            },
            "default_stream_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_async.py": {
        "torch": {
            "Stream_48": {
                "variable": {
                    "value": "stream",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_grad_enabled_71": {
                "variable": {
                    "value": "ori_grad_enabled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_82": {
                "mode": {
                    "value": "ori_grad_enabled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_config.py": {
        "torch": {}
    },
    "tests/test_runtime/test_eval_hook.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EvalDataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EvalDataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EvalDataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_156": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EvalDataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EvalDataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EvalDataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "EvalDataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_235": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ExampleDataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_worker": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_runtime/test_fp16.py": {
        "torch": {
            "ones_74": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_75": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_99": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_100": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_124": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_126": {
                "variable": {
                    "value": "input_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_154": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_155": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_156": {
                "variable": {
                    "value": "input_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_201": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_225": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_226": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_250": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_251": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_252": {
                "variable": {
                    "value": "input_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_280": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_281": {
                "variable": {
                    "value": "input_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_282": {
                "variable": {
                    "value": "input_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_189": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils/test_anchor.py": {
        "torch": {
            "tensor_292": {
                "variable": {
                    "value": "expected_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 5.0, 5.0, 15.0], [5.0, 5.0, 15.0, 15.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "variable": {
                    "value": "expected_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 15.0, 5.0, 25.0], [5.0, 15.0, 15.0, 25.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_295": {
                "input": {
                    "value": "anchors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 5.0, 5.0, 15.0], [5.0, 5.0, 15.0, 15.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 15.0, 5.0, 25.0], [5.0, 15.0, 15.0, 25.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_304": {
                "input": {
                    "value": "anchors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 5.0, 5.0, 15.0], [5.0, 5.0, 15.0, 15.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-5.0, -5.0, 5.0, 5.0], [5.0, -5.0, 15.0, 5.0], [-5.0, 15.0, 5.0, 25.0], [5.0, 15.0, 15.0, 25.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_409": {
                "input": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(anchors, anchors_tuples)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "anchor_tuples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(anchors, anchors_tuples)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_656": {},
            "Tensor_657": {},
            "Tensor_658": {},
            "Tensor_659": {}
        }
    },
    "tests/test_utils/test_assigner.py": {
        "torch": {
            "Tensor_56": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_78": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_91": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_117": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "gt_bboxes_ignore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_149": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_150": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_251": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_270": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_271": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_354": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_374": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_375": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_387": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_388": {
                "variable": {
                    "value": "cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 81)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_389": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_390": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_471": {
                "variable": {
                    "value": "gt_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_481": {
                "variable": {
                    "value": "pred_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_482": {
                "variable": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "all_36": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_63": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_82": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_169": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_185": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_219": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_242": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_309": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_312": {
                "input": {
                    "value": "shadowed_labels == torch.LongTensor([[2, 2]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_314": {
                "input": {
                    "value": "shadowed_labels == torch.LongTensor([[2, 5]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_317": {
                "input": {
                    "value": "shadowed_labels == torch.LongTensor([[0, 2]])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_346": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_379": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_394": {
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_395": {
                "input": {
                    "value": "assign_result.labels == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_402": {
                "input": {
                    "value": "assign_result.gt_inds > -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_412": {
                "input": {
                    "value": "assign_result.gt_inds > -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_423": {
                "input": {
                    "value": "assign_result.gt_inds > -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_453": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_475": {
                "input": {
                    "value": "assign_result.gt_inds == expected_gt_inds",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils/test_coder.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "expected_decode_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_29": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "expected_decode_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_64": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_68": {
                "variable": {
                    "value": "expected_decode_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_80": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_84": {
                "variable": {
                    "value": "expected_decode_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_40": {},
            "Tensor_91": {}
        }
    },
    "tests/test_utils/test_masks.py": {
        "torch": {}
    },
    "tests/test_utils/test_misc.py": {
        "torch": {
            "ones_41": {
                "variable": {
                    "value": "raw_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "expected_decode_bboxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_62": {}
        }
    },
    "tests/test_utils/test_visualization.py": {
        "torch": {
            "ones_117": {
                "variable": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "segms",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "segms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((2, 10, 10)) > 0.5",
                            "Compare"
                        ],
                        [
                            "np.array(segms, np.int32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(segms)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/analysis_tools/benchmark.py": {
        "torch": {
            "synchronize_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/analysis_tools/get_flops.py": {
        "torch": {
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/analysis_tools/test_robustness.py": {
        "torch": {
            "current_device_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/deployment/mmdet_handler.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.map_location + ':' + str(properties.get('gpu_id')) if torch.cuda.is_available() else self.map_location",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/deployment/onnx2tensorrt.py": {
        "torch": {
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/deployment/pytorch2onnx.py": {
        "torch": {}
    },
    "tools/model_converters/detectron2pytorch.py": {
        "torch": {
            "from_numpy_12": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_s']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "state_dict[torch_name + .running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_18": {
                "variable": {
                    "value": "state_dict[torch_name + .running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_w']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/model_converters/publish_model.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_24": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_file",
                            "Method Argument"
                        ]
                    ]
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_file",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/model_converters/regnet2mmdet.py": {
        "torch": {
            "load_57": {
                "variable": {
                    "value": "regnet_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_77": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/model_converters/selfsup2mmdet.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "moco_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_24": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/model_converters/upgrade_model_version.py": {
        "torch": {
            "load_121": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_48": {
                "variable": {
                    "value": "new_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(val[1:], val[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "new_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_val[:, 1:], new_val[:, :1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "new_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(val[1:], val[:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/upgrade_ssd_version.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_42": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_file",
                            "Method Argument"
                        ]
                    ]
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_file",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "current_device_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    }
}