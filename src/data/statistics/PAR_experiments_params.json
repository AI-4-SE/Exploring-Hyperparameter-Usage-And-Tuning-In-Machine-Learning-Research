{
    "Cifar10/cnn.py": {
        "tensorflow": {
            "placeholder_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_217": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_85": {
                "variable": {
                    "value": "regu_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_86": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.loss] + regu_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_88": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_91": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ],
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ],
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_82": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                }
            },
            "argmax_88": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_89": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "trainable_variables_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "'conv1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "'conv2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "'conv3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "Cifar10/cnn_DANN.py": {
        "tensorflow": {
            "placeholder_153": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "self.x2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.lamb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_91": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_93": {
                "variable": {
                    "value": "regu_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_94": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.loss] + regu_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_96": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_113": {
                "variable": {
                    "value": "first_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "optimizer_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_118": {
                "variable": {
                    "value": "second_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "relu_layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.batch_normalization_layer(layers_2[-1], in_channel_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "global_pool_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu_layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer_2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_90": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                }
            },
            "argmax_96": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_mean_106": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=tf.one_hot(tf.ones(128, dtype=tf.int32), 2, axis=-1), logits=self.y_adv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=tf.one_hot(tf.zeros(128, dtype=tf.int32), 2, axis=-1), logits=self.y_adv_loss_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "'conv1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "'conv2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "'conv3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_103": {
                "a": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(relu_layer, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.weight_variable([64, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "a": {
                    "value": "global_pool_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(relu_layer_2, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.weight_variable([64, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_106": {
                "labels": {
                    "value": "tf.one_hot(tf.ones(128, dtype=tf.int32), 2, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.y_adv_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_107": {
                "labels": {
                    "value": "tf.one_hot(tf.zeros(128, dtype=tf.int32), 2, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.y_adv_loss_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_106": {
                "indices": {
                    "value": "tf.ones(128, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_107": {
                "indices": {
                    "value": "tf.zeros(128, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_106": {
                "shape": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "shape": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Cifar10/cnn_HEX.py": {
        "tensorflow": {
            "placeholder_274": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_275": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_276": {
                "variable": {
                    "value": "x_re",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32 * 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_277": {
                "variable": {
                    "value": "x_d",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32 * 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "self.x_re",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 32 * 32))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "self.x_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 32 * 32))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=y_conv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(yconv_contact_pred, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_122": {
                "variable": {
                    "value": "regu_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_123": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.loss] + regu_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_125": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv_pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_128": {
                "variable": {
                    "value": "self.train_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_130": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "yconv_contact_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[global_pool, self.glgcm_h_fc1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.glgcm_h_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_88": {
                "variable": {
                    "value": "yconv_contact_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[global_pool, pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "pad2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(relu_layer, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "yconv_contact_H",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pad2, self.glgcm_h_fc1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=y_conv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "g_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, args.ngray * args.ngray]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "self.glgcm_h_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(g_flat, glgcm_W_fc1) + glgcm_b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_103": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(yconv_contact_loss, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "y_conv_loss - tf.matmul(tf.matmul(tf.matmul(self.y_conv_H, tf.matrix_inverse(tf.matmul(self.y_conv_H, self.y_conv_H, transpose_a=True) + tf.eye(self.y_conv_H.get_shape().as_list()[-1]))), self.y_conv_H, transpose_b=True), y_conv_loss)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_125": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_126": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "nglcm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "nglcm_fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "yconv_contact_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([global_pool, self.glgcm_h_fc1], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.weight_variable([input_dim, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "a": {
                    "value": "yconv_contact_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([global_pool, pad], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.weight_variable([input_dim, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_98": {
                "a": {
                    "value": "yconv_contact_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([pad2, self.glgcm_h_fc1], 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.weight_variable([input_dim, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "a": {
                    "value": "self.y_conv_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.y_conv_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "a": {
                    "value": "self.y_conv_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.y_conv_H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_120": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(yconv_contact_loss, W_fc2) + b_fc2",
                            "BinOp"
                        ],
                        [
                            "y_conv_loss - tf.matmul(tf.matmul(tf.matmul(self.y_conv_H, tf.matrix_inverse(tf.matmul(self.y_conv_H, self.y_conv_H, transpose_a=True) + tf.eye(self.y_conv_H.get_shape().as_list()[-1]))), self.y_conv_H, transpose_b=True), y_conv_loss)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_132": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-args.ngray",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "args.ngray",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "'conv1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "'conv2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "'conv3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "matmul_76": {
                "a": {
                    "value": "tf.minimum(tf.maximum(tf.subtract(self.x_d, self.lamda), 1e-05), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.minimum(tf.maximum(tf.subtract(self.x_re, theta), 1e-05), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_76": {
                "x": {
                    "value": "tf.maximum(tf.subtract(self.x_d, self.lamda), 1e-05)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_77": {
                "x": {
                    "value": "tf.maximum(tf.subtract(self.x_re, theta), 1e-05)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "a": {
                    "value": "g_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.g, [-1, args.ngray * args.ngray])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "glgcm_W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.weight_variable([args.ngray * args.ngray, 32])",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_76": {
                "x": {
                    "value": "tf.subtract(self.x_d, self.lamda)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_77": {
                "x": {
                    "value": "tf.subtract(self.x_re, theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_76": {
                "x": {
                    "value": "self.x_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_77": {
                "x": {
                    "value": "self.x_re",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.theta_variable([args.ngray, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_109": {
                "num_rows": {
                    "value": "self.y_conv_H.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Cifar10/cnn_Infodrop.py": {
        "tensorflow": {
            "placeholder_220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_221": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_20": {
                "x": {
                    "value": "mean + sigma * sigma0 * e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_88": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "regu_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_93": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_96": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_19": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "input_tensor": {
                    "value": "tf.reduce_sum(-0.3 * tf.log(self.alpha / (0.7 + 0.001)), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "sigmoid_layer_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bn_layer_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "global_pool_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_layer_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(bn_layer_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_87": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "-0.3 * tf.log(self.alpha / (0.7 + 0.001))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "infodrop",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "trainable_variables_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "'conv1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "'conv2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "'conv3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "log_91": {
                "x": {
                    "value": "self.alpha / (0.7 + 0.001)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_78": {
                "input": {
                    "value": "global_pool_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sigmoid_layer_id, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Cifar10/cnn_PAR.py": {
        "tensorflow": {
            "placeholder_287": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_288": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.lamb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_76": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_78": {
                "variable": {
                    "value": "regu_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_79": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[self.loss] + regu_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_81": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_97": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_98": {
                "variable": {
                    "value": "first_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_91": {
                "variable": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.y, [-1, 1, 1, 10])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, m, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "self.adv_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=my, logits=y_adv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "variable": {
                    "value": "self.adv_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(y_adv_loss, -1), tf.argmax(my, -1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_102": {
                "variable": {
                    "value": "optimizer_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.adv_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_103": {
                "variable": {
                    "value": "second_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.batch_normalization_layer(layers[-1], in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_67": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_75": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "variable"
                        ]
                    ]
                }
            },
            "argmax_81": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_92": {
                "labels": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(ty, [1, m, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_util.conv2d(conv0, W_a) + b_a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_93": {
                "x": {
                    "value": "tf.equal(tf.argmax(y_adv_loss, -1), tf.argmax(my, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "'conv1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "'conv2_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "'conv3_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "equal_93": {
                "x": {
                    "value": "tf.argmax(y_adv_loss, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(my, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "input": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(ty, [1, m, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Cifar10/util/nn_util.py": {
        "tensorflow": {
            "random_uniform_initializer_5": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_9": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_14": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_19": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(scale=0.0002)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_84": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_89": {
                "variable": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "BN_EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "conv_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=[3, 3, input_channel, output_channel])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input_layer, mean, variance, beta, gamma, BN_EPSILON)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(conv_layer, out_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(input_layer, in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_125": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input_layer, mean, variance, beta, gamma, BN_EPSILON)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(conv_layer, out_channel)",
                            "Call"
                        ],
                        [
                            "batch_normalization_layer(input_layer, in_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "conv_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn_layer)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=[3, 3, input_channel, output_channel])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_6": {
                "name": {
                    "value": "lamda",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_10": {
                "name": {
                    "value": "theta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_15": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=shape[0])",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_40": {
                "name": {
                    "value": "tensor_name + '/activations'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_41": {
                "name": {
                    "value": "tensor_name + '/sparsity'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_166": {
                "variable": {
                    "value": "pooled_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_168": {
                "variable": {
                    "value": "padded_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pooled_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(input_layer, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [input_channel // 2, input_channel // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zero_fraction_41": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "a": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "fc_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variables(name='fc_weights', shape=[input_dim, num_labels], is_fc_layer=True, initializer=tf.uniform_unit_scaling_initializer(factor=1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "conv1_in_block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_156": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "create_variables(name='conv', shape=[3, 3, input_channel, output_channel])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "conv2_in_block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "uniform_unit_scaling_initializer_70": {
                "factor": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_86": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_88": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Cifar10/util/test_util.py": {
        "tensorflow": {
            "placeholder_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "x_re",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32 * 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "x_d",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32 * 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ImageNet/alexNet.py": {
        "tensorflow": {
            "truncated_normal_initializer_25": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_30": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_285": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 227, 227, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_286": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_290": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_291": {
                "variable": {
                    "value": "first_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_365": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 227, 227, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_39": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_in, num_out]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_out]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "xw_plus_b_52": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[num_in, num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[filter_height, filter_width, input_channels / groups, num_filters])",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', shape=[num_filters])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases, name=scope.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_65": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, filter_height, filter_width, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_y, stride_x, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "local_response_normalization_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_height, filter_width, input_channels / groups, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_109": {
                "variable": {
                    "value": "input_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_110": {
                "variable": {
                    "value": "weight_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[num_in, num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[filter_height, filter_width, input_channels / groups, num_filters])",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "concat_115": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "output_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, weight_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 227, 227, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=self.y_conv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_174": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.y_conv_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_176": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.y_conv_loss, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_177": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "in_top_k_179": {
                "variable": {
                    "value": "topk_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "self.y_conv_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_180": {
                "variable": {
                    "value": "self.topk_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(topk_correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_295": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_296": {
                "variable": {
                    "value": "second_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_415": {
                "seed": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(train_batches_per_epoch)",
                            "Call"
                        ],
                        [
                            "range(val_batches_per_epoch)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_y, stride_x, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bias_add_118": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve(x, weights)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=output_groups)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', shape=[num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve(x, weights)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=output_groups)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool(conv5, 3, 3, 2, 2, padding='VALID', name='pool5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 6 * 6 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_204": {
                "variable": {
                    "value": "y_adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(conv1, W_a) + b_a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, self.NUM_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_208": {
                "variable": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.y, [-1, 1, 1, self.NUM_CLASSES])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, m, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_209": {
                "variable": {
                    "value": "self.adv_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=my, logits=y_adv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_210": {
                "variable": {
                    "value": "self.adv_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(y_adv_loss, -1), tf.argmax(my, -1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_173": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.y_conv_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_176": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_177": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_179": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, (None, num_class))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "topk_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.in_top_k(self.y_conv_loss, tf.argmax(y, 1), k=self.top_k)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_209": {
                "labels": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(ty, [1, m, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(conv1, W_a) + b_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_210": {
                "x": {
                    "value": "tf.equal(tf.argmax(y_adv_loss, -1), tf.argmax(my, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_210": {
                "x": {
                    "value": "tf.argmax(y_adv_loss, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(my, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "'cnn/' + op_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "op_name_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/'.join(op_name.split('/')[:-1])",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_250": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_255": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_210": {
                "input": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(ty, [1, m, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_232": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_237": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "JigenPAR/utils/tf_logger.py": {
        "tensorflow": {
            "FileWriter_15": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_19": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_42": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_52": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_69": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST_Pattern/cnn.py": {
        "tensorflow": {
            "truncated_normal_initializer_21": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_25": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 28 * 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_141": {
                "variable": {
                    "value": "first_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_148": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(h_pool2.get_shape()[1:]))",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(h_pool2.get_shape()[1:]))",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 28 * 28))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 28 * 28))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 28 * 28))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=y_conv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_79": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_81": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv_loss, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_145": {
                "variable": {
                    "value": "second_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_267": {
                "seed": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_68": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(h_fc1, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(h_fc1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, self.class_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.y, [-1, 1, 1, self.class_num])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, m, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "self.adv_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=my, logits=y_adv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "self.adv_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(y_adv_loss, -1), tf.argmax(my, -1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(self.x, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_78": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_81": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_108": {
                "labels": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(ty, [1, m, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(h_pool1, W_a) + b_a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_109": {
                "x": {
                    "value": "tf.equal(tf.argmax(y_adv_loss, -1), tf.argmax(my, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_fc1, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1024, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_109": {
                "x": {
                    "value": "tf.argmax(y_adv_loss, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(my, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "op_name_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/'.join(op_name.split('/')[:-1])",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, shape])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([shape, 1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_109": {
                "input": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(ty, [1, m, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "PACS/alexNet.py": {
        "tensorflow": {
            "random_uniform_initializer_25": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_30": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_35": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_40": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_318": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 227, 227, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_319": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_322": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_323": {
                "variable": {
                    "value": "first_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_331": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "name": {
                    "value": "lamda",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=16)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=16)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "name": {
                    "value": "theta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=16)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=16)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=16)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=16)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=16)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(dtype=tf.float32, minval=0, maxval=16)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(dtype=tf.float32, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_in, num_out]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_out]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "xw_plus_b_62": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[num_in, num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[filter_height, filter_width, input_channels / groups, num_filters])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', shape=[num_filters])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases, name=scope.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_75": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, filter_height, filter_width, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_y, stride_x, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "local_response_normalization_82": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_89": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_height, filter_width, input_channels / groups, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_119": {
                "variable": {
                    "value": "input_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_120": {
                "variable": {
                    "value": "weight_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[num_in, num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=[filter_height, filter_width, input_channels / groups, num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_125": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "output_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, weight_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (None, 227, 227, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 227, 227, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y, logits=y_conv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_186": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_conv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_188": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv_loss, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_327": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_328": {
                "variable": {
                    "value": "second_train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_441": {
                "seed": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(r.shape[0])",
                            "Call"
                        ],
                        [
                            "range(train_batches_per_epoch)",
                            "Call"
                        ],
                        [
                            "range(val_batches_per_epoch)",
                            "Call"
                        ],
                        [
                            "range(test_batches_per_epoch)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_y, stride_x, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bias_add_128": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve(x, weights)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=output_groups)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [num_out], trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', shape=[num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_128": {
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve(x, weights)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=output_groups)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool(conv5, 3, 3, 2, 2, padding='VALID', name='pool5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 6 * 6 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_173": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc(dropout6, 4096, 4096, name='fc7')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(fc7, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, self.class_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_214": {
                "variable": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.y, [-1, 1, 1, self.class_num])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, m, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_215": {
                "variable": {
                    "value": "self.adv_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=my, logits=y_adv_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_216": {
                "variable": {
                    "value": "self.adv_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(y_adv_loss, -1), tf.argmax(my, -1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "cnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_185": {
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_188": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_189": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "fc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "adv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_215": {
                "labels": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(ty, [1, m, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(conv1, W_a) + b_a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_216": {
                "x": {
                    "value": "tf.equal(tf.argmax(y_adv_loss, -1), tf.argmax(my, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout7",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([4096, self.class_num])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_216": {
                "x": {
                    "value": "tf.argmax(y_adv_loss, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(my, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "'cnn/' + op_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_216": {
                "input": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(ty, [1, m, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_240": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_244": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "PACS/datagenerator.py": {
        "tensorflow": {
            "constant_13": {
                "variable": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[123.68, 116.779, 103.939]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_62": {
                "variable": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_63": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_66": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_114": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_117": {
                "variable": {
                    "value": "img_string",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_png_118": {
                "variable": {
                    "value": "img_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_123": {
                "variable": {
                    "value": "img_centered",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_127": {
                "variable": {
                    "value": "img_centered2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [28, 28])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "rgb_to_grayscale_128": {
                "variable": {
                    "value": "gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img_centered2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(img_resized2, IMAGENET_MEAN)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img_resized2, IMAGENET_MEAN)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_138": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_141": {
                "variable": {
                    "value": "img_string",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_png_142": {
                "variable": {
                    "value": "img_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_144": {
                "variable": {
                    "value": "img_centered",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_147": {
                "variable": {
                    "value": "img_centered2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [28, 28])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "rgb_to_grayscale_148": {
                "variable": {
                    "value": "gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img_centered2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(img_resized2, IMAGENET_MEAN)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img_resized2, IMAGENET_MEAN)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utility/datagenerator.py": {
        "tensorflow": {
            "constant_13": {
                "variable": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[123.68, 116.779, 103.939]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_62": {
                "variable": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.img_paths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_63": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_66": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_114": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_117": {
                "variable": {
                    "value": "img_string",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_png_118": {
                "variable": {
                    "value": "img_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_123": {
                "variable": {
                    "value": "img_centered",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_127": {
                "variable": {
                    "value": "img_centered2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [128, 128])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [128, 128])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "rgb_to_grayscale_128": {
                "variable": {
                    "value": "gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img_centered2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(img_resized2, IMAGENET_MEAN)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img_resized2, IMAGENET_MEAN)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_138": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_141": {
                "variable": {
                    "value": "img_string",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_png_142": {
                "variable": {
                    "value": "img_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_144": {
                "variable": {
                    "value": "img_centered",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [227, 227])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_147": {
                "variable": {
                    "value": "img_centered2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_resized2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img_decoded, [128, 128])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(img_decoded, [128, 128])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "IMAGENET_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "rgb_to_grayscale_148": {
                "variable": {
                    "value": "gray",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img_centered2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(img_resized2, IMAGENET_MEAN)",
                            "Call"
                        ],
                        [
                            "tf.subtract(img_resized2, IMAGENET_MEAN)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "JigenPAR/data/PARLoader.py": {
        "torch": {
            "stack_90": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tiles",
                            "variable"
                        ],
                        [
                            "torch.stack(data, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "JigenPAR/data/concat_dataset.py": {
        "torch": {}
    },
    "JigenPAR/data/data_helper.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "ConcatDataset([val_dataset])",
                            "Call"
                        ],
                        [
                            "ConcatDataset([val_dataset])",
                            "Call"
                        ],
                        [
                            "PARDataset(name_train, labels_train, patches=False, img_transformer=img_transformer, tile_transformer=tile_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(val_datasets)",
                            "Call"
                        ],
                        [
                            "PARTestDataset(names, labels, patches=patches, img_transformer=img_tr)",
                            "Call"
                        ],
                        [
                            "Subset(val_dataset, args.limit_target)",
                            "Call"
                        ],
                        [
                            "PARDataset(names, labels, patches=patches, img_transformer=img_transformer, tile_transformer=tile_transformer)",
                            "Call"
                        ],
                        [
                            "Subset(val_dataset, args.limit_target)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "ConcatDataset([val_dataset])",
                            "Call"
                        ],
                        [
                            "ConcatDataset([val_dataset])",
                            "Call"
                        ],
                        [
                            "PARDataset(name_train, labels_train, patches=False, img_transformer=img_transformer, tile_transformer=tile_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "ConcatDataset([val_dataset])",
                            "Call"
                        ],
                        [
                            "ConcatDataset([val_dataset])",
                            "Call"
                        ],
                        [
                            "PARDataset(name_train, labels_train, patches=False, img_transformer=img_transformer, tile_transformer=tile_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset(datasets)",
                            "Call"
                        ],
                        [
                            "ConcatDataset([val_dataset])",
                            "Call"
                        ],
                        [
                            "ConcatDataset([val_dataset])",
                            "Call"
                        ],
                        [
                            "PARDataset(name_train, labels_train, patches=False, img_transformer=img_transformer, tile_transformer=tile_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_18": {
                "n": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "JigenPAR/models/alexnet.py": {
        "torch": {
            "Linear_65": {
                "variable": {
                    "value": "model.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout() if dropout else Id()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "JigenPAR/models/caffenet.py": {
        "torch": {
            "load_385": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.dirname(__file__), 'pretrained/alexnet_caffe.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_407": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.dirname(__file__), 'pretrained/alexnet_caffe.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_432": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.dirname(__file__), 'pretrained/alexnet_caffe.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_455": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.dirname(__file__), 'pretrained/alexnet_caffe.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_477": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.dirname(__file__), 'pretrained/alexnet_caffe.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_493": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.dirname(__file__), 'pretrained/alexnet_caffe.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_507": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "models/pretrained/alexnet_caffe.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.features_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 96, kernel_size=11, stride=4)), ('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm1', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv2', nn.Conv2d(96, 256, kernel_size=5, padding=2, groups=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm2', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv3', nn.Conv2d(256, 384, kernel_size=3, padding=1)), ('relu3', nn.ReLU(inplace=True)), ('conv4', nn.Conv2d(384, 384, kernel_size=3, padding=1, groups=2)), ('relu4', nn.ReLU(inplace=True)), ('conv5', nn.Conv2d(384, 256, kernel_size=3, padding=1, groups=2)), ('relu5', nn.ReLU(inplace=True)), ('pool5', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc6', nn.Linear(256 * 6 * 6, 4096)), ('relu6', nn.ReLU(inplace=True)), ('drop6', nn.Dropout() if dropout else Id()), ('fc7', nn.Linear(4096, 4096)), ('relu7', nn.ReLU(inplace=True)), ('drop7', nn.Dropout() if dropout else Id())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.class_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc8', nn.Linear(4096, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.PAR_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.features_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 96, kernel_size=11, stride=4))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm1', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv2', nn.Conv2d(96, 256, kernel_size=5, padding=2, groups=2)), ('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm2', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv3', nn.Conv2d(256, 384, kernel_size=3, padding=1)), ('relu3', nn.ReLU(inplace=True)), ('conv4', nn.Conv2d(384, 384, kernel_size=3, padding=1, groups=2)), ('relu4', nn.ReLU(inplace=True)), ('conv5', nn.Conv2d(384, 256, kernel_size=3, padding=1, groups=2)), ('relu5', nn.ReLU(inplace=True)), ('pool5', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc6', nn.Linear(256 * 6 * 6, 4096)), ('relu6', nn.ReLU(inplace=True)), ('drop6', nn.Dropout() if dropout else Id()), ('fc7', nn.Linear(4096, 4096)), ('relu7', nn.ReLU(inplace=True)), ('drop7', nn.Dropout() if dropout else Id())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.class_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc8', nn.Linear(4096, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.PAR_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.features_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 96, kernel_size=11, stride=4))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm1', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv2', nn.Conv2d(96, 256, kernel_size=5, padding=2, groups=2)), ('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm2', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv3', nn.Conv2d(256, 384, kernel_size=3, padding=1)), ('relu3', nn.ReLU(inplace=True)), ('conv4', nn.Conv2d(384, 384, kernel_size=3, padding=1, groups=2)), ('relu4', nn.ReLU(inplace=True)), ('conv5', nn.Conv2d(384, 256, kernel_size=3, padding=1, groups=2)), ('relu5', nn.ReLU(inplace=True)), ('pool5', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc6', nn.Linear(256 * 6 * 6, 4096)), ('relu6', nn.ReLU(inplace=True)), ('drop6', nn.Dropout() if dropout else Id()), ('fc7', nn.Linear(4096, 4096)), ('relu7', nn.ReLU(inplace=True)), ('drop7', nn.Dropout() if dropout else Id())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.class_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc8', nn.Linear(4096, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.PAR_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(96, 100, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.features_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 96, kernel_size=11, stride=4))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm1', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv2', nn.Conv2d(96, 256, kernel_size=5, padding=2, groups=2)), ('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm2', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv3', nn.Conv2d(256, 384, kernel_size=3, padding=1)), ('relu3', nn.ReLU(inplace=True)), ('conv4', nn.Conv2d(384, 384, kernel_size=3, padding=1, groups=2)), ('relu4', nn.ReLU(inplace=True)), ('conv5', nn.Conv2d(384, 256, kernel_size=3, padding=1, groups=2)), ('relu5', nn.ReLU(inplace=True)), ('pool5', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc6', nn.Linear(256 * 6 * 6, 4096)), ('relu6', nn.ReLU(inplace=True)), ('drop6', nn.Dropout() if dropout else Id()), ('fc7', nn.Linear(4096, 4096)), ('relu7', nn.ReLU(inplace=True)), ('drop7', nn.Dropout() if dropout else Id())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.class_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc8', nn.Linear(4096, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.PAR_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 96, kernel_size=11, stride=4)), ('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm1', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv2', nn.Conv2d(96, 256, kernel_size=5, padding=2, groups=2)), ('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm2', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv3', nn.Conv2d(256, 384, kernel_size=3, padding=1)), ('relu3', nn.ReLU(inplace=True)), ('conv4', nn.Conv2d(384, 384, kernel_size=3, padding=1, groups=2)), ('relu4', nn.ReLU(inplace=True)), ('conv5', nn.Conv2d(384, 256, kernel_size=3, padding=1, groups=2)), ('relu5', nn.ReLU(inplace=True)), ('pool5', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc6', nn.Linear(256 * 6 * 6, 4096)), ('relu6', nn.ReLU(inplace=True)), ('drop6', nn.Dropout() if dropout else Id()), ('fc7', nn.Linear(4096, 4096)), ('relu7', nn.ReLU(inplace=True)), ('drop7', nn.Dropout() if dropout else Id())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.class_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc8', nn.Linear(4096, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.par_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 96, kernel_size=11, stride=4)), ('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm1', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv2', nn.Conv2d(96, 256, kernel_size=5, padding=2, groups=2)), ('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm2', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv3', nn.Conv2d(256, 384, kernel_size=3, padding=1)), ('relu3', nn.ReLU(inplace=True)), ('conv4', nn.Conv2d(384, 384, kernel_size=3, padding=1, groups=2)), ('relu4', nn.ReLU(inplace=True)), ('conv5', nn.Conv2d(384, 256, kernel_size=3, padding=1, groups=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "self.par_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 128, kernel_size=3, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "variable": {
                    "value": "self.class_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, n_classes, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_345": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 96, kernel_size=11, stride=4)), ('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm1', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv2', nn.Conv2d(96, 256, kernel_size=5, padding=2, groups=2)), ('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True)), ('norm2', nn.LocalResponseNorm(5, 0.0001, 0.75)), ('conv3', nn.Conv2d(256, 384, kernel_size=3, padding=1)), ('relu3', nn.ReLU(inplace=True)), ('conv4', nn.Conv2d(384, 384, kernel_size=3, padding=1, groups=2)), ('relu4', nn.ReLU(inplace=True)), ('conv5', nn.Conv2d(384, 256, kernel_size=3, padding=1, groups=2)), ('relu5', nn.ReLU(inplace=True)), ('pool5', nn.MaxPool2d(kernel_size=3, stride=2, ceil_mode=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc6', nn.Linear(256 * 6 * 6, 4096)), ('relu6', nn.ReLU(inplace=True)), ('drop6', nn.Dropout() if dropout else Id())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_367": {
                "variable": {
                    "value": "self.par_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc7', nn.Linear(4096, 4096)), ('relu7', nn.ReLU(inplace=True)), ('drop7', nn.Dropout()), ('fc8', nn.Linear(4096, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_372": {
                "variable": {
                    "value": "self.class_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc7', nn.Linear(4096, 4096)), ('relu7', nn.ReLU(inplace=True)), ('drop7', nn.Dropout()), ('fc8', nn.Linear(4096, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_309": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_310": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_311": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_312": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_314": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_315": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_316": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_320": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_321": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_323": {
                "in_features": {
                    "value": "128 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_326": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_327": {
                "kernel_size": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_19": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_25": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_32": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_72": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_73": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_77": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_84": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_124": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_125": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_129": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_136": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_181": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_182": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_184": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_185": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_186": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_193": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_229": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_231": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_232": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_234": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_235": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_236": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_241": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_243": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_247": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_249": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_250": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_292": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_293": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_294": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_295": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_296": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_298": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_299": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_300": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_301": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_302": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_303": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_304": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_346": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_347": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_348": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_349": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_351": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_352": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LocalResponseNorm_353": {
                "size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_354": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_355": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_356": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_357": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_359": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_360": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_363": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_364": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_368": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_369": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_371": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_373": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_376": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "JigenPAR/models/model_utils.py": {
        "torch": {}
    },
    "JigenPAR/optimizer/optimizer_helper.py": {
        "torch": {
            "SGD_9": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.parameters()",
                            "Call"
                        ],
                        [
                            "network.get_params(lr)",
                            "Call"
                        ],
                        [
                            "network.get_params()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "nesterov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "StepLR_12": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, weight_decay=0.0005, momentum=0.9, nesterov=nesterov, lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(epochs * 0.8)",
                            "Call"
                        ],
                        [
                            "int(epochs * 0.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_20": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.parameters()",
                            "Call"
                        ],
                        [
                            "network.get_params(lr)",
                            "Call"
                        ],
                        [
                            "network.get_params()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "nesterov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "StepLR_21": {
                "variable": {
                    "value": "scheduler1",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, weight_decay=0.0005, momentum=0.9, nesterov=nesterov, lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(epochs * 0.8)",
                            "Call"
                        ],
                        [
                            "int(epochs * 0.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_23": {
                "variable": {
                    "value": "optimizer_par",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.get_par_params()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "nesterov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "par_lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "StepLR_24": {
                "variable": {
                    "value": "scheduler_par",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params_par, weight_decay=0.0005, momentum=0.9, nesterov=nesterov, lr=par_lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(epochs * 0.8)",
                            "Call"
                        ],
                        [
                            "int(epochs * 0.8)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "JigenPAR/train_jigsaw_PAR.py": {
        "torch": {
            "device_189": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "self.args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "self.args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_164": {
                "input": {
                    "value": "par_pred == par_class_l.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "cls_pred == class_l.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_126": {
                "input": {
                    "value": "par_pred == par_class_l.data",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    }
}