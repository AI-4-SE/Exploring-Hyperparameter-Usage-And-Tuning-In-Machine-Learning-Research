{
    "neural_qa/main.py": {
        "tensorflow": {
            "set_verbosity_50": {
                "level": {
                    "value": "tf.logging.DEBUG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "training_data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/example.tsv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training source",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "vocab_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./vocab",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Vocab of training + test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "glove",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Glove file with pre-trained embeddings (default: None)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "testing_data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/example.tsv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Questions to test on",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_59": {
                "name": {
                    "value": "validation_data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/validation_example.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Questions from the official validation split",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_62": {
                "name": {
                    "value": "dev_sample_percentage",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Percentage of the training data to use for validation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "word2vec",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Word2vec file with pre-trained embeddings (default: None)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "embedding_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Dimensionality of character embedding (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_68": {
                "name": {
                    "value": "embedding_dim_char",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Dimensionality of character embedding (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "filter_sizes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2,4,6,8",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Comma-separated filter sizes (default: '3,4,5')\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "filter_sizes_char",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1,2,3",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Comma-separated filter sizes (default: '3,4,5')\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_71": {
                "name": {
                    "value": "filter_sizes_layer_two",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3,5,7,9",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Filter size of the second convolution layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "num_filters",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "172",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of filters per filter size (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_73": {
                "name": {
                    "value": "num_filters_char",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of filters per filter size (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "num_filters_layer_two",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of filters in the second convolution layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_75": {
                "name": {
                    "value": "num_neurons_fc",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of Neurons in the fully connected layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_76": {
                "name": {
                    "value": "num_neurons_fc_2",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of Neurons in the 2nd fully connected layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_77": {
                "name": {
                    "value": "num_neurons_fc_3",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of Neurons in the 2nd fully connected layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_78": {
                "name": {
                    "value": "rnn_hidden_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "350",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "RNN Hidden Size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "rnn_num_layers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "RNN Hidden Size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_80": {
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability (default: 0.5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_81": {
                "name": {
                    "value": "l2_reg_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regularizaion lambda (default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_82": {
                "name": {
                    "value": "target_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Used for weight of main loss, target replication loss is 1 - that (between 0 and 1)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_83": {
                "name": {
                    "value": "margin",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Margin for Max Margin Loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_84": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "7 * 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning Rate for our dear ADAM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_85": {
                "name": {
                    "value": "loss_function",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "maxmargin",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Which loss function should be used 'crossentropy' or 'maxmargin'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "architecture",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "1-5: different CNN architectures, 6: legacy CNN, 7: RNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_87": {
                "name": {
                    "value": "ratio_neg_pos",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The ratio of negative samples per positive",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_88": {
                "name": {
                    "value": "ratio_training_data",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The ratio of negative samples per positive",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_92": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch Size (default: 64)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_93": {
                "name": {
                    "value": "num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs (default: 200)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_94": {
                "name": {
                    "value": "evaluate_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluate model on dev set after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_95": {
                "name": {
                    "value": "checkpoint_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Save model after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_105": {
                "name": {
                    "value": "model_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "all the models used to score, comma separated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_106": {
                "name": {
                    "value": "testing_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "evaluator_input.tsv",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "where to store predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_230": {
                "variable": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "FLAGS.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_233": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_299": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_301": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_313": {
                "variable": {
                    "value": "grad_summaries_merged",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_324": {
                "variable": {
                    "value": "loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "neural_net.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_326": {
                "variable": {
                    "value": "train_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loss_summary, grad_summaries_merged]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_328": {
                "variable": {
                    "value": "train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "train_summary_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'summaries', 'train')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_331": {
                "variable": {
                    "value": "dev_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loss_summary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_333": {
                "variable": {
                    "value": "dev_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "dev_summary_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'summaries', 'dev')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_340": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_612": {
                "variable": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "FLAGS.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_615": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_342": {
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_343": {
                "name": {
                    "value": "input_x_q",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.input_x_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_344": {
                "name": {
                    "value": "input_x_t",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.input_x_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_345": {
                "name": {
                    "value": "input_x_q_char",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.input_x_q_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_346": {
                "name": {
                    "value": "input_x_t_char",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.input_x_t_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_347": {
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_348": {
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_349": {
                "name": {
                    "value": "input_x_q_len",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.input_x_q_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_350": {
                "name": {
                    "value": "input_x_t_len",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.input_x_t_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_351": {
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "neural_net.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_step_585": {
                "variable": {
                    "value": "current_step",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ],
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_745": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "model_path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_309": {
                "variable": {
                    "value": "grad_hist_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}/grad/hist'.format(v.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_310": {
                "variable": {
                    "value": "sparsity_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}/grad/sparsity'.format(v.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zero_fraction_310": {
                "value": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_652": {
                "key": {
                    "value": "input_x_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_653": {
                "key": {
                    "value": "input_x_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_654": {
                "key": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_655": {
                "key": {
                    "value": "input_x_q_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_656": {
                "key": {
                    "value": "input_x_t_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_657": {
                "key": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_658": {
                "key": {
                    "value": "input_x_q_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_660": {
                "key": {
                    "value": "input_x_t_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_662": {
                "key": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_664": {
                "key": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "neural_qa/text_cnn_char.py": {
        "tensorflow": {
            "placeholder_22": {
                "variable": {
                    "value": "self.neg_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.pos_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, extra_features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.input_x_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.input_x_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.input_x_q_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length, max_token_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.input_x_t_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length, max_token_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_x_q_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.input_x_t_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_pool_char_q, [-1, sequence_length, num_filters_total_char, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, num_filters_total_char, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_pool_char_t, [-1, sequence_length, num_filters_total_char, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, num_filters_total_char, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "self.embedded_words_expanded_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.embedded_words_expanded_q, h_pool_char_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_139": {
                "variable": {
                    "value": "self.embedded_words_expanded_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.embedded_words_expanded_t, h_pool_char_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "h_pool_q",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_203": {
                "variable": {
                    "value": "h_pool_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "self.h_pool_flat_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs_q)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "self.h_pool_flat_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs_t)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_208": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "self.new_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.h_pool_flat_q, self.sims, self.h_pool_flat_t, self.features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([char_vocab_size, embedding_dim_char], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "variable": {
                    "value": "self.embedded_words_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_62": {
                "variable": {
                    "value": "self.embedded_words_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_x_q_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, sequence_length * max_token_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_65": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, max_token_length * embedding_dim_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_x_t_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, sequence_length * max_token_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_70": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, max_token_length * embedding_dim_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_72": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "variable": {
                    "value": "self.embedded_words_expanded_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_words_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "self.embedded_words_expanded_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_words_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_212": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_sim",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "variable": {
                    "value": "self.transform_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.h_pool_flat_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_sim', shape=[num_filters_total, num_filters_total], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden', shape=[connect_len, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden_2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_217": {
                "variable": {
                    "value": "self.sims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.mul(self.transform_left, self.h_pool_flat_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_225": {
                "variable": {
                    "value": "self.new_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.h_pool_flat_q, self.h_pool_flat_t, self.features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_hidden",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[connect_len, num_neurons_fc]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_233": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_neurons_fc])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_236": {
                "variable": {
                    "value": "self.hidden_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(self.new_input, W, b, name='hidden_output')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_240": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.hidden_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_output_drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_244": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_hidden_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc, num_neurons_fc_2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_248": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_neurons_fc_2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_251": {
                "variable": {
                    "value": "self.hidden_output_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(self.h_drop, W, b, name='hidden_output')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_255": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.hidden_output_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_output_drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_259": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc_2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_263": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_265": {
                "variable": {
                    "value": "W_last",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_last",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_269": {
                "variable": {
                    "value": "b_last",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_271": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_sim', shape=[num_filters_total, num_filters_total], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden', shape=[connect_len, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden_2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_42": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_57": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters_char])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, embedding_dim_char, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_94": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_96": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_token_length - filter_size + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters_char])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_113": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, embedding_dim_char, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_120": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_122": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_token_length - filter_size + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_156": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_words_expanded_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_165": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_167": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_181": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_182": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_183": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_words_expanded_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_190": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_192": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_211": {
                "name": {
                    "value": "similarity",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_218": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_sim', shape=[num_filters_total, num_filters_total], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden', shape=[connect_len, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden_2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_228": {
                "name": {
                    "value": "hidden",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_234": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_sim', shape=[num_filters_total, num_filters_total], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden', shape=[connect_len, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden_2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_235": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_239": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_243": {
                "name": {
                    "value": "hidden_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_249": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_sim', shape=[num_filters_total, num_filters_total], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden', shape=[connect_len, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden_2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_250": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_254": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_258": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_273": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.mul(self.h_pool_flat_q, self.h_pool_flat_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_280": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(scores, self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_46": {
                "variable": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "pos_ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_47": {
                "variable": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "neg_ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "variable": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(scores, pos_ind)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores_pos, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_50": {
                "variable": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(scores, neg_ind)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores_neg, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_53": {
                "variable": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "margin - scores_pos + scores_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_80": {
                "name": {
                    "value": "'conv-maxpool-char-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "'conv-maxpool-char-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_151": {
                "name": {
                    "value": "'conv-maxpool-q-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_176": {
                "name": {
                    "value": "'conv-maxpool-t-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_233": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_236": {
                "x": {
                    "value": "self.new_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_sim', shape=[num_filters_total, num_filters_total], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden', shape=[connect_len, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden_2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hidden_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_248": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_251": {
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_sim', shape=[num_filters_total, num_filters_total], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden', shape=[connect_len, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden_2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hidden_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_263": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_269": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_281": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "input_tensor": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, margin - scores_pos + scores_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_85": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_86": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_94": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_words_expanded_q, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_words_expanded_t, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_111": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_112": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_120": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_words_expanded_q, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_words_expanded_t, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_156": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_157": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_165": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_words_expanded_q, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_words_expanded_t, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_181": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_182": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_190": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_words_expanded_q, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_words_expanded_t, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_q')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_277": {
                "variable": {
                    "value": "two_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.sims, self.scores]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "two_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_278": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "two_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(1, [self.sims, self.scores], name='two_scores')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_last', shape=[2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b_last')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "neural_qa/text_cnn_legacy.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "self.neg_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.pos_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.increasing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "incr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.input_x_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.input_x_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.input_x_q_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.input_x_t_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, extra_features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.input_x_q_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length, max_token_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.input_x_t_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length, max_token_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_43": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_124": {
                "variable": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_pool_char_q, [-1, sequence_length, num_filters_total_char, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, num_filters_total_char, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_pool_char_t, [-1, sequence_length, num_filters_total_char, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, num_filters_total_char, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_130": {
                "variable": {
                    "value": "self.embedded_words_expanded_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.embedded_words_expanded_q, h_pool_char_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "self.embedded_words_expanded_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.embedded_words_expanded_t, h_pool_char_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.embedded_words_expanded_q, self.embedded_words_expanded_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_167": {
                "variable": {
                    "value": "self.new_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.h_pool_flat, self.features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_170": {
                "variable": {
                    "value": "W_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total + extra_features, num_neurons_fc]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "b_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_neurons_fc])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_densely",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_175": {
                "variable": {
                    "value": "self.h_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(self.new_input, W_fc, b_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_182": {
                "variable": {
                    "value": "W_fc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fc_2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc, num_neurons_fc_2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_186": {
                "variable": {
                    "value": "b_fc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_neurons_fc_2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_densely_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_187": {
                "variable": {
                    "value": "self.h_fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(self.h_drop, W_fc_2, b_fc_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_32": {
                "variable": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "pos_ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_33": {
                "variable": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "neg_ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "variable": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(scores, pos_ind)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores_pos, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "variable": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(scores, neg_ind)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores_neg, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_39": {
                "variable": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "margin - scores_pos + scores_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([char_vocab_size, embedding_dim_char], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_51": {
                "variable": {
                    "value": "self.embedded_words_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "variable": {
                    "value": "self.embedded_words_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_x_q_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, sequence_length * max_token_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_55": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, max_token_length * embedding_dim_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_x_t_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, sequence_length * max_token_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, max_token_length * embedding_dim_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "self.embedded_words_expanded_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_words_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "self.embedded_words_expanded_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_words_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_179": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_191": {
                "variable": {
                    "value": "self.h_drop_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_195": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc_2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_199": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_202": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, margin - scores_pos + scores_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_46": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters_char])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, embedding_dim_char, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_86": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_88": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_token_length - filter_size + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters_char])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_105": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, embedding_dim_char, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_112": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_114": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_token_length - filter_size + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_153": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_155": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_174": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_175": {
                "x": {
                    "value": "self.new_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_fc', shape=[num_filters_total + extra_features, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b_densely')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_178": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_186": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_187": {
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W_fc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_fc_2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_fc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b_densely_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_194": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_200": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc_2, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_201": {
                "t": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_204": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "'conv-maxpool-char-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "'conv-maxpool-char-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_139": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_199": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_205": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_77": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 2, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_86": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_103": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 2, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_104": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_112": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_144": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[filter_size, embedding_size, 2, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_145": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_153": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W_filter, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neural_qa/text_rnn.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "self.neg_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.pos_ind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.increasing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "incr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.input_x_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.input_x_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.input_x_q_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.input_x_t_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.input_x_q_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length, max_token_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_q_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.input_x_t_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, sequence_length, max_token_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_x_t_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, extra_features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_char_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_pool_char_q, [-1, sequence_length, num_filters_total_char, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, num_filters_total_char, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "pooled_outputs_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_char_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, pooled_outputs_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_pool_char_t, [-1, sequence_length, num_filters_total_char, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, num_filters_total_char, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_141": {
                "variable": {
                    "value": "inputs_q",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.embedded_words_expanded_q, h_pool_char_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "inputs_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[self.embedded_words_expanded_t, h_pool_char_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "inputs_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [self.embedded_words_expanded_q, h_pool_char_q])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs_q, [-1, sequence_length, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "inputs_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [self.embedded_words_expanded_t, h_pool_char_t])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs_t, [-1, sequence_length, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_182": {
                "variable": {
                    "value": "self.sims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.mul(last_q, last_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "self.new_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[last_q, self.sims, last_t, self.features]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_20": {
                "variable": {
                    "value": "relevant",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(output, [-1, out_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, batch_size) * max_length + (length - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([char_vocab_size, embedding_dim_char], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_62": {
                "variable": {
                    "value": "self.embedded_words_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x_q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_63": {
                "variable": {
                    "value": "self.embedded_words_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.input_x_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_x_q_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, sequence_length * max_token_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, max_token_length * embedding_dim_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_x_t_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, sequence_length * max_token_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_72": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, max_token_length * embedding_dim_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "variable": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "variable": {
                    "value": "self.embedded_words_expanded_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_words_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "variable": {
                    "value": "self.embedded_words_expanded_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_words_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_191": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_hidden",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[multiplier * rnn_hidden_size + 1 + extra_features, num_neurons_fc]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_neurons_fc])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_196": {
                "variable": {
                    "value": "self.hidden_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(self.new_input, W, b, name='hidden_output')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_200": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.hidden_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_output_drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_204": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W_hidden2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc, num_neurons_fc_2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_208": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_neurons_fc_2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_209": {
                "variable": {
                    "value": "self.hidden_output_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(self.h_drop, W, b, name='hidden_output')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_213": {
                "variable": {
                    "value": "self.h_drop_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.hidden_output_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_output_drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_217": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_221": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_222": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_hidden', shape=[multiplier * rnn_hidden_size + 1 + extra_features, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_41": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_57": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters_char])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_q_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_q, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_q, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, embedding_dim_char, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_97": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_99": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_token_length - filter_size + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_filter_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_115": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters_char])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded_chars_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.input_x_t_char, [-1, sequence_length * max_token_length])",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.W_char, embedded_chars_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedded_chars_t, [-1, sequence_length, max_token_length * embedding_dim_char])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedded_chars_t, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_filter_t')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, embedding_dim_char, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_123": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_125": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.nn.bias_add(conv, b), name='elu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, max_token_length - filter_size + 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_152": {
                "variable": {
                    "value": "lstm_cell_q",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_153": {
                "variable": {
                    "value": "lstm_cell_q",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(rnn_hidden_size, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell_q, output_keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(rnn_hidden_size, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell_q, output_keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_154": {
                "variable": {
                    "value": "cell_q",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstm_cell_q] * rnn_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_155": {
                "variable": {
                    "value": "(outputs_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_q] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_q] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [self.embedded_words_expanded_q, h_pool_char_q])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs_q, [-1, sequence_length, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.input_x_q_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_157": {
                "variable": {
                    "value": "lstm_cell_t",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_158": {
                "variable": {
                    "value": "lstm_cell_t",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(rnn_hidden_size, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell_t, output_keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(rnn_hidden_size, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell_t, output_keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_159": {
                "variable": {
                    "value": "cell_t",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstm_cell_t] * rnn_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_160": {
                "variable": {
                    "value": "(outputs_t, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_t] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_t] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [self.embedded_words_expanded_t, h_pool_char_t])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs_t, [-1, sequence_length, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.input_x_t_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_166": {
                "variable": {
                    "value": "lstm_cell_q",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_167": {
                "variable": {
                    "value": "lstm_cell_q",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(rnn_hidden_size, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell_q, output_keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(rnn_hidden_size, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell_q, output_keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_168": {
                "variable": {
                    "value": "cell_q",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstm_cell_q] * rnn_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_169": {
                "variable": {
                    "value": "(outputs_q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_q] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_q] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_q] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_q] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [self.embedded_words_expanded_q, h_pool_char_q])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs_q, [-1, sequence_length, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.input_x_q_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_171": {
                "variable": {
                    "value": "outputs_q",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[outputs_q_fw, outputs_q_bw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_174": {
                "variable": {
                    "value": "lstm_cell_t",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "rnn_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_175": {
                "variable": {
                    "value": "lstm_cell_t",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(rnn_hidden_size, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell_t, output_keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(rnn_hidden_size, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(lstm_cell_t, output_keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_176": {
                "variable": {
                    "value": "cell_t",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstm_cell_t] * rnn_num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_177": {
                "variable": {
                    "value": "(outputs_t, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_t] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_t] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_t] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([lstm_cell_t] * rnn_num_layers, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [self.embedded_words_expanded_t, h_pool_char_t])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs_t, [-1, sequence_length, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.input_x_t_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_179": {
                "variable": {
                    "value": "outputs_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[outputs_t_fw, outputs_t_bw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "hidden",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_199": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_203": {
                "name": {
                    "value": "hidden2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_212": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_216": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_224": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_15": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_16": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(scores, self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_45": {
                "variable": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "pos_ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_46": {
                "variable": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "neg_ind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(scores, pos_ind)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores_pos, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "variable": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(scores, neg_ind)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(scores_neg, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_52": {
                "variable": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "margin - scores_pos + scores_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_83": {
                "name": {
                    "value": "'conv-maxpool-char-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "'conv-maxpool-char-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "rnn_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "rnn_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "bidir_rnn_q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "bidir_rnn_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_195": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_196": {
                "x": {
                    "value": "self.new_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_hidden', shape=[multiplier * rnn_hidden_size + 1 + extra_features, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hidden_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_208": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_neurons_fc_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_209": {
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W_hidden', shape=[multiplier * rnn_hidden_size + 1 + extra_features, num_neurons_fc], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W_hidden2', shape=[num_neurons_fc, num_neurons_fc_2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_neurons_fc, 1], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "hidden_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_221": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_225": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, margin - scores_pos + scores_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_88": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_89": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_97": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_114": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ],
                        [
                            "[1, embedding_dim_char * filter_size, 1, num_filters_char]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_123": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(embedded_chars_q, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(embedded_chars_t, W_filter, strides=[1, 1, embedding_dim_char, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filters_char]), name='b_t')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_neurons_fc_2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[1]), name='b')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neural_qa/vocab_creator.py": {
        "tensorflow": {}
    }
}