{
    "S2SRL/data_test.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'../data/saves/' + str(args.name) + '/' + str(args.model)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "S2SRL/data_test_RL_webqsp.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_70": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'../data/webqsp_saves/' + str(args.name) + '/' + str(args.model)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "S2SRL/libbots/adabound.py": {
        "torch": {
            "full_like_112": {
                "variable": {
                    "value": "step_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ],
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_223": {
                "variable": {
                    "value": "step_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ],
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_189": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_191": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_227": {
                "variable": {
                    "value": "decayed_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "group['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_97": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_194": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_208": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "S2SRL/libbots/attention.py": {
        "torch": {
            "Linear_41": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_69": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpack_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context_trans.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(-1, input_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_82": {
                "variable": {
                    "value": "mix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(unpack_output, context_trans.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, input_size), dim=1).view(batch_size, -1, input_size)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context_trans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "context.view(1, -1, context.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_84": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mix, unpack_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_86": {
                "variable": {
                    "value": "output_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_out(combined.view(-1, 2 * hidden_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_58": {
                "variable": {
                    "value": "(unpack_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PackedSequence_88": {
                "data": {
                    "value": "output_result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.linear_out(combined.view(-1, 2 * hidden_size))).view(-1, hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "output.batch_sizes.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "S2SRL/libbots/data.py": {
        "torch": {
            "mean_549": {
                "variable": {
                    "value": "question_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_token_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net.emb(torch.tensor(question_token_indices, requires_grad=False).cuda())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_550": {
                "variable": {
                    "value": "question_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "question_embeddings.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_548": {
                "data": {
                    "value": "question_token_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[emb_dict['#UNK'] if token not in emb_dict else emb_dict[token] for token in question_token]",
                            "ListComp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "S2SRL/libbots/model.py": {
        "torch": {
            "Embedding_27": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dict_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_46": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_48": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hid_size, dict_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_146": {
                "variable": {
                    "value": "(unpack_context, input_sizes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_413": {
                "variable": {
                    "value": "input_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((len(batch), lens[0]), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_424": {
                "variable": {
                    "value": "input_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_mat).to(device)",
                            "Call"
                        ],
                        [
                            "input_v.cuda()",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([input_data]).to(device)",
                            "Call"
                        ],
                        [
                            "input_v.cuda()",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(map(len, input_idx))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PackedSequence_435": {
                "variable": {
                    "value": "emb_input_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddings(input_seq.data)",
                            "Call"
                        ],
                        [
                            "r.cuda()",
                            "Call"
                        ],
                        [
                            "embeddings(input_v)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "input_seq.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_256": {
                "variable": {
                    "value": "out_probs_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_319": {
                "variable": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_323": {
                "variable": {
                    "value": "(log_prob, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_443": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embeddings(input_seq.data)",
                            "Call"
                        ],
                        [
                            "r.cuda()",
                            "Call"
                        ],
                        [
                            "embeddings(input_v)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "[len(input_data)]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dict_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "res_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "res_logits[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_271": {
                "tensors": {
                    "value": "res_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "res_logits[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_457": {
                "input": {
                    "value": "model_out.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_209": {
                "input": {
                    "value": "out_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_369": {
                "tensors": {
                    "value": "res_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "res_logits[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_64": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "S2SRL/train_crossent.py": {
        "torch": {
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimiser",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_170": {
                "variable": {
                    "value": "results_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "net_results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cross_entropy_174": {
                "variable": {
                    "value": "loss_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "results_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(net_results)",
                            "Call"
                        ],
                        [
                            "results_v.cuda()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(net_targets).to(device)",
                            "Call"
                        ],
                        [
                            "targets_v.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(saves_path, 'pre_bleu_%.3f_%02d.dat' % (bleu_test, epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(saves_path, 'epoch_%03d_%.3f_%.3f.dat' % (epoch, bleu, bleu_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_191": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(saves_path, 'pre_bleu_%.3f_%02d.dat' % (bleu_test, epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(saves_path, 'epoch_%03d_%.3f_%.3f.dat' % (epoch, bleu, bleu_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_152": {
                "input": {
                    "value": "r.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "S2SRL/train_crossent_webqsp.py": {
        "torch": {
            "device_79": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "optimiser",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "results_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "net_results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cross_entropy_177": {
                "variable": {
                    "value": "loss_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "results_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(net_results)",
                            "Call"
                        ],
                        [
                            "results_v.cuda()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(net_targets).to(device)",
                            "Call"
                        ],
                        [
                            "targets_v.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_201": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(saves_path, 'pre_bleu_%.3f_%02d.dat' % (bleu_test, epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(saves_path, 'epoch_%03d_%.3f_%.3f.dat' % (epoch, bleu, bleu_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_194": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(saves_path, 'pre_bleu_%.3f_%02d.dat' % (bleu_test, epoch))",
                            "Call"
                        ],
                        [
                            "os.path.join(saves_path, 'epoch_%03d_%.3f_%.3f.dat' % (epoch, bleu, bleu_test))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_155": {
                "input": {
                    "value": "r.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "S2SRL/train_scst_cher.py": {
        "torch": {
            "device_112": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_188": {
                "variable": {
                    "value": "optimiser",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_173": {
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_490": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saves_path, 'epoch_%03d_%.3f_%.3f.dat' % (epoch, float(true_reward_armax), true_reward_test))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_428": {
                "variable": {
                    "value": "batch_net_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "net_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_434": {
                "variable": {
                    "value": "policies_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "net_policies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_440": {
                "variable": {
                    "value": "log_prob_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policies_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(net_policies).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_486": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saves_path, 'truereward_%.3f_%02d.dat' % (true_reward_test, epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "inner_policies_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inner_net_policies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_408": {
                "variable": {
                    "value": "inner_log_prob_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inner_policies_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(inner_net_policies).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "S2SRL/train_scst_cher_webqsp.py": {
        "torch": {
            "device_117": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "optimiser",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_178": {
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_495": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saves_path, 'epoch_%03d_%.3f_%.3f.dat' % (epoch, float(true_reward_armax), true_reward_test))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_433": {
                "variable": {
                    "value": "batch_net_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "net_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_439": {
                "variable": {
                    "value": "policies_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "net_policies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_445": {
                "variable": {
                    "value": "log_prob_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policies_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(net_policies).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_491": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saves_path, 'truereward_%.3f_%02d.dat' % (true_reward_test, epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "inner_policies_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inner_net_policies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_413": {
                "variable": {
                    "value": "inner_log_prob_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inner_policies_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(inner_net_policies).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}