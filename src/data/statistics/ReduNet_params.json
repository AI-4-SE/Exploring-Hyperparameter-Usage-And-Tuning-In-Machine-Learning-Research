{
    "evaluate.py": {
        "sklearn": {
            "LinearSVC_31": {
                "variable": {
                    "value": "svm",
                    "type": "variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_129": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fd - 1",
                            "BinOp"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGDClassifier_161": {
                "loss": {
                    "value": "log",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearSVC_162": {
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_163": {
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "stack_112": {
                "variable": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "argmin_112": {
                "variable": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "argmin_113": {
                "variable": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_103": {
                "variable": {
                    "value": "(_, _, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "features_sort[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_108": {
                "variable": {
                    "value": "train_scores_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subspace_j @ train_features.T",
                            "BinOp"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_109": {
                "variable": {
                    "value": "test_scores_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subspace_j @ test_features.T",
                            "BinOp"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "count_nonzero_152": {
                "variable": {
                    "value": "n_wrong",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_105": {
                "n": {
                    "value": "fd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features_sort[0].shape[1]",
                            "Subscript"
                        ],
                        [
                            "features_sort[0].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/mnist.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mnist2d_2class('./data/')",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(data_dir, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(data_dir, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "filter_class(trainset, [0, 1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(data_dir, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "filter_class(trainset, [0, 1])",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(data_dir, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(data_dir, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "filter_class(trainset, [0, 1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(data_dir, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "filter_class(trainset, [0, 1])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "trainset.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/utils_data.py": {
        "torch": {
            "tensor_9": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.targets",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_20": {
                "variable": {
                    "value": "dataset.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_21": {
                "variable": {
                    "value": "dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate_forward.py": {
        "torch": {
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_27": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/utils_example.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(data)",
                            "Call"
                        ],
                        [
                            "data / np.linalg.norm(data, axis=1, ord=2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "data[idx_arr]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(data).float()",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "targets + y",
                            "BinOp"
                        ],
                        [
                            "np.array(targets)",
                            "Call"
                        ],
                        [
                            "targets[idx_arr]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(targets).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(loc=center, scale=noise, size=(samples, 2))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(X)",
                            "Call"
                        ],
                        [
                            "X / np.linalg.norm(X, axis=1, ord=2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "X[idx_arr]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(X).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.hstack(Y)",
                            "Call"
                        ],
                        [
                            "Y[idx_arr]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(Y).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "functional.py": {
        "torch": {
            "unique_83": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(iter(dataloader))",
                            "Call"
                        ],
                        [
                            "y[idx_arr]",
                            "Subscript"
                        ],
                        [
                            "get_n_each(X, y, num_samples, batch_idx)",
                            "Call"
                        ],
                        [
                            "y.long()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_135": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "mid_pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(H // 2)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_136": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "360",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "timesteps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "timesteps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "trainset.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(trainset.targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "dataset.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_68": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X.flatten(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ord": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "images_polar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roll_89": {
                "variable": {
                    "value": "X_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[idx_class]",
                            "Subscript"
                        ],
                        [
                            "torch.roll(X_class, -batch_idx * n, dims=0)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "-batch_idx * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_90": {
                "variable": {
                    "value": "y_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[idx_class]",
                            "Subscript"
                        ],
                        [
                            "torch.roll(y_class, -batch_idx * n, dims=0)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "-batch_idx * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "data_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "data_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roll_111": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "shifts": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shifts",
                            "variable"
                        ]
                    ]
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_63": {
                "input": {
                    "value": "dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_127": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_classes * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "load.py": {
        "torch": {}
    },
    "loss.py": {
        "torch": {
            "eye_46": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_61": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_77": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slogdet_95": {
                "variable": {
                    "value": "(sgn, logdet)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_14": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "plot.py": {
        "torch": {}
    },
    "redunet/layers/fourier1d.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.gam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_classes) / num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "variable": {
                    "value": "self.Cs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultichannelWeight(self.channels, self.timesteps, dtype=torch.complex64) for _ in range(num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_25": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Bz.reshape(Bz.shape[0], Bz.shape[1], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_26": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(Bz.reshape(Bz.shape[0], Bz.shape[1], -1), axis=2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(norm, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.lmbda * norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_28": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tF.softmax(-self.lmbda * norm, dim=0).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gam * Bz * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_37": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "V.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_like_39": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I + alpha * contract('ji...,jk...->ik...', V, V.conj())",
                            "BinOp"
                        ],
                        [
                            "I + alpha_j * contract('ji...,jk...->ik...', V_j, V_j.conj())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_46": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "V.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_47": {
                "variable": {
                    "value": "Cs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_classes, C, C, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ifft_62": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "norm": {
                    "value": "ortho",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_59": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(X)",
                            "Call"
                        ],
                        [
                            "ifft(X, norm='ortho', dim=2)",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "ortho",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "inverse_41": {
                "input": {
                    "value": "pre_inv[:, :, t]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_54": {
                "input": {
                    "value": "pre_inv[:, :, t]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "redunet/layers/fourier2d.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.gam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_classes) / num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.Cs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultichannelWeight(*dimensions, dtype=torch.complex64) for _ in range(num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_27": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Cz.flatten(start_dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.lmbda * norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_29": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tF.softmax(-self.lmbda * norm, dim=0).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gam * Cz * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_38": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "V.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_like_40": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I + alpha * contract('ji...,jk...->ik...', V, V.conj())",
                            "BinOp"
                        ],
                        [
                            "I + alpha_j * contract('ji...,jk...->ik...', V_j, V_j.conj())",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_47": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "V.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_48": {
                "variable": {
                    "value": "Cs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_classes, C, C, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ifft2_63": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "norm": {
                    "value": "ortho",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "fft2_60": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(X)",
                            "Call"
                        ],
                        [
                            "ifft2(X, norm='ortho', dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "ortho",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "inverse_42": {
                "input": {
                    "value": "pre_inv[:, :, h, w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_55": {
                "input": {
                    "value": "pre_inv[:, :, h, w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "redunet/layers/redulayer.py": {
        "torch": {
            "zeros_like_18": {
                "variable": {
                    "value": "state_dict[E.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.E.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_20": {
                "variable": {
                    "value": "state_dict[fCs.{j}.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Cs[j].weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "redunet/layers/vector.py": {
        "torch": {
            "stack_25": {
                "variable": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C(Z) for C in self.Cs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_34": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Cz.reshape(Cz.shape[0], Cz.shape[1], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_35": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.norm(Cz.reshape(Cz.shape[0], Cz.shape[1], -1), axis=2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(norm, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.lmbda * norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_37": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tF.softmax(-self.lmbda * norm, dim=0).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gam * Cz * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_51": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_59": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "Cs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_classes, d, d)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.gam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_classes) / num_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "variable": {
                    "value": "self.Cs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.d, self.d, bias=False) for _ in range(num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "inverse_53": {
                "input": {
                    "value": "I + c * Z @ Z.T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_44": {
                "input": {
                    "value": "y == j",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "inverse_66": {
                "input": {
                    "value": "I + c_j * Z_j @ Z_j.T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "m_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nonzero(y == j).size()[0] for j in range(self.num_classes)]",
                            "ListComp"
                        ],
                        [
                            "Z_j.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "redunet/multichannel_weight.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(channels, channels, *dimension, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_13": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.complex64",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "redunet/projections/lift.py": {
        "torch": {
            "Parameter_35": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.sample(size).type(torch.float)",
                            "Call"
                        ],
                        [
                            "self.kernel.to(Z.device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "trainable",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_45": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(Z, (0, self.kernel_size - 1), 'circular')",
                            "Call"
                        ],
                        [
                            "F.pad(Z, (0, self.kernel_size - 1, 0, self.kernel_size - 1), 'circular')",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.kernel_size - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(Z, (0, self.kernel_size - 1), 'circular')",
                            "Call"
                        ],
                        [
                            "F.pad(Z, (0, self.kernel_size - 1, 0, self.kernel_size - 1), 'circular')",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_60": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(Z, (0, self.kernel_size - 1), 'circular')",
                            "Call"
                        ],
                        [
                            "F.pad(Z, (0, self.kernel_size - 1, 0, self.kernel_size - 1), 'circular')",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.kernel_size - 1, 0, self.kernel_size - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(Z, (0, self.kernel_size - 1), 'circular')",
                            "Call"
                        ],
                        [
                            "F.pad(Z, (0, self.kernel_size - 1, 0, self.kernel_size - 1), 'circular')",
                            "Call"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ],
                        [
                            "Z",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.sample(size).type(torch.float)",
                            "Call"
                        ],
                        [
                            "self.kernel.to(Z.device)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_23": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Normal_25": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_48": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv1d(Z, self.kernel, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "F.conv2d(Z, kernel, stride=self.stride)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_63": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv1d(Z, self.kernel, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "F.conv2d(Z, kernel, stride=self.stride)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_27": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Uniform_29": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Uniform_31": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "redunet/redunet.py": {
        "torch": {
            "cat_55": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_forward.py": {
        "torch": {
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_27": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_105": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'checkpoints', f'{name}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_96": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'checkpoints', '{}.pt'.format(name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "sorted_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sorted_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(sorted_data)",
                            "Call"
                        ],
                        [
                            "torch.stack(sorted_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "sorted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sorted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.hstack(sorted_labels)",
                            "Call"
                        ],
                        [
                            "torch.cat(sorted_labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}