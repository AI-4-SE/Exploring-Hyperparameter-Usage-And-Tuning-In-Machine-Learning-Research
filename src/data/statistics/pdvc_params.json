{
    "data/video_dataset.py": {
        "torch": {
            "zeros_44": {
                "variable": {
                    "value": "gt_boxes_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_caption_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max((len(x) for x in caption_list))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "video_tensor[idx, :video_len, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "gt_boxes_tensor[idx, :gt_proposal_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[(ts[1] + ts[0]) / (2 * raw_duration[idx]), (ts[1] - ts[0]) / raw_duration[idx]] for ts in gt_raw_timestamp[idx]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "caption_tensor[total_caption_idx + iidx, :_caption_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "captioning",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "[[(ts[1] + ts[0]) / (2 * raw_duration[i]), (ts[1] - ts[0]) / raw_duration[i]] for ts in gt_raw_timestamp[i]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "DataLoader_74": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PropSeqDataset(opt.eval_caption_file, opt.visual_feature_folder, opt.dict_file, False, opt.eval_proposal_type, opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size_for_eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nthreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "loaded_pth",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.eval_model_path",
                            "Attribute"
                        ],
                        [
                            "os.path.join(folder_path, 'model-best.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "opt.eval_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval_utils.py": {
        "torch": {
            "set_grad_enabled_167": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "misc/detr_utils/box_ops.py": {
        "torch": {
            "max_22": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_23": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_44": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_11": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[c - 0.5 * l, c + 0.5 * l]",
                            "List"
                        ],
                        [
                            "[(x0 + x1) / 2, x1 - x0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_16": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[c - 0.5 * l, c + 0.5 * l]",
                            "List"
                        ],
                        [
                            "[(x0 + x1) / 2, x1 - x0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "misc/detr_utils/misc.py": {
        "torch": {
            "tensor_167": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_535": {
                "input": {
                    "value": "p.grad.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "norm_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(norm_type)",
                            "Call"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_180": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_211": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_354": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(tensor_list)] + max_size",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ],
                        [
                            "parameters[0].grad.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_355": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ],
                        [
                            "parameters[0].grad.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_device_480": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_544": {
                "input": {
                    "value": "x1 / x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_446": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_count_460": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_535": {
                "tensors": {
                    "value": "[torch.norm(p.grad.detach(), norm_type).to(device) for p in parameters]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_178": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_455": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_494": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "misc/utils.py": {
        "torch": {
            "manual_seed_80": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_82": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/CaptioningHead/LSTM.py": {
        "torch": {
            "Embedding_33": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_52": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.opt.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_91": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_153": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_encoding_size + self.input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seqLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[xt, input_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_167": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_73": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_111": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_119": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_115": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_118": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_74": {
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_74": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_118": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pdvc/CaptioningHead/LSTM_DSA.py": {
        "torch": {
            "Embedding_30": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_49": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.opt.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_206": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_encoding_size + self.input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.att_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(input_feats, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((att_res.unsqueeze(0), query), 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "joint_query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state[0][-1].unsqueeze(0), query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_250": {
                "variable": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_255": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att + att_h",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, self.att_hid_size)",
                            "Call"
                        ],
                        [
                            "self.alpha_net(dot)",
                            "Call"
                        ],
                        [
                            "dot.view(-1, att_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_257": {
                "variable": {
                    "value": "att_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "att_feats_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip.reshape(-1, att_size, self.att_feat_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_257": {
                "variable": {
                    "value": "att_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "input_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(att_res.unsqueeze(0), query)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_82": {
                "variable": {
                    "value": "total_input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_spatial_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "others['spatial_shapes']",
                            "Subscript"
                        ],
                        [
                            "input_spatial_shapes[:n_levels]",
                            "Subscript"
                        ],
                        [
                            "others['spatial_shapes']",
                            "Subscript"
                        ],
                        [
                            "input_spatial_shapes[:n_levels]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "total_input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_143": {
                "variable": {
                    "value": "total_input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_spatial_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "others['spatial_shapes']",
                            "Subscript"
                        ],
                        [
                            "input_spatial_shapes[:n_levels]",
                            "Subscript"
                        ],
                        [
                            "others['spatial_shapes']",
                            "Subscript"
                        ],
                        [
                            "input_spatial_shapes[:n_levels]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "total_input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.alpha_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seqLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "[xt.unsqueeze(0), input_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_97": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_158": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_166": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_68": {
                "tensors": {
                    "value": "[others['valid_ratios']] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_134": {
                "tensors": {
                    "value": "[others['valid_ratios']] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_162": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_165": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_98": {
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature))",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_98": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_165": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get('temperature', 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pdvc/CaptioningHead/Puppet.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.puppet_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, L - 1, self.vocab_size + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "clip.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "clip.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_24": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.opt.vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/base_encoder.py": {
        "torch": {
            "ModuleList_43": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "input_proj_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(vf_dim, hidden_dim, kernel_size=1), nn.GroupNorm(32, hidden_dim))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "nn.Conv1d(in_channels, hidden_dim, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_77": {
                "input": {
                    "value": "m[None].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "src.shape[-1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vf_dim",
                            "Name"
                        ],
                        [
                            "hidden_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_35": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "*args": {
                    "value": "nn.Conv1d(in_channels, hidden_dim, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "nn.Conv2d(vf_dim, hidden_dim, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_39": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vf_dim",
                            "Name"
                        ],
                        [
                            "hidden_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_40": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "vf_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GroupNorm_48": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/criterion.py": {
        "torch": {
            "arange_205": {
                "variable": {
                    "value": "gassian_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_205": {
                "variable": {
                    "value": "gassian_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_209": {
                "variable": {
                    "value": "mask_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(x - gassian_mu) ** 2 / (2 * gassian_sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_213": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(inputs) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "weight": {
                    "value": "1 - weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_240": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(inputs) + 2",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_252": {
                "variable": {
                    "value": "max_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "self.counter_class_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "counter_class_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0, 0.0, 0.193425917, 0.412129084, 0.188929963, 0.0781296833, 0.0509541413, 0.0312718553, 0.018483365, 0.0083924468, 0.00659406534, 0.00449595364, 0.00219802178, 0.00179838146, 0.000599460486, 0.000499550405, 0.000499550405, 0.000199820162, 0.000299730243, 0.000399640324, 0.000299730243, 0.0, 0.000199820162, 0.0, 0.0, 0.0, 9.99100809e-05, 9.99100809e-05]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "target_classes_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['labels'][J] for (t, (_, J)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_55": {
                "variable": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_logits.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "target_classes_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[src_logits.shape[0], src_logits.shape[1], src_logits.shape[2] + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "src_logits.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "counter_target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "counter_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(target['boxes']) if len(target['boxes']) < max_length else max_length for target in targets]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(counter_target, device=src_logits.device, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "variable": {
                    "value": "counter_target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_count']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_tensor_87": {
                "variable": {
                    "value": "tgt_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(v['labels']) for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "l1_loss_90": {
                "variable": {
                    "value": "card_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "card_pred.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "tgt_lengths.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['boxes'][i] for (t, (_, i)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_105": {
                "variable": {
                    "value": "loss_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_boxes'][idx]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([t['boxes'][i] for (t, (_, i)) in zip(targets, indices)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "triu_114": {
                "variable": {
                    "value": "self_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_ops.box_iou(box_ops.box_cl_to_xy(src_boxes), box_ops.box_cl_to_xy(src_boxes))[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(src, i) for (i, (src, _)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "src_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src for (src, _) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(src, i) for (i, (src, _)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "src_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src for (src, _) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "src_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src for (_, src) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(tgt, i) for (i, (_, tgt)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "tgt_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt for (_, tgt) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_168": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[num_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(iter(outputs.values())).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_171": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_boxes / get_world_size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_251": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(inputs) + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_110": {
                "input": {
                    "value": "box_ops.generalized_box_iou(box_ops.box_cl_to_xy(src_boxes), box_ops.box_cl_to_xy(target_boxes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_128": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_like_134": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_like_141": {
                "input": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MSELoss_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/deformable_transformer.py": {
        "torch": {
            "Parameter_45": {
                "variable": {
                    "value": "self.level_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_feature_levels, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.pos_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_48": {
                "variable": {
                    "value": "self.pos_trans_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.reference_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "proposals.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos[:, :, :, 0::2].sin(), pos[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_77": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "src_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "src_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(src_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "mask_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lvl_pos_embed_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_108": {
                "variable": {
                    "value": "temporal_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "temporal_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(temporal_shapes, dtype=torch.long, device=src_flatten.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_flatten.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "level_start_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temporal_shapes.new_zeros((1,)), temporal_shapes.cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "valid_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_valid_ratio(m) for m in masks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_129": {
                "variable": {
                    "value": "(query_embed, tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "query_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_embed.unsqueeze(0).expand(bs, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_141": {
                "variable": {
                    "value": "(query_embed, tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_trans_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pos_trans_norm(self.pos_trans(self.get_proposal_pos_embed(topk_coords_unact)))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_159": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_166": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_167": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_205": {
                "variable": {
                    "value": "reference_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_227": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_228": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_231": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "n_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_232": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_233": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_236": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_238": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ffn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_240": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_241": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_329": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linspace_202": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "L_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "L_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "~mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_323": {
                "tensors": {
                    "value": "intermediate_reference_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_293": {
                "tensors": {
                    "value": "[src_valid_ratios, src_valid_ratios]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/matcher.py": {
        "torch": {
            "cat_79": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['labels'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "tgt_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['boxes'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cdist_91": {
                "variable": {
                    "value": "cost_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_boxes'].flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "tgt_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v['boxes'] for v in targets])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_121": {
                "tensors": {
                    "value": "[c[i]] * m2o_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_122": {
                "data": {
                    "value": "j % sizes[ii]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_125": {
                "data": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/ops/functions/ms_deform_attn_func.py": {
        "torch": {
            "grid_sample_61": {
                "variable": {
                    "value": "sampling_value_l_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_l_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_list[lid_].flatten(2).transpose(1, 2).reshape(N_ * M_, D_, H_, W_)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid_l_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampling_grids[:, :, :, lid_].transpose(1, 2).flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_68": {
                "tensors": {
                    "value": "sampling_value_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "sampling_value_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_70": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/ops/modules/ms_deform_attn.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.sampling_offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.attention_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.value_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_65": {
                "variable": {
                    "value": "grid_init",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[thetas.cos(), thetas.sin()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_weights(query).view(N, Len_q, self.n_heads, self.n_levels * self.n_points)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weights, -1).view(N, Len_q, self.n_heads, self.n_levels, self.n_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.sampling_offsets.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "grid_init.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_115": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sampling_locations, 0.5 * sampling_locations.new_ones(sampling_locations.shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "input_spatial_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_spatial_shapes.new_ones(input_spatial_shapes.shape), input_spatial_shapes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_64": {
                "start": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/ops/modules/ms_deform_attn_for_caption.py": {
        "torch": {
            "Linear_54": {
                "variable": {
                    "value": "self.sampling_offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.attention_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.value_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_63": {
                "variable": {
                    "value": "grid_init",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[thetas.cos(), thetas.sin()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_weights(query).view(N, Len_q, self.n_heads, self.n_levels * self.n_points)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weights, -1).view(N, Len_q, self.n_heads, self.n_levels, self.n_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.sampling_offsets.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "grid_init.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sampling_locations, 0.5 * sampling_locations.new_ones(sampling_locations.shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "input_spatial_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_spatial_shapes.new_ones(input_spatial_shapes.shape), input_spatial_shapes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/ops/setup.py": {
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/ops/test.py": {
        "torch": {
            "as_tensor_23": {
                "variable": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(6, 4), (3, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "level_start_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shapes.new_zeros((1,)), shapes.prod(1).cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_40": {
                "variable": {
                    "value": "fwdok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step).detach().cpu()",
                            "Call"
                        ],
                        [
                            "MSDeformAttnFunction.apply(value, shapes, level_start_index, sampling_locations, attention_weights, im2col_step).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_pytorch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ms_deform_attn_core_pytorch(value.double(), shapes, sampling_locations.double(), attention_weights.double()).detach().cpu()",
                            "Call"
                        ],
                        [
                            "ms_deform_attn_core_pytorch(value, shapes, sampling_locations, attention_weights).detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_56": {
                "variable": {
                    "value": "fwdok",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step).detach().cpu()",
                            "Call"
                        ],
                        [
                            "MSDeformAttnFunction.apply(value, shapes, level_start_index, sampling_locations, attention_weights, im2col_step).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_pytorch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ms_deform_attn_core_pytorch(value.double(), shapes, sampling_locations.double(), attention_weights.double()).detach().cpu()",
                            "Call"
                        ],
                        [
                            "ms_deform_attn_core_pytorch(value, shapes, sampling_locations, attention_weights).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_76": {
                "variable": {
                    "value": "gradok",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_49": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[30, 32, 64, 71, 1025, 2048, 3096]",
                            "List"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_67": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/pdvc.py": {
        "torch": {
            "device_565": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_32": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.query_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.class_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.count_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "opt.max_eseq_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_218": {
                "variable": {
                    "value": "outputs_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_219": {
                "variable": {
                    "value": "output_count",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_classes0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_220": {
                "variable": {
                    "value": "outputs_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_275": {
                "variable": {
                    "value": "outputs_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_276": {
                "variable": {
                    "value": "outputs_count",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_277": {
                "variable": {
                    "value": "outputs_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "mix_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "query_mask.sum().item()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "gt_mask.sum().item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_333": {
                "variable": {
                    "value": "hs_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "query_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "hs_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_453": {
                "variable": {
                    "value": "mix_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "query_mask.sum().item()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "gt_mask.sum().item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_455": {
                "variable": {
                    "value": "hs_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "query_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_455": {
                "variable": {
                    "value": "hs_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_512": {
                "variable": {
                    "value": "(topk_values, topk_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob.view(out_logits.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "N_q",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_520": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_ops.box_cl_to_xy(out_bbox)",
                            "Call"
                        ],
                        [
                            "torch.gather(boxes, 1, topk_boxes.unsqueeze(-1).repeat(1, 1, 2))",
                            "Call"
                        ],
                        [
                            "boxes * scale_fct[:, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "topk_boxes.unsqueeze(-1).repeat(1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_522": {
                "variable": {
                    "value": "scale_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_sizes, target_sizes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_556": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Linear(n, k) for (n, k) in zip([input_dim] + h, h + [output_dim]))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.caption_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.caption_head for _ in range(num_pred)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.class_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.class_head for _ in range(num_pred)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.count_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.count_head for _ in range(num_pred)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.bbox_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.bbox_head for _ in range(num_pred)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_146": {
                "variable": {
                    "value": "proposals_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "query_embed.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "query_embed.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "feat_bigids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sum([len(_[0]) for _ in indices])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_347": {
                "variable": {
                    "value": "cap_bigids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_bigids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(sum([len(_[0]) for _ in indices])).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_353": {
                "variable": {
                    "value": "new_hr_for_dsa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_pair_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(_[0]) for _ in indices])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_355": {
                "variable": {
                    "value": "new_seq_for_dsa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "max_pair_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(_[0]) for _ in indices])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cap_seq.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "variable": {
                    "value": "cost_caption",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N_q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "all_cap_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dt['cap_tensor'])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "hs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_371": {
                "variable": {
                    "value": "loss_caption",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N_q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "all_cap_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dt['cap_tensor'])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "hs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "variable": {
                    "value": "cap_probs[cap_prob_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "hs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_373": {
                "variable": {
                    "value": "cap_probs[cap_prob_eval]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N_q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "hs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_374": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N_q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "hs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_466": {
                "variable": {
                    "value": "cap_probs[cap_prob_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "hs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "variable": {
                    "value": "cap_probs[cap_prob_eval]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N_q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "hs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_468": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N_q",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "hs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_170": {
                "input": {
                    "value": "hs_lid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hs[l_id]",
                            "Subscript"
                        ],
                        [
                            "hs[l_id]",
                            "Subscript"
                        ],
                        [
                            "hs[l_id]",
                            "Subscript"
                        ],
                        [
                            "hs[l_id]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_556": {
                "in_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_560": {
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pdvc/position_encoding.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.duration_embed_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.max_duration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_duration",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_49": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, 0::2].sin(), pos_x[:, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_52": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x, dur_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_55": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(durations)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_duration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "durations.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PropSeqDataset(opt.train_caption_file, opt.visual_feature_folder, opt.dict_file, True, 'gt', opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nthreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PropSeqDataset(opt.val_caption_file, opt.visual_feature_folder, opt.dict_file, False, 'gt', opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size_for_eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.nthreads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MultiStepLR_129": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr, weight_decay=opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.AdamW(model.parameters(), lr=opt.lr, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[opt.learning_rate_decay_start + opt.learning_rate_decay_every * _ for _ in range(int((opt.epoch - opt.learning_rate_decay_start) / opt.learning_rate_decay_every))]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "opt.learning_rate_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "model_pth",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pretrain_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device(opt.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "model_pth",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_folder, 'model-best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamW_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "model_pth",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_folder, 'model-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__185": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_234": {
                "obj": {
                    "value": "saved_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, 'model_iter_{}.pth'.format(iteration))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_folder, 'model-last.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_103": {
                "type": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_165": {
                "device": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_278": {
                "obj": {
                    "value": "saved_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_folder, 'model-best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "video_backbone/TSP/common/scheduler.py": {
        "torch": {}
    },
    "video_backbone/TSP/common/transforms.py": {
        "torch": {
            "as_tensor_48": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(mean).reshape(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-1,) + (1,) * (vid.dim() - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "as_tensor_49": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(std).reshape(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-1,) + (1,) * (vid.dim() - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_32": {
                "input": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "float(size) / min(vid.shape[-2:])",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "interpolation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_39": {
                "input": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fill",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'constant'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "video_backbone/TSP/common/utils.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_254": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_149": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "video_backbone/TSP/extract_features/eval_video_dataset.py": {
        "torch": {
            "arange_164": {
                "start": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "video_backbone/TSP/extract_features/extract_features.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EvalVideoDataset(metadata_df=metadata_df, root_dir=args.data_path, clip_length=args.clip_len, frame_rate=args.frame_rate, stride=args.stride, output_dir=args.output_dir, transforms=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "args.local_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "video_backbone/TSP/models/backbone.py": {
        "torch": {
            "Conv3d_52": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_60": {
                "num_features": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_62": {
                "in_channels": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes * out_planes * 3 * 3 * 3 // (in_planes * 3 * 3 + 3 * out_planes)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "video_backbone/TSP/models/model.py": {
        "torch": {
            "Sequential_64": {
                "variable": {
                    "value": "feature_backbone.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "[features, gvf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "video_backbone/TSP/train/train.py": {
        "torch": {
            "device_130": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UntrimmedVideoDataset(csv_filename=args.train_csv_filename, root_dir=train_dir, clip_length=args.clip_len, frame_rate=args.frame_rate, clips_per_segment=args.clips_per_segment, temporal_jittering=True, transforms=transform_train, label_columns=args.label_columns, label_mappings=label_mappings, global_video_features=args.global_video_features, debug=args.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler_train is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset_train, shuffle=True) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "data_loader_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UntrimmedVideoDataset(csv_filename=args.valid_csv_filename, root_dir=valid_dir, clip_length=args.clip_len, frame_rate=args.frame_rate, clips_per_segment=args.clips_per_segment, temporal_jittering=False, transforms=transform_valid, label_columns=args.label_columns, label_mappings=label_mappings, global_video_features=args.global_video_features, debug=args.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset_valid, shuffle=False) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_206": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SGD_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model.features.stem.parameters(), 'lr': 0, 'name': 'stem'}, {'params': backbone_params, 'lr': args.backbone_lr * args.world_size, 'name': 'backbone'}, {'params': fc_params, 'lr': args.fc_lr * args.world_size, 'name': 'fc'}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_234": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(backbone=args.backbone, num_classes=[len(l) for l in label_mappings], num_heads=len(args.label_columns), concat_gvf=args.global_video_features is not None)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_239": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "video_backbone/TSP/train/untrimmed_video_dataset.py": {
        "torch": {
            "tensor_99": {
                "variable": {
                    "value": "sample[gvf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "f[os.path.basename(filename).split('.')[0]][()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_142": {
                "start": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}