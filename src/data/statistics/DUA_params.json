{
    "plot/format_data.py": {
        "torch": {
            "load_198": {
                "variable": {
                    "value": "user_perf",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "user_results_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(exp_data_entry.exp_path, user_acc_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "shared_utils/ImageFolderTrainVal.py": {
        "torch": {}
    },
    "shared_utils/datasets.py": {
        "torch": {
            "DataLoader_201": {
                "variable": {
                    "value": "orig_svhn_tr_dsloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "orig_svhn_tr_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.SVHN(svhn_root, split='train', download=True, transform=transforms.Compose([transforms.CenterCrop(self.input_size[0]), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "orig_svhn_test_dsloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "orig_svhn_test_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.SVHN(svhn_root, split='test', download=True, transform=transforms.Compose([transforms.CenterCrop(self.input_size[0]), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_216": {
                "variable": {
                    "value": "orig_mnist_tr_dsloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "orig_mnist_tr_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(mnist_root, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "orig_mnist_test_dsloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "orig_mnist_test_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(mnist_root, train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_631": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.data, new_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_632": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.labels, new_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_638": {
                "variable": {
                    "value": "labels_eq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_350": {
                "variable": {
                    "value": "orig_eval_dsloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "orig_test_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.SVHN(svhn_root, split='test', download=True, transform=transforms.Compose([transforms.CenterCrop(self.input_size[0]), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_406": {
                "variable": {
                    "value": "orig_eval_dsloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "orig_mnist_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(mnist_root, train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_442": {
                "variable": {
                    "value": "orig_tr_dsloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(mnist_root, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_448": {
                "variable": {
                    "value": "orig_eval_dsloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(mnist_root, train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_654": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_756": {
                "variable": {
                    "value": "self.user_prefs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "restore_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(utils.get_root_src_path(), 'data', 'user_prefs.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_1279": {
                "variable": {
                    "value": "dsets",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "imgfolder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_imgfolder_path(self.task_sequence[0], train=False, user=user)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_1280": {
                "variable": {
                    "value": "dset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dsets['eval']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'eval': eval_ds, 'iw': iw_ds}",
                            "Dict"
                        ],
                        [
                            "{'train': train_ds, 'val': val_ds}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "user_ds_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(seq_root, '{}_testsubset_SubsetSVHN_targets{}.pth'.format('user', task_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(seq_root, '{}_testsubset_SubsetMNIST_targets{}.pth'.format('user', task_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_SVHN_root, '{}_testsubset_SubsetSVHN_targets{}.pth'.format('user', user_SVHN_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, '{}_testsubset_SubsetMNIST_targets{}.pth'.format('user', user_MNIST_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, ds_template.format('user', user_MNIST_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_292": {
                "obj": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'eval': eval_ds, 'iw': iw_ds}",
                            "Dict"
                        ],
                        [
                            "{'train': train_ds, 'val': val_ds}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "tr_ds_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(seq_root, '{}_trainsubset_SubsetMNIST+SVHN_targets{}.pth'.format('tr', task_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_SVHN_root, '{}_fulltrain_SubsetSVHN.pth'.format('tr'))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, '{}_fulltrain_SubsetMNIST.pth'.format('tr'))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, ds_template.format('tr', self.tr_MNIST_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_339": {
                "obj": {
                    "value": "{'train': train_ds, 'val': val_ds}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "tr_ds_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(seq_root, '{}_trainsubset_SubsetMNIST+SVHN_targets{}.pth'.format('tr', task_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_SVHN_root, '{}_fulltrain_SubsetSVHN.pth'.format('tr'))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, '{}_fulltrain_SubsetMNIST.pth'.format('tr'))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, ds_template.format('tr', self.tr_MNIST_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_358": {
                "obj": {
                    "value": "{'eval': eval_ds, 'iw': iw_ds}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "user_ds_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(seq_root, '{}_testsubset_SubsetSVHN_targets{}.pth'.format('user', task_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(seq_root, '{}_testsubset_SubsetMNIST_targets{}.pth'.format('user', task_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_SVHN_root, '{}_testsubset_SubsetSVHN_targets{}.pth'.format('user', user_SVHN_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, '{}_testsubset_SubsetMNIST_targets{}.pth'.format('user', user_MNIST_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, ds_template.format('user', user_MNIST_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_396": {
                "obj": {
                    "value": "{'train': train_ds, 'val': val_ds}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "tr_ds_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(seq_root, '{}_trainsubset_SubsetMNIST+SVHN_targets{}.pth'.format('tr', task_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_SVHN_root, '{}_fulltrain_SubsetSVHN.pth'.format('tr'))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, '{}_fulltrain_SubsetMNIST.pth'.format('tr'))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, ds_template.format('tr', self.tr_MNIST_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_416": {
                "obj": {
                    "value": "{'eval': eval_ds, 'iw': iw_ds}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "user_ds_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(seq_root, '{}_testsubset_SubsetSVHN_targets{}.pth'.format('user', task_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(seq_root, '{}_testsubset_SubsetMNIST_targets{}.pth'.format('user', task_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_SVHN_root, '{}_testsubset_SubsetSVHN_targets{}.pth'.format('user', user_SVHN_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, '{}_testsubset_SubsetMNIST_targets{}.pth'.format('user', user_MNIST_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, ds_template.format('user', user_MNIST_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_488": {
                "obj": {
                    "value": "{'eval': eval_ds, 'iw': iw_ds}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "user_ds_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(seq_root, '{}_testsubset_SubsetSVHN_targets{}.pth'.format('user', task_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(seq_root, '{}_testsubset_SubsetMNIST_targets{}.pth'.format('user', task_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_SVHN_root, '{}_testsubset_SubsetSVHN_targets{}.pth'.format('user', user_SVHN_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, '{}_testsubset_SubsetMNIST_targets{}.pth'.format('user', user_MNIST_targets))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, ds_template.format('user', user_MNIST_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_489": {
                "obj": {
                    "value": "{'train': train_ds, 'val': val_ds}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "tr_ds_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(seq_root, '{}_trainsubset_SubsetMNIST+SVHN_targets{}.pth'.format('tr', task_name))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_SVHN_root, '{}_fulltrain_SubsetSVHN.pth'.format('tr'))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, '{}_fulltrain_SubsetMNIST.pth'.format('tr'))",
                            "Call"
                        ],
                        [
                            "os.path.join(cust_mnist_root, ds_template.format('tr', self.tr_MNIST_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_641": {
                "input": {
                    "value": "~labels_eq",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "data": {
                    "value": "self.class_to_idx[self.labels[index].item()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "data": {
                    "value": "orig_tr_ds.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "data": {
                    "value": "orig_tr_ds.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_877": {
                "obj": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'train': train_ds, 'val': val_ds}",
                            "Dict"
                        ],
                        [
                            "{'eval': user_eval_ds, 'iw': user_iw_ds}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "tr_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.root_path, self.tr_img, task, self.tr_imgfolder)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_509": {
                "tensors": {
                    "value": "(data_subset, imgs[user_idx])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_511": {
                "tensors": {
                    "value": "(label_subset, targets[user_idx])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_893": {
                "obj": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'train': train_ds, 'val': val_ds}",
                            "Dict"
                        ],
                        [
                            "{'eval': user_eval_ds, 'iw': user_iw_ds}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "test_path.format(user)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_476": {
                "tensors": {
                    "value": "(tr_data, imgs[tr_idx])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_478": {
                "tensors": {
                    "value": "(tr_labels, targets[tr_idx])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_469": {
                "tensors": {
                    "value": "(user_data, imgs[user_idx])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_471": {
                "tensors": {
                    "value": "(user_labels, targets[user_idx])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "shared_utils/models.py": {
        "torch": {
            "ModuleList_150": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_163": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_82": {
                "obj": {
                    "value": "models.alexnet(pretrained=pretrained)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearNet(self.in_dim, classifier_list, self.out_dim)",
                            "Call"
                        ],
                        [
                            "models.vgg11_bn(pretrained=pretrained) if batch_norm else models.vgg11(pretrained=pretrained)",
                            "IfExp"
                        ]
                    ]
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.dim_seq[idx_dim])",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.dim_seq[idx_dim + 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_203": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearNet(self.in_dim, classifier_list, self.out_dim)",
                            "Call"
                        ],
                        [
                            "models.vgg11_bn(pretrained=pretrained) if batch_norm else models.vgg11(pretrained=pretrained)",
                            "IfExp"
                        ]
                    ]
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "shared_utils/utils.py": {
        "torch": {
            "memory_allocated_112": {
                "variable": {
                    "value": "mem_req[cuda_memory_allocated]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "memory_cached_113": {
                "variable": {
                    "value": "mem_req[cuda_memory_cached]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_47": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "model.classifier._modules[last_classlayer_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classifier._modules[last_classlayer_index].in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier._modules[last_classlayer_index].in_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "mem_req",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "out_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, out_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, out_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_123": {
                "obj": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "out_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, out_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, out_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "model.classifier._modules[last_classlayer_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classifier._modules[last_classlayer_index].in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier._modules[last_classlayer_index].in_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classifier._modules[last_classlayer_index].kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classifier._modules[last_classlayer_index].stride",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "test/main_test.py": {
        "torch": {
            "load_514": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models_del",
                            "Name"
                        ],
                        [
                            "args.model_paths",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_cache_498": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_527": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_557": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path)",
                            "Call"
                        ],
                        [
                            "args.model_paths[0]",
                            "Subscript"
                        ],
                        [
                            "torch.load(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_562": {
                "variable": {
                    "value": "BN_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.BN_model_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "args.users_perf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "user_out_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.out_path, utils.get_perf_output_filename(args.method_name, user=user))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_network.py": {
        "torch": {
            "tensor_119": {
                "variable": {
                    "value": "this_task_class_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(cumulative_classes_len[task_idx], cumulative_classes_len[task_idx + 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "imgfolders",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_75": {
                "variable": {
                    "value": "(_, target_head_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "imgfolders",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_140": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "this_tasks_outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "dataset": {
                    "value": "imgfolders[mode]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ],
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_seq.py": {
        "torch": {}
    },
    "train/EWC/EWC_SGD.py": {
        "torch": {
            "load_146": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_268": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_205": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_220": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'best_model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train/EWC/Finetune_EWC.py": {
        "torch": {
            "is_available_45": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "model_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "previous_task_model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_65": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "dset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolderTrainVal(data_dir, data_path, data_transform)",
                            "Call"
                        ],
                        [
                            "torch.load(data_path)",
                            "Call"
                        ],
                        [
                            "dset['train']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_157": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.log_softmax(output, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_sets",
                            "Name"
                        ]
                    ]
                }
            },
            "log_softmax_157": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_224": {
                "variable": {
                    "value": "acc_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_param.get('omega')",
                            "Call"
                        ],
                        [
                            "reg_param.get('prev_omega')",
                            "Call"
                        ],
                        [
                            "prev_omega.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(param.size()).zero_()",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega').cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/Finetune/Finetune_SGD.py": {
        "torch": {
            "is_available_60": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_62": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(exp_dir, 'epoch.pth.tar')",
                            "Call"
                        ],
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                }
            },
            "SGD_100": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "iter(params_to_optimize)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0004",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_ft.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0004",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_148": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "iter(params_to_optimize)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0004",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_55": {
                "variable": {
                    "value": "model_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train/Finetune/SGD_Training.py": {
        "torch": {
            "load_100": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_229": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_160": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_181": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'best_model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train/IMM/Finetune_l2transfer.py": {
        "torch": {
            "CrossEntropyLoss_174": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/IMM/L2_transfer_utils/L2transfer_Training.py": {
        "torch": {
            "load_137": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_250": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_189": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_204": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_222": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'best_model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train/IMM/merge.py": {
        "torch": {
            "nll_loss_285": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(output, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(Variable(torch.multinomial(temp, 1).clone()), (-1,))",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_277": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_285": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/LwF/Finetune_SGD_LWF.py": {
        "torch": {
            "softmax_30": {
                "variable": {
                    "value": "p_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "p_teacher_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher_scores - maxT.repeat(1, scale)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "p_teacher_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher_scores - maxT.repeat(1, scale)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_312": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_ft.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_lr * 0.1 ** (epoch // lr_decay_epoch)",
                            "BinOp"
                        ],
                        [
                            "lr * 0.1",
                            "BinOp"
                        ],
                        [
                            "checkpoint['lr']",
                            "Subscript"
                        ],
                        [
                            "0.0004",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train/LwF/ModelWrapperLwF.py": {
        "torch": {
            "flatten_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modulex(x)",
                            "Call"
                        ],
                        [
                            "modulex(torch.flatten(x, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/MAS/MAS.py": {
        "torch": {
            "is_available_35": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "model_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "manager.previous_task_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "init_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "init_model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "dset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolderTrainVal(data_dir, data_path, data_transform)",
                            "Call"
                        ],
                        [
                            "torch.load(data_path)",
                            "Call"
                        ],
                        [
                            "dset[test_set]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_sets",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "train/MAS/MAS_utils/Objective_based_Training.py": {
        "torch": {
            "mm_265": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data.clone().view(param.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "filters.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_266": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad * opt['orth_lambda']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_270": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(filters, filters.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.exp(grad * opt['orth_lambda'])",
                            "Call"
                        ],
                        [
                            "(grad * opt['orth_lambda']).div(grad + math.exp(opt['orth_lambda']))",
                            "Call"
                        ],
                        [
                            "torch.mm(grad, filters)",
                            "Call"
                        ],
                        [
                            "grad * coef",
                            "BinOp"
                        ],
                        [
                            "grad.view(param.size())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data.clone().view(param.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_540": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_668": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_cache_903": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1194": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_283": {
                "*size": {
                    "value": "param.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_803": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_808": {
                "variable": {
                    "value": "Target_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_812": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_859": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_885": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_900": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_945": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_952": {
                "variable": {
                    "value": "Target_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_956": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_1006": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_597": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_715": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_872": {
                "variable": {
                    "value": "target_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[torch.arange(outputs.size()[0]), labels]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_876": {
                "variable": {
                    "value": "target_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_899": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1015": {
                "variable": {
                    "value": "Target_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1019": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs * Target_zeros",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_1122": {
                "variable": {
                    "value": "acc_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_param.get('omega')",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega')",
                            "Call"
                        ],
                        [
                            "prev_omega - neuron_omega_val.expand_as(prev_omega)",
                            "BinOp"
                        ],
                        [
                            "reg_param.get('prev_omega')",
                            "Call"
                        ],
                        [
                            "prev_omega.cuda()",
                            "Call"
                        ],
                        [
                            "reg_param.get('prev_omega')",
                            "Call"
                        ],
                        [
                            "prev_omega.cuda()",
                            "Call"
                        ],
                        [
                            "reg_param.get('prev_omega').cuda()",
                            "Call"
                        ],
                        [
                            "prev_omega * (number_of_tasks - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "new_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(param.size()).zero_()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(param.size()).zero_()",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega').cuda()",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega').cuda()",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega').cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_1153": {
                "variable": {
                    "value": "acc_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(prev_omega, new_omega)",
                            "Call"
                        ],
                        [
                            "prev_omega.add(-1, new_omega)",
                            "Call"
                        ],
                        [
                            "torch.max(acc_omega, zer.cuda())",
                            "Call"
                        ],
                        [
                            "torch.add(prev_omega, new_omega).div(number_of_tasks)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_1181": {
                "variable": {
                    "value": "acc_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_param.get('omega')",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega')",
                            "Call"
                        ],
                        [
                            "prev_omega - neuron_omega_val.expand_as(prev_omega)",
                            "BinOp"
                        ],
                        [
                            "reg_param.get('prev_omega')",
                            "Call"
                        ],
                        [
                            "prev_omega.cuda()",
                            "Call"
                        ],
                        [
                            "reg_param.get('prev_omega')",
                            "Call"
                        ],
                        [
                            "prev_omega.cuda()",
                            "Call"
                        ],
                        [
                            "reg_param.get('prev_omega').cuda()",
                            "Call"
                        ],
                        [
                            "prev_omega * (number_of_tasks - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "new_omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(param.size()).zero_()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(param.size()).zero_()",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega').cuda()",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega').cuda()",
                            "Call"
                        ],
                        [
                            "reg_param.get('omega').cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "div_1181": {
                "variable": {
                    "value": "acc_omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "number_of_tasks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_612": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_727": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_744": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'best_model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_879": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "gt_output",
                            "Name"
                        ],
                        [
                            "torch.nn.functional.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_631": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'best_model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_868": {
                "start": {
                    "value": "outputs.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train/main_train.py": {
        "torch": {
            "save_240": {
                "obj": {
                    "value": "hyperparams",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "hyperparams_outpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, utils.get_hyperparams_output_filename())",
                            "Call"
                        ]
                    ]
                }
            },
            "load_262": {
                "variable": {
                    "value": "dsets",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dataset_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "f": {
                    "value": "self.get_success_token_path(exp_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "dataset": {
                    "value": "dsets[subs_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_289": {
                "variable": {
                    "value": "dset_wrapper",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "it",
                            "Name"
                        ]
                    ]
                }
            },
            "DataLoader_310": {
                "dataset": {
                    "value": "ConcatDatasetDynamicLabels(dset_imgfolders[x], dset_class_lengths[x])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}