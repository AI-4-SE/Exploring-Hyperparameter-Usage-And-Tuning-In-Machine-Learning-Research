{
    "det3d/builder.py": {
        "torch": {
            "Sequential_95": {
                "*args": {
                    "value": "*flatten_model(m)",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/core/anchor/target_ops_v2.py": {
        "torch": {}
    },
    "det3d/core/bbox/box_torch_ops.py": {
        "torch": {
            "sqrt_41": {
                "variable": {
                    "value": "diagonal",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "possible_values": []
                }
            },
            "sqrt_110": {
                "variable": {
                    "value": "diagonal",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "possible_values": []
                }
            },
            "split_156": {
                "variable": {
                    "value": "(xa, ya, wa, la, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_157": {
                "variable": {
                    "value": "(xg, yg, wg, lg, rg)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_158": {
                "variable": {
                    "value": "diagonal",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "possible_values": []
                }
            },
            "split_191": {
                "variable": {
                    "value": "(xa, ya, wa, la, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sqrt_199": {
                "variable": {
                    "value": "diagonal",
                    "possible_values": []
                },
                "input": {
                    "value": "la ** 2 + wa ** 2",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "corners_norm",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "corners_norm",
                    "possible_values": [
                        [
                            "np.stack(np.unravel_index(np.arange(2 ** ndim), [2] * ndim), axis=1).astype(dtype)",
                            "Call"
                        ],
                        [
                            "corners_norm[[0, 1, 3, 2]]",
                            "Subscript"
                        ],
                        [
                            "corners_norm - np.array(origin, dtype=dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(corners_norm).type_as(dims)",
                            "Call"
                        ],
                        [
                            "corners_norm[[0, 1, 3, 2, 4, 5, 7, 6]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_286": {
                "variable": {
                    "value": "rot_sin",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cos_287": {
                "variable": {
                    "value": "rot_cos",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_288": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_cos",
                    "possible_values": [
                        [
                            "torch.cos(angles)",
                            "Call"
                        ],
                        [
                            "torch.cos(angles)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_289": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_cos",
                    "possible_values": [
                        [
                            "torch.cos(angles)",
                            "Call"
                        ],
                        [
                            "torch.cos(angles)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_358": {
                "variable": {
                    "value": "rot_sin",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cos_359": {
                "variable": {
                    "value": "rot_cos",
                    "possible_values": []
                },
                "input": {
                    "value": "angles",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_360": {
                "variable": {
                    "value": "rot_mat_T",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tstack([rot_cos, -rot_sin]), tstack([rot_sin, rot_cos])]",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "points_4",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points_3d, torch.zeros(*points_shape).type_as(points_3d)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_416": {
                "variable": {
                    "value": "point_2d",
                    "possible_values": []
                },
                "input": {
                    "value": "points_4",
                    "possible_values": [
                        [
                            "torch.cat([points_3d, torch.zeros(*points_shape).type_as(points_3d)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "proj_mat.t()",
                    "possible_values": []
                }
            },
            "cat_423": {
                "variable": {
                    "value": "points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, torch.ones(num_points, 1).type_as(points)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_430": {
                "variable": {
                    "value": "points",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, torch.ones(num_points, 1).type_as(points)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "dets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, scores.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_535": {
                "variable": {
                    "value": "dets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rbboxes, scores.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_574": {
                "variable": {
                    "value": "dets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rbboxes, scores.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_36": {
                "variable": {
                    "value": "(xg, yg, zg, wg, lg, hg, rg)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_38": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, vxa, vya, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_39": {
                "variable": {
                    "value": "(xg, yg, zg, wg, lg, hg, vxg, vyg, rg)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_51": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "lg / la",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "wt",
                    "possible_values": []
                },
                "input": {
                    "value": "wg / wa",
                    "possible_values": []
                }
            },
            "log_53": {
                "variable": {
                    "value": "ht",
                    "possible_values": []
                },
                "input": {
                    "value": "hg / ha",
                    "possible_values": []
                }
            },
            "cos_67": {
                "variable": {
                    "value": "rgx",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "possible_values": [
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_68": {
                "variable": {
                    "value": "rgy",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "possible_values": [
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_69": {
                "variable": {
                    "value": "rax",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "sin_70": {
                "variable": {
                    "value": "ray",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "ret",
                    "possible_values": [
                        [
                            "[xt, yt, zt, wt, lt, ht]",
                            "List"
                        ],
                        [
                            "[xg, yg, zg]",
                            "List"
                        ],
                        [
                            "np.array(nms_gpu(dets_np, iou_threshold), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(rotate_nms_cc(dets_np, iou_threshold), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_97": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, vxa, vya, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cos_128": {
                "variable": {
                    "value": "rax",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "sin_129": {
                "variable": {
                    "value": "ray",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "atan2_132": {
                "variable": {
                    "value": "rg",
                    "possible_values": []
                },
                "input": {
                    "value": "rgy",
                    "possible_values": [
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ],
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rgx",
                    "possible_values": [
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ],
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "ret",
                    "possible_values": [
                        [
                            "[xt, yt, zt, wt, lt, ht]",
                            "List"
                        ],
                        [
                            "[xg, yg, zg]",
                            "List"
                        ],
                        [
                            "np.array(nms_gpu(dets_np, iou_threshold), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(rotate_nms_cc(dets_np, iou_threshold), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_165": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "lg / la",
                    "possible_values": []
                }
            },
            "log_166": {
                "variable": {
                    "value": "wt",
                    "possible_values": []
                },
                "input": {
                    "value": "wg / wa",
                    "possible_values": []
                }
            },
            "cos_168": {
                "variable": {
                    "value": "rgx",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "possible_values": [
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_169": {
                "variable": {
                    "value": "rgy",
                    "possible_values": []
                },
                "input": {
                    "value": "rg",
                    "possible_values": [
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(rgy, rgx)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_170": {
                "variable": {
                    "value": "rax",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "sin_171": {
                "variable": {
                    "value": "ray",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "split_193": {
                "variable": {
                    "value": "(xt, yt, wt, lt, rtx, rty)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_196": {
                "variable": {
                    "value": "(xt, yt, wt, lt, rt)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cos_209": {
                "variable": {
                    "value": "rax",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "sin_210": {
                "variable": {
                    "value": "ray",
                    "possible_values": []
                },
                "input": {
                    "value": "ra",
                    "possible_values": []
                }
            },
            "atan2_213": {
                "variable": {
                    "value": "rg",
                    "possible_values": []
                },
                "input": {
                    "value": "rgy",
                    "possible_values": [
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ],
                        [
                            "torch.sin(rg)",
                            "Call"
                        ],
                        [
                            "rty + ray",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rgx",
                    "possible_values": [
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ],
                        [
                            "torch.cos(rg)",
                            "Call"
                        ],
                        [
                            "rtx + rax",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "[xg, yg, wg, lg, rg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_280": {
                "tensors": {
                    "value": "standup_boxes",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_317": {
                "equation": {
                    "value": "aij,jka->aik",
                    "possible_values": []
                },
                "*operands": {
                    "value": "points",
                    "possible_values": [
                        [
                            "torch.cat([points, torch.ones(num_points, 1).type_as(points)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([points, torch.ones(num_points, 1).type_as(points)], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_361": {
                "equation": {
                    "value": "aij,jka->aik",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(points, rot_mat_T)",
                    "possible_values": []
                }
            },
            "cat_440": {
                "tensors": {
                    "value": "[xyz_lidar, w, l, h, r]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_448": {
                "tensors": {
                    "value": "[xyz, l, h, w, r]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "topk_509": {
                "variable": {
                    "value": "(scores, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": []
                },
                "k": {
                    "value": "pre_max_size",
                    "possible_values": [
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_521": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "nms_func(class_boxes, class_scores, pre_max_size, post_max_size, iou_threshold)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(rbboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_533": {
                "variable": {
                    "value": "(scores, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": []
                },
                "k": {
                    "value": "pre_max_size",
                    "possible_values": [
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_545": {
                "variable": {
                    "value": "keep",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "nms_func(class_boxes, class_scores, pre_max_size, post_max_size, iou_threshold)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(rbboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_566": {
                "variable": {
                    "value": "(scores, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": []
                },
                "k": {
                    "value": "pre_max_size",
                    "possible_values": [
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "min(num_keeped_scores, pre_max_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_99": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, vxt, vyt, rtx, rty)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_101": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, vxt, vyt, rt)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_104": {
                "variable": {
                    "value": "(xa, ya, za, wa, la, ha, ra)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "possible_values": [
                        [
                            "anchors[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "[xt, yt, wt, lt, rtx, rty]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "[xt, yt, wt, lt, rt]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "inverse_424": {
                "input": {
                    "value": "(r_rect @ velo2cam).t()",
                    "possible_values": []
                }
            },
            "nonzero_480": {
                "variable": {
                    "value": "class_scores_keep",
                    "possible_values": []
                },
                "input": {
                    "value": "class_scores >= score_thresh",
                    "possible_values": []
                }
            },
            "zeros_519": {
                "*size": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "from_numpy_524": {
                "ndarray": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "nms_func(class_boxes, class_scores, pre_max_size, post_max_size, iou_threshold)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(rbboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_543": {
                "*size": {
                    "value": "[0]",
                    "possible_values": []
                }
            },
            "from_numpy_548": {
                "ndarray": {
                    "value": "keep",
                    "possible_values": [
                        [
                            "nms_func(class_boxes, class_scores, pre_max_size, post_max_size, iou_threshold)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "np.array([], dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "ret[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(rbboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_598": {
                "ndarray": {
                    "value": "scores_ret_np",
                    "possible_values": [
                        [
                            "np.array(nms_result[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_106": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rtx, rty)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_108": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "exp_122": {
                "input": {
                    "value": "lt",
                    "possible_values": [
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ],
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_123": {
                "input": {
                    "value": "wt",
                    "possible_values": [
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ],
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_124": {
                "input": {
                    "value": "ht",
                    "possible_values": [
                        [
                            "hg / ha - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(hg / ha)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_206": {
                "input": {
                    "value": "lt",
                    "possible_values": [
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ],
                        [
                            "lg / la - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(lg / la)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_207": {
                "input": {
                    "value": "wt",
                    "possible_values": [
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ],
                        [
                            "wg / wa - 1",
                            "BinOp"
                        ],
                        [
                            "torch.log(wg / wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_413": {
                "*size": {
                    "value": "*points_shape",
                    "possible_values": []
                }
            },
            "ones_423": {
                "*size": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_430": {
                "*size": {
                    "value": "num_points",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ],
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "min_277": {
                "input": {
                    "value": "boxes_corner[:, :, i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_279": {
                "input": {
                    "value": "boxes_corner[:, :, i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/core/bbox/iou.py": {
        "torch": {
            "max_30": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, :2]",
                    "possible_values": []
                }
            },
            "min_31": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, 2:]",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "lt",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, :2]",
                    "possible_values": []
                }
            },
            "min_48": {
                "variable": {
                    "value": "rb",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, 2:]",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/core/fp16/decorators.py": {
        "torch": {}
    },
    "det3d/core/fp16/hooks.py": {
        "torch": {}
    },
    "det3d/core/fp16/utils.py": {
        "torch": {}
    },
    "det3d/core/iou3d/iou3d_utils.py": {
        "torch": {
            "max_106": {
                "variable": {
                    "value": "max_of_min",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_min",
                    "possible_values": [
                        [
                            "(boxes_a[:, 1] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 1] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - half_h_a).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - half_h_a).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_107": {
                "variable": {
                    "value": "min_of_max",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_max",
                    "possible_values": [
                        [
                            "boxes_a[:, 1].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "boxes_a[:, 2].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "boxes_a[:, 1].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] + half_h_a).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] + half_h_a).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_108": {
                "variable": {
                    "value": "overlaps_h",
                    "possible_values": []
                },
                "input": {
                    "value": "min_of_max - max_of_min",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_181": {
                "variable": {
                    "value": "max_of_min",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_min",
                    "possible_values": [
                        [
                            "(boxes_a[:, 1] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 1] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - half_h_a).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - half_h_a).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_182": {
                "variable": {
                    "value": "min_of_max",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_max",
                    "possible_values": [
                        [
                            "boxes_a[:, 1].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "boxes_a[:, 2].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "boxes_a[:, 1].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] + half_h_a).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] + half_h_a).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_183": {
                "variable": {
                    "value": "overlaps_h",
                    "possible_values": []
                },
                "input": {
                    "value": "min_of_max - max_of_min",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_238": {
                "variable": {
                    "value": "max_of_min",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_min",
                    "possible_values": [
                        [
                            "(boxes_a[:, 1] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 1] - boxes_a[:, h_index]).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - half_h_a).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] - half_h_a).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_239": {
                "variable": {
                    "value": "min_of_max",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_max",
                    "possible_values": [
                        [
                            "boxes_a[:, 1].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "boxes_a[:, 2].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "boxes_a[:, 1].view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] + half_h_a).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "(boxes_a[:, 2] + half_h_a).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_240": {
                "variable": {
                    "value": "overlaps_h",
                    "possible_values": []
                },
                "input": {
                    "value": "min_of_max - max_of_min",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_92": {
                "input": {
                    "value": "area_a + area_b - overlaps_bev",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "input": {
                    "value": "vol_a + vol_b - overlaps_3d",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "possible_values": []
                }
            },
            "clamp_164": {
                "input": {
                    "value": "area_a + area_b - overlaps_bev",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "possible_values": []
                }
            },
            "clamp_191": {
                "input": {
                    "value": "vol_a + vol_b - overlaps_3d",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "possible_values": []
                }
            },
            "clamp_220": {
                "input": {
                    "value": "area_a + area_b - overlaps_bev",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "possible_values": []
                }
            },
            "clamp_248": {
                "input": {
                    "value": "vol_a + vol_b - overlaps_3d",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/core/iou3d/setup.py": {
        "torch": {}
    },
    "det3d/core/iou3d/utils.py": {
        "torch": {
            "abs_66": {
                "variable": {
                    "value": "rots_0_pi_div_2",
                    "possible_values": []
                },
                "input": {
                    "value": "limit_period_torch(rots, 0.5, np.pi)",
                    "possible_values": []
                }
            },
            "where_69": {
                "variable": {
                    "value": "in_boxes_center",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "possible_values": [
                        [
                            "(rots_0_pi_div_2 > np.pi / 4)[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "(rots_0_pi_div_2 > np.pi / 4).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "in_boxes[:, [0, 1, 3, 2]]",
                    "possible_values": []
                },
                "y": {
                    "value": "in_boxes[:, :4]",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "out_boxes",
                    "possible_values": []
                },
                "*size": {
                    "value": "[in_boxes.shape[0], 5]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_boxes.dtype",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "[centers - dims / 2, centers + dims / 2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "floor_9": {
                "input": {
                    "value": "val / period + offset",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/core/sampler/preprocess.py": {
        "torch": {}
    },
    "det3d/core/sampler/sample_ops_v2.py": {
        "torch": {
            "from_numpy_249": {
                "variable": {
                    "value": "all_boxes_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_boxes",
                    "possible_values": [
                        [
                            "np.concatenate([gt_boxes, sampled_boxes], axis=0).copy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/core/utils/dist_utils.py": {
        "torch": {}
    },
    "det3d/datasets/custom.py": {
        "torch": {}
    },
    "det3d/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "det3d/datasets/kitti/eval_hooks.py": {
        "torch": {
            "device_116": {
                "variable": {
                    "value": "cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/datasets/loader/build_loader.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "num_gpus * batch_size",
                            "BinOp"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "GroupSampler(dataset, batch_size) if shuffle else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "DistributedGroupSampler(dataset, batch_size, world_size, rank)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "sampler is None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_kitti",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/datasets/loader/sampler.py": {
        "torch": {
            "Generator_187": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Generator_51": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_53": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_55": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                }
            },
            "Generator_82": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_84": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_86": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_207": {
                "n": {
                    "value": "len(indices) // self.samples_per_gpu",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_195": {
                "n": {
                    "value": "int(size)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/datasets/pipelines/formating.py": {
        "torch": {}
    },
    "det3d/datasets/pipelines/preprocess_v4.py": {
        "torch": {}
    },
    "det3d/datasets/utils/distributed.py": {
        "torch": {
            "Generator_42": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_44": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_46": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/datasets/utils/preprocess.py": {
        "torch": {
            "tensor_302": {
                "variable": {
                    "value": "ret[key]",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate(elems, axis=0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type_map[key]",
                    "possible_values": [
                        [
                            "{'voxels': torch.float32, 'bev_map': torch.float32, 'anchors': torch.float32, 'reg_targets': torch.float32, 'reg_weights': torch.float32, 'coordinates': torch.int32, 'num_points': torch.int32, 'labels': torch.int32, 'points': torch.float32, 'anchors_mask': torch.uint8, 'calib': torch.float32, 'num_voxels': torch.int64}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_330": {
                "variable": {
                    "value": "ret[key][k1]",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(v1, axis=0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type_map[key]",
                    "possible_values": [
                        [
                            "{'voxels': torch.float32, 'bev_map': torch.float32, 'anchors': torch.float32, 'reg_targets': torch.float32, 'reg_weights': torch.float32, 'coordinates': torch.int32, 'num_points': torch.int32, 'labels': torch.int32, 'points': torch.float32, 'anchors_mask': torch.uint8, 'calib': torch.float32, 'num_voxels': torch.int64}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_338": {
                "variable": {
                    "value": "ret[key]",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate(coors, axis=0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type_map[key]",
                    "possible_values": [
                        [
                            "{'voxels': torch.float32, 'bev_map': torch.float32, 'anchors': torch.float32, 'reg_targets': torch.float32, 'reg_weights': torch.float32, 'coordinates': torch.int32, 'num_points': torch.int32, 'labels': torch.int32, 'points': torch.float32, 'anchors_mask': torch.uint8, 'calib': torch.float32, 'num_voxels': torch.int64}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_345": {
                "variable": {
                    "value": "ret[key]",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(elems, axis=0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type_map[key]",
                    "possible_values": [
                        [
                            "{'voxels': torch.float32, 'bev_map': torch.float32, 'anchors': torch.float32, 'reg_targets': torch.float32, 'reg_weights': torch.float32, 'coordinates': torch.int32, 'num_points': torch.int32, 'labels': torch.int32, 'points': torch.float32, 'anchors_mask': torch.uint8, 'calib': torch.float32, 'num_voxels': torch.int64}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_343": {
                "data": {
                    "value": "ele",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type_map[key]",
                    "possible_values": [
                        [
                            "{'voxels': torch.float32, 'bev_map': torch.float32, 'anchors': torch.float32, 'reg_targets': torch.float32, 'reg_weights': torch.float32, 'coordinates': torch.int32, 'num_points': torch.int32, 'labels': torch.int32, 'points': torch.float32, 'anchors_mask': torch.uint8, 'calib': torch.float32, 'num_voxels': torch.int64}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/models/backbones/scn.py": {
        "torch": {
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_218": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_221": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_224": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_235": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_320": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_327": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_334": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_341": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_348": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_384": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_387": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_390": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_393": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_399": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_402": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_411": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_414": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_423": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/backbones/scn_dense_4.py": {
        "torch": {
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_217": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_220": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_231": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_234": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_248": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_251": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_319": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_326": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_333": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_347": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_383": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_386": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_389": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_392": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_398": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_401": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_410": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_413": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_422": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/bbox_heads/mg_head.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "tensor_onehot",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(tensor.shape)",
                    "possible_values": []
                },
                "out": {
                    "value": "depth",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "batch_reg_preds.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "boxes1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes1[..., :-1], rad_pred_encoding]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "boxes2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes2[..., :-1], rad_gt_encoding]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "abs_79": {
                "variable": {
                    "value": "abs_x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "pred - gt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_142": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "possible_values": []
                }
            },
            "abs_144": {
                "variable": {
                    "value": "n",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "possible_values": []
                }
            },
            "where_146": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "variable": {
                    "value": "self.conv_box",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_pred",
                    "possible_values": [
                        [
                            "num_a * (box_cs - 2)",
                            "BinOp"
                        ],
                        [
                            "num_a * box_cs",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "self.conv_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_cls",
                    "possible_values": [
                        [
                            "num_a * num_c",
                            "BinOp"
                        ],
                        [
                            "num_a * (num_c + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_243": {
                "variable": {
                    "value": "self.tasks",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_464": {
                "variable": {
                    "value": "self.tasks",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sin_35": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "possible_values": []
                }
            },
            "cos_35": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "possible_values": []
                }
            },
            "cos_36": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "possible_values": []
                }
            },
            "sin_36": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "possible_values": []
                }
            },
            "Conv2d_213": {
                "variable": {
                    "value": "self.conv_dir",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_dir",
                    "possible_values": [
                        [
                            "num_a * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "variable": {
                    "value": "conv_box",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_pred",
                    "possible_values": [
                        [
                            "num_a * (box_cs - 2)",
                            "BinOp"
                        ],
                        [
                            "num_a * box_cs",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_pool2d_258": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "task(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, kernel_size=out.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[2:]",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rets",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "clamp_530": {
                "variable": {
                    "value": "num_examples",
                    "possible_values": []
                },
                "input": {
                    "value": "num_examples",
                    "possible_values": [
                        [
                            "cared.type(dtype).sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(num_examples, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "tensor_765": {
                "variable": {
                    "value": "post_center_range",
                    "possible_values": []
                },
                "data": {
                    "value": "post_center_range",
                    "possible_values": [
                        [
                            "test_cfg.post_center_limit_range",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(post_center_range, dtype=batch_reg_preds.dtype, device=batch_reg_preds.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "batch_reg_preds.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_reg_preds.device",
                    "possible_values": []
                }
            },
            "clamp_533": {
                "input": {
                    "value": "bbox_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sigmoid_784": {
                "variable": {
                    "value": "total_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class + 1)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x).permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "preds_dict['cls_preds']",
                            "Subscript"
                        ],
                        [
                            "cls_preds[a_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_872": {
                "variable": {
                    "value": "selected_boxes",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_boxes",
                    "possible_values": [
                        [
                            "torch.cat(selected_boxes, dim=0)",
                            "Call"
                        ],
                        [
                            "box_preds[selected]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_873": {
                "variable": {
                    "value": "selected_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_labels",
                    "possible_values": [
                        [
                            "torch.cat(selected_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "top_labels[selected]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_874": {
                "variable": {
                    "value": "selected_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_scores",
                    "possible_values": [
                        [
                            "torch.cat(selected_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "top_scores[selected]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "min_304": {
                "input": {
                    "value": "yp_top",
                    "possible_values": []
                }
            },
            "max_304": {
                "input": {
                    "value": "yp_down",
                    "possible_values": []
                }
            },
            "clamp_537": {
                "input": {
                    "value": "pos_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_538": {
                "input": {
                    "value": "pos_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "stack_541": {
                "variable": {
                    "value": "pos_neg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positives, negatives]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "clamp_544": {
                "variable": {
                    "value": "cls_normalizer",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_normalizer",
                    "possible_values": [
                        [
                            "(pos_neg * normalizer).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(cls_normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_546": {
                "variable": {
                    "value": "normalizer",
                    "possible_values": []
                },
                "input": {
                    "value": "normalizer",
                    "possible_values": [
                        [
                            "pos_neg.sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_623": {
                "input": {
                    "value": "weights.sum(-1, keepdim=True)",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "cat_743": {
                "variable": {
                    "value": "ret[k]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[i][k] for ret in rets]",
                    "possible_values": []
                }
            },
            "cat_876": {
                "variable": {
                    "value": "selected_dir_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_dir_labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(selected_dir_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "dir_labels[selected]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_882": {
                "variable": {
                    "value": "top_labels",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_scores.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "total_scores.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "max_884": {
                "variable": {
                    "value": "(top_scores, top_labels)",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores",
                    "possible_values": [
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(cls_preds)[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(cls_preds, dim=-1)[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_888": {
                "variable": {
                    "value": "thresh",
                    "possible_values": []
                },
                "data": {
                    "value": "[test_cfg.score_threshold]",
                    "possible_values": []
                },
                "device": {
                    "value": "total_scores.device",
                    "possible_values": []
                }
            },
            "cat_750": {
                "variable": {
                    "value": "ret[k]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[i][k] for ret in rets]",
                    "possible_values": []
                }
            },
            "max_779": {
                "input": {
                    "value": "dir_preds",
                    "possible_values": [
                        [
                            "self.conv_dir(x).permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "dir_preds[a_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "where_932": {
                "condition": {
                    "value": "opp_labels",
                    "possible_values": [
                        [
                            "(box_preds[..., -1] - self.direction_offset > 0) ^ (dir_labels.byte() == 1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.tensor(np.pi).type_as(box_preds)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0.0).type_as(box_preds)",
                    "possible_values": []
                }
            },
            "zeros_952": {
                "*size": {
                    "value": "[0, self.box_n_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "batch_reg_preds.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "batch_reg_preds.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_953": {
                "*size": {
                    "value": "[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "batch_reg_preds.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "batch_reg_preds.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_954": {
                "*size": {
                    "value": "[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "top_labels.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "batch_reg_preds.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_552": {
                "input": {
                    "value": "pos_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sigmoid_787": {
                "input": {
                    "value": "cls_preds",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class + 1)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x).permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "preds_dict['cls_preds']",
                            "Subscript"
                        ],
                        [
                            "cls_preds[a_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_789": {
                "input": {
                    "value": "cls_preds",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, num_class + 1)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x).permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "preds_dict['cls_preds']",
                            "Subscript"
                        ],
                        [
                            "cls_preds[a_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds.float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_932": {
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "full_861": {
                "size": {
                    "value": "[class_boxes[selected].shape[0]]",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "class_idx",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                },
                "device": {
                    "value": "box_preds.device",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/bbox_heads/mg_head_v4_release.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "tensor_onehot",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(tensor.shape)",
                    "possible_values": []
                },
                "out": {
                    "value": "depth",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "batch_reg_preds.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "res_boxes1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes1[..., :-1], rad_pred_encoding]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "res_boxes2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes2[..., :-1], rad_gt_encoding]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "abs_81": {
                "variable": {
                    "value": "abs_x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "pred - gt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_144": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "possible_values": []
                }
            },
            "abs_146": {
                "variable": {
                    "value": "n",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "possible_values": []
                }
            },
            "where_148": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "variable": {
                    "value": "self.conv_box",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_pred",
                    "possible_values": [
                        [
                            "num_a * (box_cs - 2)",
                            "BinOp"
                        ],
                        [
                            "num_a * box_cs",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.conv_cls",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_cls",
                    "possible_values": [
                        [
                            "num_a * num_c",
                            "BinOp"
                        ],
                        [
                            "num_a * (num_c + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "variable": {
                    "value": "self.conv_iou",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ModuleList_236": {
                "variable": {
                    "value": "self.tasks",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_462": {
                "variable": {
                    "value": "self.tasks",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_469": {
                "variable": {
                    "value": "self.post_center_range",
                    "possible_values": []
                },
                "data": {
                    "value": "post_center_range",
                    "possible_values": [
                        [
                            "[0, -40.0, -5.0, 70.4, 40.0, 5.0]",
                            "List"
                        ],
                        [
                            "self.post_center_range",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "tensor_470": {
                "variable": {
                    "value": "self.thresh",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.3]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "zeros_471": {
                "variable": {
                    "value": "self.top_labels",
                    "possible_values": []
                },
                "*size": {
                    "value": "[70400]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "sin_37": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "possible_values": []
                }
            },
            "cos_37": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "possible_values": []
                }
            },
            "cos_38": {
                "input": {
                    "value": "boxes1[..., -1:]",
                    "possible_values": []
                }
            },
            "sin_38": {
                "input": {
                    "value": "boxes2[..., -1:]",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "variable": {
                    "value": "self.conv_dir",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_dir",
                    "possible_values": [
                        [
                            "num_a * 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "conv_box",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_input",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_pred",
                    "possible_values": [
                        [
                            "num_a * (box_cs - 2)",
                            "BinOp"
                        ],
                        [
                            "num_a * box_cs",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_pool2d_251": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "task(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, kernel_size=out.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[2:]",
                    "possible_values": []
                }
            },
            "cat_351": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rets",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "clamp_524": {
                "variable": {
                    "value": "num_examples",
                    "possible_values": []
                },
                "input": {
                    "value": "num_examples",
                    "possible_values": [
                        [
                            "cared.type(dtype).sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(num_examples, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sigmoid_710": {
                "variable": {
                    "value": "total_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "possible_values": [
                        [
                            "cls_preds.view(batch_size, -1, num_class)",
                            "Call"
                        ],
                        [
                            "self.conv_cls(x).permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "preds_dict['cls_preds']",
                            "Subscript"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, self.num_classes[task_id])",
                            "Call"
                        ],
                        [
                            "cls_preds.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_527": {
                "input": {
                    "value": "bbox_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "zeros_749": {
                "variable": {
                    "value": "box_preds",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 7]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "possible_values": []
                }
            },
            "min_297": {
                "input": {
                    "value": "yp_top",
                    "possible_values": []
                }
            },
            "max_297": {
                "input": {
                    "value": "yp_down",
                    "possible_values": []
                }
            },
            "clamp_531": {
                "input": {
                    "value": "pos_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_532": {
                "input": {
                    "value": "pos_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "stack_535": {
                "variable": {
                    "value": "pos_neg",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positives, negatives]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "clamp_538": {
                "variable": {
                    "value": "cls_normalizer",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_normalizer",
                    "possible_values": [
                        [
                            "(pos_neg * normalizer).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(cls_normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_540": {
                "variable": {
                    "value": "normalizer",
                    "possible_values": []
                },
                "input": {
                    "value": "normalizer",
                    "possible_values": [
                        [
                            "pos_neg.sum(1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.clamp(normalizer, min=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_594": {
                "input": {
                    "value": "weights.sum(-1, keepdim=True)",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "cat_676": {
                "variable": {
                    "value": "ret[k]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[i][k] for ret in rets]",
                    "possible_values": []
                }
            },
            "pow_723": {
                "input": {
                    "value": "iou_preds.masked_select(top_scores_keep)",
                    "possible_values": []
                },
                "exponent": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "cat_683": {
                "variable": {
                    "value": "ret[k]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[i][k] for ret in rets]",
                    "possible_values": []
                }
            },
            "max_707": {
                "input": {
                    "value": "dir_preds",
                    "possible_values": [
                        [
                            "self.conv_dir(x).permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "where_766": {
                "condition": {
                    "value": "opp_labels",
                    "possible_values": [
                        [
                            "(box_preds[..., -1] - self.direction_offset > 0) ^ (dir_labels.byte() == 1)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.tensor(np.pi).type_as(box_preds)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0.0).type_as(box_preds)",
                    "possible_values": []
                }
            },
            "zeros_780": {
                "*size": {
                    "value": "[0, self.box_n_dim]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "batch_reg_preds.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "batch_reg_preds.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_781": {
                "*size": {
                    "value": "[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "batch_reg_preds.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "batch_reg_preds.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_782": {
                "*size": {
                    "value": "[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "top_labels.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "batch_reg_preds.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_546": {
                "input": {
                    "value": "pos_normalizer",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "tensor_766": {
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/builder.py": {
        "torch": {
            "Sequential_19": {
                "*args": {
                    "value": "*modules",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/detectors/base.py": {
        "torch": {}
    },
    "det3d/models/detectors/multi_stage.py": {
        "torch": {}
    },
    "det3d/models/detectors/single_stage.py": {
        "torch": {}
    },
    "det3d/models/losses/accuracy.py": {
        "torch": {}
    },
    "det3d/models/losses/balanced_l1_loss.py": {
        "torch": {
            "abs_14": {
                "variable": {
                    "value": "diff",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "possible_values": []
                }
            },
            "where_16": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha / b * (b * diff + 1) * torch.log(b * diff / beta + 1) - alpha * diff",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma * diff + gamma / b - alpha * beta",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "b * diff / beta + 1",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/losses/cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_11": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "nonzero_25": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "possible_values": []
                }
            },
            "squeeze_25": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_44": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "weight.float()",
                            "Call"
                        ],
                        [
                            "weight.float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "arange_57": {
                "variable": {
                    "value": "inds",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_59": {
                "input": {
                    "value": "pred_slice",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/losses/focal_loss.py": {
        "torch": {
            "binary_cross_entropy_with_logits_18": {
                "input": {
                    "value": "pred",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/losses/ghm_loss.py": {
        "torch": {
            "zeros_like_44": {
                "variable": {
                    "value": "weights_ghm",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "prediction_tensor",
                            "Name"
                        ]
                    ]
                }
            },
            "abs_50": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "input.sigmoid().detach() - target",
                    "possible_values": []
                }
            },
            "abs_113": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "diff / torch.sqrt(self.mu * self.mu + diff * diff)",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "weights_ghm",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.abs(input.sigmoid().detach() - target).view(-1, num_class)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff / torch.sqrt(self.mu * self.mu + diff * diff)).detach().view(-1, num_codes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "diff * diff + self.mu * self.mu",
                    "possible_values": []
                }
            },
            "sqrt_113": {
                "input": {
                    "value": "self.mu * self.mu + diff * diff",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/losses/iou_loss.py": {
        "torch": {
            "stack_60": {
                "variable": {
                    "value": "loss_comb",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss_dx, loss_dy, loss_dw, loss_dh]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "where_64": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "loss_comb < beta",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * loss_comb * loss_comb / beta",
                    "possible_values": []
                },
                "y": {
                    "value": "loss_comb - 0.5 * beta",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "(target_w - 2 * dx.abs()) / (target_w + 2 * dx.abs() + eps)",
                    "possible_values": []
                }
            },
            "max_54": {
                "input": {
                    "value": "(target_h - 2 * dy.abs()) / (target_h + 2 * dy.abs() + eps)",
                    "possible_values": []
                }
            },
            "min_58": {
                "input": {
                    "value": "target_w / (pred_w + eps)",
                    "possible_values": []
                }
            },
            "min_59": {
                "input": {
                    "value": "target_h / (pred_h + eps)",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "dx",
                    "possible_values": [
                        [
                            "target_ctrx - pred_ctrx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_56": {
                "input": {
                    "value": "dy",
                    "possible_values": [
                        [
                            "target_ctry - pred_ctry",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_87": {
                "input": {
                    "value": "weight > 0",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/losses/losses.py": {
        "torch": {
            "zeros_46": {
                "variable": {
                    "value": "dense",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_493": {
                "variable": {
                    "value": "loss_ftor",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "abs_185": {
                "variable": {
                    "value": "abs_diff",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "le_186": {
                "variable": {
                    "value": "abs_diff_lt_1",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_diff",
                    "possible_values": [
                        [
                            "torch.abs(diff)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 / self._sigma ** 2",
                    "possible_values": []
                }
            },
            "sort_226": {
                "variable": {
                    "value": "(sorted, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ],
                        [
                            "target_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([target_tensor, target_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "target_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([target_tensor, target_tensor_2], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "target_tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_tensor, target_tensor_2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "prediction_tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prediction_tensor, prediction_tensor_2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weights, 1.0 * weights[:-1]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "abs_241": {
                "variable": {
                    "value": "abs_diff",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "le_242": {
                "variable": {
                    "value": "abs_diff_lt_1",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_diff",
                    "possible_values": [
                        [
                            "torch.abs(diff)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 / self._sigma ** 2",
                    "possible_values": []
                }
            },
            "sort_276": {
                "variable": {
                    "value": "(sorted, indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ],
                        [
                            "target_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([target_tensor, target_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "target_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([target_tensor, target_tensor_2], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "target_tensor_2",
                    "possible_values": []
                },
                "input": {
                    "value": "target_tensor[0:-1] - target_tensor[1:]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "prediction_tensor_2",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_tensor[0:-1] - prediction_tensor[1:]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "target_tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_tensor, target_tensor_2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "prediction_tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prediction_tensor, prediction_tensor_2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weights, 1.0 * weights[:-1]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "abs_291": {
                "variable": {
                    "value": "abs_diff",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ],
                        [
                            "prediction_tensor - target_tensor",
                            "BinOp"
                        ],
                        [
                            "self._code_weights.view(1, 1, -1).to(diff.device) * diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "le_292": {
                "variable": {
                    "value": "abs_diff_lt_1",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_diff",
                    "possible_values": [
                        [
                            "torch.abs(diff)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 / self._sigma ** 2",
                    "possible_values": []
                }
            },
            "log1p_361": {
                "input": {
                    "value": "torch.exp(-torch.abs(logits))",
                    "possible_values": []
                }
            },
            "sigmoid_404": {
                "variable": {
                    "value": "prediction_probabilities",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_469": {
                "variable": {
                    "value": "prediction_probabilities",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "div_527": {
                "variable": {
                    "value": "prediction_tensor",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._logit_scale",
                    "possible_values": []
                }
            },
            "where_83": {
                "variable": {
                    "value": "target_tensor",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(target_tensor)",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ],
                        [
                            "target_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([target_tensor, target_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "target_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([target_tensor, target_tensor_2], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_198": {
                "variable": {
                    "value": "anchorwise_smooth_l1norm",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "torch.clamp(logits, min=0) - logits * labels.type_as(logits)",
                            "BinOp"
                        ],
                        [
                            "loss + torch.log1p(torch.exp(-torch.abs(logits)))",
                            "BinOp"
                        ],
                        [
                            "loss_ftor(logits, labels.max(dim=-1)[1])",
                            "Call"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_254": {
                "variable": {
                    "value": "anchorwise_smooth_l1norm",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "torch.clamp(logits, min=0) - logits * labels.type_as(logits)",
                            "BinOp"
                        ],
                        [
                            "loss + torch.log1p(torch.exp(-torch.abs(logits)))",
                            "BinOp"
                        ],
                        [
                            "loss_ftor(logits, labels.max(dim=-1)[1])",
                            "Call"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_304": {
                "variable": {
                    "value": "anchorwise_smooth_l1norm",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "torch.clamp(logits, min=0) - logits * labels.type_as(logits)",
                            "BinOp"
                        ],
                        [
                            "loss + torch.log1p(torch.exp(-torch.abs(logits)))",
                            "BinOp"
                        ],
                        [
                            "loss_ftor(logits, labels.max(dim=-1)[1])",
                            "Call"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ],
                        [
                            "abs_diff_lt_1 * 0.5 * torch.pow(abs_diff * self._sigma, 2) + (abs_diff - 0.5 / self._sigma ** 2) * (1.0 - abs_diff_lt_1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "clamp_360": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "logits.permute(*transpose_param)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "exp_361": {
                "input": {
                    "value": "-torch.abs(logits)",
                    "possible_values": []
                }
            },
            "pow_409": {
                "variable": {
                    "value": "modulating_factor",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - p_t",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self._gamma",
                    "possible_values": []
                }
            },
            "pow_475": {
                "variable": {
                    "value": "modulating_factor",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - p_t",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self._gamma",
                    "possible_values": []
                }
            },
            "where_478": {
                "variable": {
                    "value": "alpha_weight_factor",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_tensor[..., 0] == 1",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(1 - self._alpha).type_as(per_entry_cross_ent)",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(self._alpha).type_as(per_entry_cross_ent)",
                    "possible_values": []
                }
            },
            "isnan_84": {
                "input": {
                    "value": "target_tensor",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target_tensor), prediction_tensor, target_tensor)",
                            "Call"
                        ],
                        [
                            "target_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([target_tensor, target_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "target_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([target_tensor, target_tensor_2], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "self._code_weights",
                    "possible_values": []
                }
            },
            "pow_191": {
                "input": {
                    "value": "abs_diff * self._sigma",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_247": {
                "input": {
                    "value": "abs_diff * self._sigma",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_297": {
                "input": {
                    "value": "abs_diff * self._sigma",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "abs_361": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "logits.permute(*transpose_param)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_480": {
                "data": {
                    "value": "1 - self._alpha",
                    "possible_values": []
                }
            },
            "tensor_481": {
                "data": {
                    "value": "self._alpha",
                    "possible_values": []
                }
            },
            "sigmoid_586": {
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_590": {
                "input": {
                    "value": "prediction_tensor",
                    "possible_values": [
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "prediction_tensor[indices.squeeze()]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([prediction_tensor, prediction_tensor_2], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.div(prediction_tensor, self._logit_scale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/models/losses/metrics.py": {
        "torch": {
            "sum_61": {
                "variable": {
                    "value": "num_examples",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "(labels != self._ignore_idx).float()",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ],
                        [
                            "(labels != self._ignore_idx).float()",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ],
                        [
                            "(labels != self._ignore_idx).float()",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ],
                        [
                            "(labels != self._ignore_idx).float()",
                            "Call"
                        ],
                        [
                            "weights.float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "num_examples",
                    "possible_values": []
                },
                "input": {
                    "value": "num_examples",
                    "possible_values": [
                        [
                            "torch.sum(weights)",
                            "Call"
                        ],
                        [
                            "torch.clamp(num_examples, min=1.0).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_63": {
                "variable": {
                    "value": "total",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred_labels == labels.long()).float()",
                    "possible_values": []
                }
            },
            "clamp_269": {
                "variable": {
                    "value": "prec_count",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prec_count",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_270": {
                "variable": {
                    "value": "rec_count",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rec_count",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "where_46": {
                "variable": {
                    "value": "pred_labels",
                    "possible_values": []
                },
                "condition": {
                    "value": "(scores > self._threshold).any(self._dim)",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_pred",
                    "possible_values": [
                        [
                            "torch.max(preds, dim=self._dim)[1] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(0).type_as(labels_pred)",
                    "possible_values": []
                }
            },
            "sigmoid_227": {
                "variable": {
                    "value": "total_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "max_247": {
                "input": {
                    "value": "total_scores",
                    "possible_values": [
                        [
                            "torch.sigmoid(preds)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(preds)[..., 1:]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(preds, dim=-1)[..., 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_52": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._dim",
                    "possible_values": []
                }
            },
            "max_96": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._dim",
                    "possible_values": []
                }
            },
            "max_148": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._dim",
                    "possible_values": []
                }
            },
            "max_45": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._dim",
                    "possible_values": []
                }
            },
            "sigmoid_231": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "softmax_233": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/losses/mse_loss.py": {
        "torch": {}
    },
    "det3d/models/losses/smooth_l1_loss.py": {
        "torch": {
            "abs_12": {
                "variable": {
                    "value": "diff",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/losses/utils.py": {
        "torch": {}
    },
    "det3d/models/necks/fpn.py": {
        "torch": {
            "ModuleList_51": {
                "variable": {
                    "value": "self.lateral_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.fpn_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "input": {
                    "value": "laterals[i]",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "max_pool2d_131": {
                "input": {
                    "value": "outs[-1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "relu_141": {
                "input": {
                    "value": "outs[-1]",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/necks/rpn.py": {
        "torch": {
            "ModuleList_72": {
                "variable": {
                    "value": "self.blocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[nn.Conv2d(num_input_features, layers[0], 1, bias=False), build_norm_layer(self._norm_cfg, layers[0])[1], nn.ReLU(), nn.Conv2d(layers[0], layers[1], 1, bias=False), build_norm_layer(self._norm_cfg, layers[1])[1], nn.ReLU()]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.deblocks",
                    "possible_values": []
                },
                "modules": {
                    "value": "deblocks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.pn",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[nn.Conv2d(num_input_features, layers[0], 1, bias=False), build_norm_layer(self._norm_cfg, layers[0])[1], nn.ReLU(), nn.Conv2d(layers[0], layers[1], 1, bias=False), build_norm_layer(self._norm_cfg, layers[1])[1], nn.ReLU()]",
                            "List"
                        ]
                    ]
                }
            },
            "MaxPool1d_177": {
                "variable": {
                    "value": "self.out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ups",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ZeroPad2d_119": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "num_input_features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "layers[0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "layers[0]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "layers[1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_60": {
                "in_channels": {
                    "value": "num_out_filters",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._num_upsample_filters[i - self._upsample_start_idx]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._upsample_strides[i - self._upsample_start_idx]",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._upsample_strides[i - self._upsample_start_idx]",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/necks/rpn_v1.py": {
        "torch": {
            "softmax_137": {
                "variable": {
                    "value": "x_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([x_weight_0, x_weight_1], dim=1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ZeroPad2d_41": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_84": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_90": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "[x_weight_0, x_weight_1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/readers/cropped_voxel_encoder.py": {
        "torch": {
            "device_11": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "batch_targets",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(batch_targets)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "batch_data[ground_plane]",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_data['ground_plane']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "batch_data[k]",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "batch_data[k]",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/models/readers/pillar_encoder.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.units",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "self.pfn_layers",
                    "possible_values": []
                },
                "modules": {
                    "value": "pfn_layers",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "f_center",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :2]",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features_ls",
                    "possible_values": [
                        [
                            "[features, f_cluster, f_center]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "batch_canvas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_canvas",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_canvas, 0)",
                            "Call"
                        ],
                        [
                            "batch_canvas.view(batch_size, self.nchannels, self.ny, self.nx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "x_concatenated",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_repeat]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "norm_138": {
                "variable": {
                    "value": "points_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :3]",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "canvas",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.nchannels",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nx * self.ny",
                    "possible_values": []
                },
                "dtype": {
                    "value": "voxel_features.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_features.device",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/readers/voxel_encoder.py": {
        "torch": {
            "relu_33": {
                "variable": {
                    "value": "pointwise",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_40": {
                "variable": {
                    "value": "concatenated",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pointwise, repeated]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ],
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.vfe_layers",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VFELayer(i, o, use_norm) for (i, o) in filters_pairs]",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ],
                        [
                            "get_paddings_indicator(num_voxels, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.cat([features, features_relative, points_dist], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative, points_dist], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative], dim=-1)",
                            "Call"
                        ],
                        [
                            "vfe(features)",
                            "Call"
                        ],
                        [
                            "features * mask",
                            "BinOp"
                        ],
                        [
                            "self.linear(features)",
                            "Call"
                        ],
                        [
                            "self.norm(features.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "points_mean",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points_mean, 1.0 / num_voxels.to(torch.float32).view(-1, 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "norm_232": {
                "variable": {
                    "value": "feature",
                    "possible_values": []
                },
                "input": {
                    "value": "points_mean[:, :2]",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature, points_mean[:, 2:self.num_input_features]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "norm_87": {
                "variable": {
                    "value": "points_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :3]",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative, points_dist]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "norm_156": {
                "variable": {
                    "value": "points_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "features[:, :, :3]",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative, points_dist]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, features_relative]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "max_36": {
                "input": {
                    "value": "pointwise",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_107": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.vfe1(features)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.vfe2(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_175": {
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.cat([features, features_relative, points_dist], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative, points_dist], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features, features_relative], dim=-1)",
                            "Call"
                        ],
                        [
                            "vfe(features)",
                            "Call"
                        ],
                        [
                            "features * mask",
                            "BinOp"
                        ],
                        [
                            "self.linear(features)",
                            "Call"
                        ],
                        [
                            "self.norm(features.permute(0, 2, 1).contiguous()).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/utils/conv_module.py": {
        "torch": {
            "ReLU_142": {
                "variable": {
                    "value": "self.activate",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/models/utils/conv_ws.py": {
        "torch": {
            "conv2d_13": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "(weight - mean) / (std + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/models/utils/misc.py": {
        "torch": {
            "unsqueeze_191": {
                "variable": {
                    "value": "actual_num",
                    "possible_values": []
                },
                "input": {
                    "value": "actual_num",
                    "possible_values": [
                        [
                            "torch.unsqueeze(actual_num, axis + 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis + 1",
                    "possible_values": []
                }
            },
            "arange_195": {
                "variable": {
                    "value": "max_num",
                    "possible_values": []
                },
                "start": {
                    "value": "max_num",
                    "possible_values": [
                        [
                            "torch.arange(max_num, dtype=torch.int, device=actual_num.device).view(max_num_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "possible_values": []
                },
                "device": {
                    "value": "actual_num.device",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/utils/norm.py": {
        "torch": {
            "stack_16": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_list",
                    "possible_values": [
                        [
                            "[torch.zeros_like(input) for k in range(dist.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "meansqr",
                    "possible_values": []
                },
                "input": {
                    "value": "input * input",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "vec",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mean, meansqr]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_47": {
                "variable": {
                    "value": "(mean, meansqr)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vec",
                    "possible_values": [
                        [
                            "torch.cat([mean, meansqr], dim=0)",
                            "Call"
                        ],
                        [
                            "AllReduce.apply(vec) * (1.0 / dist.get_world_size())",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "C",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rsqrt_52": {
                "variable": {
                    "value": "invstd",
                    "possible_values": []
                },
                "input": {
                    "value": "var + self.eps",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "torch.stack(input_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_13": {
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/utils/scale.py": {
        "torch": {
            "Parameter_8": {
                "variable": {
                    "value": "self.scale",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(scale, dtype=torch.float)",
                    "possible_values": []
                }
            },
            "tensor_8": {
                "data": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/models/utils/weight_init.py": {
        "torch": {}
    },
    "det3d/ops/align_aggregation/align_feature_and_aggregation.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[align_conv3, feature_conv3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.cat([align_conv3, feature_conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "self.correlation(embed_feature_current, embed_feature_select)",
                            "Call"
                        ],
                        [
                            "weights.reshape([weights.shape[0], -1, weights.shape[3], weights.shape[4]])",
                            "Call"
                        ],
                        [
                            "torch.softmax(weights, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "split_25": {
                "variable": {
                    "value": "weights_slice",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.cat([align_conv3, feature_conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "self.correlation(embed_feature_current, embed_feature_select)",
                            "Call"
                        ],
                        [
                            "weights.reshape([weights.shape[0], -1, weights.shape[3], weights.shape[4]])",
                            "Call"
                        ],
                        [
                            "torch.softmax(weights, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.embed_keyframe_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.embed_current_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.cat([align_conv3, feature_conv3], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(weights, dim=1)",
                            "Call"
                        ],
                        [
                            "self.correlation(embed_feature_current, embed_feature_select)",
                            "Call"
                        ],
                        [
                            "weights.reshape([weights.shape[0], -1, weights.shape[3], weights.shape[4]])",
                            "Call"
                        ],
                        [
                            "torch.softmax(weights, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/ops/align_aggregation/alignfeature/check.py": {
        "torch": {}
    },
    "det3d/ops/align_aggregation/alignfeature/functions/align_feature.py": {
        "torch": {}
    },
    "det3d/ops/align_aggregation/alignfeature/modules/align_feature.py": {
        "torch": {}
    },
    "det3d/ops/align_aggregation/alignfeature/setup.py": {
        "torch": {}
    },
    "det3d/ops/align_aggregation/correlation/check.py": {
        "torch": {
            "device_71": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "randn_73": {
                "variable": {
                    "value": "input1",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "args.channel",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.height",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.width",
                    "possible_values": []
                }
            },
            "randn_74": {
                "variable": {
                    "value": "input2",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "args.channel",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.height",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.width",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/ops/align_aggregation/correlation/functions/correlation.py": {
        "torch": {}
    },
    "det3d/ops/align_aggregation/correlation/modules/correlation.py": {
        "torch": {}
    },
    "det3d/ops/align_aggregation/correlation/setup.py": {
        "torch": {}
    },
    "det3d/ops/iou3d/iou3d_utils.py": {
        "torch": {}
    },
    "det3d/ops/iou3d/setup.py": {
        "torch": {}
    },
    "det3d/ops/pointnet2/pointnet2_modules.py": {
        "torch": {
            "ModuleList_113": {
                "variable": {
                    "value": "self.groupers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.mlps",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_318": {
                "variable": {
                    "value": "self.groupers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_319": {
                "variable": {
                    "value": "self.mlps",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_477": {
                "variable": {
                    "value": "self.groupers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_478": {
                "variable": {
                    "value": "self.mlps",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_545": {
                "seed": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "manual_seed_all_546": {
                "seed": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_pool2d_70": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "possible_values": []
                }
            },
            "max_pool2d_272": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "possible_values": []
                }
            },
            "max_pool2d_379": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "possible_values": []
                }
            },
            "sum_432": {
                "variable": {
                    "value": "norm",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_pool2d_524": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "possible_values": []
                }
            },
            "cat_539": {
                "tensors": {
                    "value": "new_features_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_539": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "randn_547": {
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "randn_548": {
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "new_features_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "avg_pool2d_276": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "possible_values": []
                }
            },
            "cat_386": {
                "tensors": {
                    "value": "new_features_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_530": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_features, features2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_282": {
                "variable": {
                    "value": "rbf",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * grouped_xyz.pow(2).sum(1, keepdim=False) / self.sigma ** 2 / 2",
                    "possible_values": []
                }
            },
            "sum_285": {
                "input": {
                    "value": "new_features * rbf.unsqueeze(1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/ops/pointnet2/pointnet2_utils.py": {
        "torch": {
            "zeros_344": {
                "variable": {
                    "value": "unique_cnt",
                    "possible_values": []
                },
                "*size": {
                    "value": "(idx.shape[0], idx.shape[1])",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "input": {
                    "value": "dist2",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "new_features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unique_347": {
                "variable": {
                    "value": "unique_ind",
                    "possible_values": []
                },
                "input": {
                    "value": "idx[i_batch, i_region, :]",
                    "possible_values": []
                }
            },
            "randint_350": {
                "variable": {
                    "value": "sample_ind",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "num_unique",
                    "possible_values": [
                        [
                            "unique_ind.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.nsample - num_unique,)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "all_ind",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unique_ind, unique_ind[sample_ind])",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/ops/pointnet2/pytorch_utils.py": {
        "torch": {
            "Linear_233": {
                "variable": {
                    "value": "fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_225": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/ops/pointnet2/setup.py": {
        "torch": {}
    },
    "det3d/ops/roipool3d/roipool3d_utils.py": {
        "torch": {
            "cat_127": {
                "variable": {
                    "value": "sampled_pts_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooled_pts, pooled_features[:, :, 0:extra_input_len])",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "ndarray": {
                    "value": "pts",
                    "possible_values": [
                        [
                            "pts.float().contiguous()",
                            "Call"
                        ],
                        [
                            "pts.cpu().float().contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "ndarray": {
                    "value": "pts_feature_all",
                    "possible_values": [
                        [
                            "np.concatenate((pts_extra_input, pts_feature), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "pooled_boxes3d",
                    "possible_values": [
                        [
                            "kitti_utils.enlarge_box3d(boxes3d.view(-1, 7), pool_extra_width).view(batch_size, -1, 7)",
                            "Call"
                        ],
                        [
                            "kitti_utils.enlarge_box3d(boxes3d, pool_extra_width)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/ops/roipool3d/setup.py": {
        "torch": {}
    },
    "det3d/ops/rroi_align/RoI.py": {
        "torch": {}
    },
    "det3d/ops/rroi_align/grad_check.py": {
        "torch": {
            "from_numpy_8": {
                "variable": {
                    "value": "fmap",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ones((128, 128)) * 0",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 54.0, 54, 16, 8, 0.2], [0.0, 54.0, 54, 16, 8, -0.2]]",
                    "possible_values": []
                }
            },
            "gradcheck_33": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "func": {
                    "value": "RRoIFunc.apply",
                    "possible_values": []
                },
                "inputs": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "[fmap, rois, pooled_height, pooled_width, scale, ratio]",
                            "List"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/ops/rroi_align/setup.py": {
        "torch": {}
    },
    "det3d/ops/sigmoid_focal_loss/sigmoid_focal_loss.py": {
        "torch": {}
    },
    "det3d/ops/syncbn/syncbn.py": {
        "torch": {
            "batch_norm_167": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / float(self.num_batches_tracked)",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/solver/fastai_optim.py": {
        "torch": {
            "Sequential_24": {
                "*args": {
                    "value": "*l2",
                    "possible_values": []
                }
            },
            "parameters_to_vector_39": {
                "variable": {
                    "value": "mp",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[param.data.float() for param in lg]",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "mp",
                    "possible_values": []
                },
                "data": {
                    "value": "mp",
                    "possible_values": [
                        [
                            "master_params",
                            "Name"
                        ],
                        [
                            "parameters_to_vector([param.data.float() for param in lg])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(mp, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "parameters_to_vector_63": {
                "parameters": {
                    "value": "[p.grad.data.float() for p in model_group]",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/solver/learning_schedules.py": {
        "torch": {}
    },
    "det3d/solver/optim.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "param.grad",
                    "possible_values": []
                },
                "data": {
                    "value": "param.data.new().resize_(*param.data.size())",
                    "possible_values": []
                }
            },
            "isnan_29": {
                "input": {
                    "value": "grad",
                    "possible_values": [
                        [
                            "param_w_grad.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad / scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_29": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "isinf_29": {
                "input": {
                    "value": "grad",
                    "possible_values": [
                        [
                            "param_w_grad.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad / scale",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/torchie/apis/env.py": {
        "torch": {
            "device_count_29": {
                "variable": {
                    "value": "num_gpus",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_count_42": {
                "variable": {
                    "value": "num_gpus",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_30": {
                "device": {
                    "value": "rank % num_gpus",
                    "possible_values": []
                }
            },
            "set_device_43": {
                "device": {
                    "value": "proc_id % num_gpus",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "manual_seed_all_58": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/apis/train.py": {
        "torch": {
            "device_144": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "kwargs['local_rank']",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_283": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda(cfg.local_rank)",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[cfg.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "cfg.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "*args": {
                    "value": "*flatten_model(m)",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "vv",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "calib[k1]",
                    "possible_values": []
                },
                "data": {
                    "value": "v1",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "vv",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "calib[k1]",
                    "possible_values": []
                },
                "data": {
                    "value": "v1",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "vv",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/cnn/alexnet.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.features",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2)",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "192",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "384",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_31": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/torchie/cnn/resnet.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv1_stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "stride",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv2_stride",
                    "possible_values": [
                        [
                            "stride",
                            "Name"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn3",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_247": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_248": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_249": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/cnn/vgg.py": {
        "torch": {
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "ceil_mode",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "*args": {
                    "value": "*vgg_layers",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "planes",
                    "possible_values": [
                        [
                            "64 * 2 ** i if i < 4 else 512",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/torchie/cnn/weight_init.py": {
        "torch": {}
    },
    "det3d/torchie/parallel/_functions.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "devices[0]",
                    "possible_values": []
                }
            },
            "current_stream_40": {
                "variable": {
                    "value": "main_stream",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "devices[0]",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/parallel/collate.py": {
        "torch": {
            "tensor_101": {
                "variable": {
                    "value": "ret[key]",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate(elems, axis=0)",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "ret[key][k1]",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(v1, axis=0)",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "ret[key]",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate(coors, axis=0)",
                    "possible_values": []
                }
            },
            "pad_61": {
                "input": {
                    "value": "sample.data",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "[0 for _ in range(batch[i].pad_dims * 2)]",
                            "ListComp"
                        ]
                    ]
                },
                "value": {
                    "value": "sample.padding_value",
                    "possible_values": []
                }
            },
            "stack_145": {
                "tensors": {
                    "value": "vv",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "ele",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/parallel/data_container.py": {
        "torch": {}
    },
    "det3d/torchie/parallel/data_parallel.py": {
        "torch": {}
    },
    "det3d/torchie/parallel/distributed.py": {
        "torch": {
            "broadcast_22": {
                "tensor": {
                    "value": "flat_tensors",
                    "possible_values": [
                        [
                            "_flatten_dense_tensors(tensors)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "current_device_44": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/parallel/scatter_gather.py": {
        "torch": {}
    },
    "det3d/torchie/trainer/checkpoint.py": {
        "torch": {
            "save_214": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "model_zoo.load_url(url)",
                            "Call"
                        ],
                        [
                            "model_zoo.load_url(url)",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(open_mmlab_model_urls[model_name])",
                            "Call"
                        ],
                        [
                            "load_url_dist(filename)",
                            "Call"
                        ],
                        [
                            "torch.load(filename, map_location=map_location)",
                            "Call"
                        ],
                        [
                            "{'meta': meta, 'state_dict': weights_to_cpu(model.state_dict())}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "det3d/torchie/trainer/hooks/logger/tensorboard.py": {
        "torch": {
            "SummaryWriter_29": {
                "variable": {
                    "value": "self.writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.log_dir",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/trainer/hooks/logger/text.py": {
        "torch": {
            "max_memory_allocated_23": {
                "variable": {
                    "value": "mem",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "mem_mb",
                    "possible_values": []
                },
                "data": {
                    "value": "[mem / (1024 * 1024)]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_24": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/trainer/hooks/memory.py": {
        "torch": {
            "empty_cache_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/trainer/hooks/optimizer.py": {
        "torch": {
            "clip_grad_norm__17": {
                "parameters": {
                    "value": "filter(lambda p: p.requires_grad, params)",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/trainer/parallel_test.py": {
        "torch": {
            "set_device_21": {
                "device": {
                    "value": "gpu_id",
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/trainer/trainer.py": {
        "torch": {
            "device_299": {
                "variable": {
                    "value": "cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_235": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "kwargs['local_rank']",
                    "possible_values": []
                }
            },
            "current_device_240": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_304": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "current_device_341": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/torchie/trainer/utils.py": {
        "torch": {
            "is_initialized_26": {
                "variable": {
                    "value": "initialized",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_91": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_107": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/utils/checkpoint.py": {
        "torch": {
            "as_tensor_71": {
                "variable": {
                    "value": "match_matrix",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_179": {
                "obj": {
                    "value": "data",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_238": {
                "f": {
                    "value": "f",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file(f)",
                            "Call"
                        ],
                        [
                            "self.get_checkpoint_file(self.save_dir)",
                            "Call"
                        ],
                        [
                            "self.get_checkpoint_file(ckpt_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "possible_values": []
                }
            },
            "device_238": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/utils/dist/collect_env.py": {
        "torch": {}
    },
    "det3d/utils/dist/dist_common.py": {
        "torch": {
            "cat_80": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/utils/flops_counter.py": {
        "torch": {
            "ones_75": {
                "variable": {
                    "value": "batch",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "possible_values": []
                }
            }
        }
    },
    "det3d/utils/imports.py": {
        "torch": {}
    },
    "det3d/utils/utils.py": {
        "torch": {
            "device_8": {
                "type": {
                    "value": "cuda:0",
                    "possible_values": []
                }
            },
            "cat_16": {
                "tensors": {
                    "value": "vv",
                    "possible_values": [
                        [
                            "[vvv.unsqueeze_(0) for vvv in vv]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    },
    "tools/test.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_53": {
                "variable": {
                    "value": "cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "dataloader.dataset",
                            "Attribute"
                        ],
                        [
                            "build_dataset(cfg.data.val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "cfg.data.samples_per_gpu",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "cfg.data.workers_per_gpu",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_kitti",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_v3.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_53": {
                "variable": {
                    "value": "cpu_device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "dataloader.dataset",
                            "Attribute"
                        ],
                        [
                            "build_dataset(cfg.data.test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "cfg.data.samples_per_gpu",
                            "Attribute"
                        ]
                    ]
                },
                "sampler": {
                    "value": "None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "cfg.data.workers_per_gpu",
                            "Attribute"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_kitti",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "set_device_73": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            }
        }
    }
}