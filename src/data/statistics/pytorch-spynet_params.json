{
    "run.py": {
        "torch": {
            "set_grad_enabled_15": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "tenFlow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenFlow[:, 0:1, :, :] / ((tenInput.shape[3] - 1.0) / 2.0), tenFlow[:, 1:2, :, :] / ((tenInput.shape[2] - 1.0) / 2.0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_153": {
                "variable": {
                    "value": "tenPreprocessedOne",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tenPreprocessedOne",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tenOne.cuda().view(1, 3, intHeight, intWidth)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=tenPreprocessedOne, size=(intPreprocessedHeight, intPreprocessedWidth), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(intPreprocessedHeight, intPreprocessedWidth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_154": {
                "variable": {
                    "value": "tenPreprocessedTwo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tenPreprocessedTwo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tenTwo.cuda().view(1, 3, intHeight, intWidth)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=tenPreprocessedTwo, size=(intPreprocessedHeight, intPreprocessedWidth), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(intPreprocessedHeight, intPreprocessedWidth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_156": {
                "variable": {
                    "value": "tenFlow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "netNetwork(tenPreprocessedOne, tenPreprocessedTwo)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(intHeight, intWidth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_39": {
                "variable": {
                    "value": "tenHor",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0 + 1.0 / tenFlow.shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 - 1.0 / tenFlow.shape[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "tenFlow.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_40": {
                "variable": {
                    "value": "tenVer",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0 + 1.0 / tenFlow.shape[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 - 1.0 / tenFlow.shape[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "tenFlow.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "backwarp_tenGrid[str(tenFlow.shape)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tenHor, tenVer]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_47": {
                "input": {
                    "value": "tenInput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tenInput.flip([1])",
                            "Call"
                        ],
                        [
                            "tenInput - torch.tensor(data=[0.485, 0.456, 0.406], dtype=tenInput.dtype, device=tenInput.device).view(1, 3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "tenInput * torch.tensor(data=[1.0 / 0.229, 1.0 / 0.224, 1.0 / 0.225], dtype=tenInput.dtype, device=tenInput.device).view(1, 3, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "tenInput",
                            "Method Argument"
                        ],
                        [
                            "tenInput",
                            "Method Argument"
                        ],
                        [
                            "tenInput",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "(backwarp_tenGrid[str(tenFlow.shape)] + tenFlow).permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.netBasic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Basic(intLevel) for intLevel in range(6)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.netBasic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels=8, out_channels=32, kernel_size=7, stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_117": {
                "variable": {
                    "value": "tenUpsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tenUpsampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(input=tenFlow, scale_factor=2, mode='bilinear', align_corners=True) * 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(input=tenUpsampled, pad=[0, 0, 0, 1], mode='replicate')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(input=tenUpsampled, pad=[0, 1, 0, 0], mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_118": {
                "variable": {
                    "value": "tenUpsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tenUpsampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(input=tenFlow, scale_factor=2, mode='bilinear', align_corners=True) * 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(input=tenUpsampled, pad=[0, 0, 0, 1], mode='replicate')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(input=tenUpsampled, pad=[0, 1, 0, 0], mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_13": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_115": {
                "input": {
                    "value": "tenFlow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tenFlow[:, 0:1, :, :] / ((tenInput.shape[3] - 1.0) / 2.0), tenFlow[:, 1:2, :, :] / ((tenInput.shape[2] - 1.0) / 2.0)], 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(input=netNetwork(tenPreprocessedOne, tenPreprocessedTwo), size=(intHeight, intWidth), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tenOne[0].new_zeros([tenOne[0].shape[0], 2, int(math.floor(tenOne[0].shape[2] / 2.0)), int(math.floor(tenOne[0].shape[3] / 2.0))])",
                            "Call"
                        ],
                        [
                            "self.netBasic[intLevel](torch.cat([tenOne[intLevel], backwarp(tenInput=tenTwo[intLevel], tenFlow=tenUpsampled), tenUpsampled], 1)) + tenUpsampled",
                            "BinOp"
                        ],
                        [
                            "tenFlow",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tenInput.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tenInput.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "[1.0 / 0.229, 1.0 / 0.224, 1.0 / 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tenInput.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tenInput.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_107": {
                "input": {
                    "value": "tenOne[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.FloatTensor(numpy.ascontiguousarray(numpy.array(PIL.Image.open(arguments_strOne))[:, :, ::-1].transpose(2, 0, 1).astype(numpy.float32) * (1.0 / 255.0)))",
                            "Call"
                        ],
                        [
                            "[self.netPreprocess(tenOne)]",
                            "List"
                        ],
                        [
                            "tenOne",
                            "Method Argument"
                        ],
                        [
                            "tenOne",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_108": {
                "input": {
                    "value": "tenTwo[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.FloatTensor(numpy.ascontiguousarray(numpy.array(PIL.Image.open(arguments_strTwo))[:, :, ::-1].transpose(2, 0, 1).astype(numpy.float32) * (1.0 / 255.0)))",
                            "Call"
                        ],
                        [
                            "[self.netPreprocess(tenTwo)]",
                            "List"
                        ],
                        [
                            "tenTwo",
                            "Method Argument"
                        ],
                        [
                            "tenTwo",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[tenOne[intLevel], backwarp(tenInput=tenTwo[intLevel], tenFlow=tenUpsampled), tenUpsampled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}