{
    "3rdparty/replicate/predict.py": {
        "tensorflow": {
            "ConfigProto_49": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "n_threads_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "n_threads_inter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_54": {
                "variable": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_55": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(intra_op_parallelism_threads=n_threads_intra, inter_op_parallelism_threads=n_threads_inter)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GraphDef_65": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_64": {
                "name": {
                    "value": "self._pb_file_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_67": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "discriminator/discriminator_patch.py": {
        "tensorflow": {
            "identity_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling2d(x, pool_size=3, strides=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "conv(x, channels=1, kernel=1, stride=1, sn=self._sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, 'D_logits_patch')",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=4, stride=2, pad=1, sn=self._sn)",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "D_logits_patch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dis'",
                            "Method Argument"
                        ],
                        [
                            "'scale_0'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_pooling2d_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.average_pooling2d(x, pool_size=3, strides=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "conv(x, channels=1, kernel=1, stride=1, sn=self._sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, 'D_logits_patch')",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=4, stride=2, pad=1, sn=self._sn)",
                            "Call"
                        ],
                        [
                            "lrelu(x, 0.2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dis'",
                            "Method Argument"
                        ],
                        [
                            "'scale_0'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "'down_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "discriminator/discriminator_spatch.py": {
        "tensorflow": {
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dis'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits_mix'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dis'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits_mix'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dis'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits'",
                            "Method Argument"
                        ],
                        [
                            "'dis_logits_mix'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_61": {
                "variable": {
                    "value": "x_gap_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gap_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mlp_logits(x_gap)",
                            "Call"
                        ],
                        [
                            "tf.identity(x_gap_logits, 'D_logits_gap')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "D_logits_gap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_68": {
                "variable": {
                    "value": "x_gmp_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_gmp_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mlp_logits(x_gmp)",
                            "Call"
                        ],
                        [
                            "tf.identity(x_gmp_logits, 'D_logits_gmp')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "D_logits_gmp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_74": {
                "variable": {
                    "value": "x_diff_square",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x - tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "variable": {
                    "value": "x_stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_avg_pooling(x_diff_square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_77": {
                "variable": {
                    "value": "x_stddev_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_stddev_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mlp_logits(x_stddev)",
                            "Call"
                        ],
                        [
                            "tf.identity(x_stddev_logits, 'D_logits_stddev')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "D_logits_stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "'down_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "'scale_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "'premix_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "gap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "gmp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channel, kernel=4, stride=2, pad=1, sn=self._sn)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=4, stride=2, pad=1, sn=self._sn, scope='conv_k4')",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, sn=self._sn)",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "fully_connected(x, units=channel, sn=self._sn, scope='mix_' + str(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "fully_connected(x, units=1, sn=self._sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "conv(x, channels=channel, kernel=1, stride=1, sn=self._sn, scope='mix_' + str(i))",
                            "Call"
                        ],
                        [
                            "lrelu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=1, kernel=1, stride=1, sn=self._sn, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "frozen_model/image_translator.py": {
        "tensorflow": {
            "set_verbosity_10": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_15": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "n_threads_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "n_threads_inter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_20": {
                "variable": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_21": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=n_threads_intra, inter_op_parallelism_threads=n_threads_inter)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "self._graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GraphDef_31": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_30": {
                "name": {
                    "value": "self._pb_file_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_33": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "gan/gan.py": {
        "tensorflow": {
            "placeholder_52": {
                "variable": {
                    "value": "self._test_domain_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self._img_size, self._img_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "test_domain_A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_55": {
                "variable": {
                    "value": "self._test_fake_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "test_fake_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gen.translate(self._test_domain_a, scope='gen_a2b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "test_fake_B",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_104": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_118": {
                "variable": {
                    "value": "frozen_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "self._sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "['test_fake_B']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_133": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_67": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan/spatchgan.py": {
        "tensorflow": {
            "placeholder_112": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_165": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_169": {
                "variable": {
                    "value": "self._optim_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_171": {
                "variable": {
                    "value": "self._optim_dis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_188": {
                "variable": {
                    "value": "self._summary_gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summary_list_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_195": {
                "variable": {
                    "value": "self._summary_dis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summary_list_dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_200": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_201": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self._log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self._sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "self._aba_lowres",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, self._resolution_bw, self._resolution_bw, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prefetch_to_device_106": {
                "device": {
                    "value": "gpu_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0'",
                            "str"
                        ]
                    ]
                },
                "buffer_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "input": {
                    "value": "self._domain_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_181": {
                "name": {
                    "value": "gen_loss_all",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._gen_loss_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_182": {
                "name": {
                    "value": "adv_loss_gen_ab",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "adv_loss_gen_ab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._adv_weight * adv_loss(ab_logits, self._gan_type, target='real')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_183": {
                "name": {
                    "value": "id_loss_bb",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "id_loss_bb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._id_weight * l1_loss(self._domain_b, self._x_bb) if self._id_weight > 0.0 else 0.0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_184": {
                "name": {
                    "value": "cyc_loss_aba",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc_loss_aba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._cyc_weight * l1_loss(self._a_lowres, self._aba_lowres) if self._cyc_weight > 0.0 else 0.0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_185": {
                "name": {
                    "value": "reg_loss_gen",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_loss_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._reg_weight * regularization_loss('gen_')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_191": {
                "name": {
                    "value": "dis_loss_all",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._dis_loss_all",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_192": {
                "name": {
                    "value": "adv_loss_dis_b",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "adv_loss_dis_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._adv_weight * adv_loss(b_logits, self._gan_type, target='real')",
                            "BinOp"
                        ],
                        [
                            "adv_loss_dis_b + self._adv_weight * adv_loss(ab_logits, self._gan_type, target='fake')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_193": {
                "name": {
                    "value": "reg_loss_dis",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_loss_dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._reg_weight * regularization_loss('dis_')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_and_batch_104": {
                "map_func": {
                    "value": "imgdata.image_processing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_103": {
                "buffer_size": {
                    "value": "self._dataset_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "generator/generator_basic_res.py": {
        "tensorflow": {
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gen'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(x, channel, kernel=3, stride=2, pad=1)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self._conv_block(x, block_type=self._block_type, channel=channel)",
                            "Call"
                        ],
                        [
                            "self._upsample(x, method=self._upsample_type)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, stride=1, pad=1)",
                            "Call"
                        ],
                        [
                            "layer_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels=3, kernel=3, pad=1, scope='G_logit')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, 'pre_tanh')",
                            "Call"
                        ],
                        [
                            "tanh(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, stride=1, pad=1)",
                            "Call"
                        ],
                        [
                            "layer_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "resblock_v1(x, channel=channel, scope=scope)",
                            "Call"
                        ],
                        [
                            "nearest_up(x)",
                            "Call"
                        ],
                        [
                            "bilinear_up(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pre_tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "'down_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "mix_init",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "'res_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "'up_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "mix_end",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "'mix_{}'.format(j)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "imagedata.py": {
        "tensorflow": {
            "resize_28": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[size_out, size_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_jpeg_quality_31": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "min_jpeg_quality": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "max_jpeg_quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size_out, size_out, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_36": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad_size, pad_size], [pad_size, pad_size], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_crop_37": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[size_out, size_out, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_44": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "aug_rand < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _ugatit_resize_crop(image, size_out)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.resize(image, [size_out, size_out])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_jpeg_quality_49": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "min_jpeg_quality": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "max_jpeg_quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size_out, size_out, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_58": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_59": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_60": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_61": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_62": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_crop_76": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[size_out, size_out, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_jpeg_12": {
                "variable": {
                    "value": "x_decode",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_46": {
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize(image, [size_out, size_out])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, paddings=[[pad_size, pad_size], [pad_size, pad_size], [0, 0]], constant_values=255)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.cond(aug_rand < 0.5, lambda : _ugatit_resize_crop(image, size_out), lambda : tf.image.resize(image, [size_out, size_out]))",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_jpeg_quality(image, min_jpeg_quality=50, max_jpeg_quality=100)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size_out, size_out, 3])",
                            "Call"
                        ],
                        [
                            "_augmentation_general(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.02)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.8, upper=1.2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, [augment_size, augment_size])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [size_out, size_out, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[size_out, size_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_23": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x_decode, [self._load_size, self._load_size])",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) / 127.5 - 1",
                            "BinOp"
                        ],
                        [
                            "_augmentation_pad_crop(x_decode, self._load_size)",
                            "Call"
                        ],
                        [
                            "_augmentation_resize_crop(x_decode, self._load_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "GPUOptions_13": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_14": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_14": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "random_normal_initializer_4": {
                "variable": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_150": {
                "variable": {
                    "value": "gmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_192": {
                "variable": {
                    "value": "collection_regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(u) if method == 'full' else u",
                            "IfExp"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_105": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_108": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_111": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(u) if method == 'full' else u",
                            "IfExp"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_112": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_129": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_134": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_139": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_158": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[h * scale_factor, w * scale_factor]",
                            "List"
                        ],
                        [
                            "[h * scale_factor, w * scale_factor]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_199": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.abs(x - y))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.squared_difference(logits, target_val)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss) / len(logits_list)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel, kernel, x.get_shape()[-1], channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "spectral_norm(w, method=sn)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels, units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(mean=0.0, stddev=0.02)",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(scale=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_97": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('u', [1, w_shape[-1]], initializer=tf.random_normal_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(u) if method == 'full' else u",
                            "IfExp"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_120": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'linear'",
                            "Method Argument"
                        ],
                        [
                            "'instance_norm'",
                            "Method Argument"
                        ],
                        [
                            "'layer_norm'",
                            "Method Argument"
                        ],
                        [
                            "'resblock_0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_186": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_214": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "target_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                }
            },
            "pad_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [channels], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('bias', [units], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w, method=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_104": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', shape=[kernel, kernel, x.get_shape()[-1], channels], initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', [channels, units], tf.float32, initializer=weight_init, regularizer=weight_regularizer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.abs(x - y))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.squared_difference(logits, target_val)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss) / len(logits_list)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input=x, filter=spectral_norm(w, method=sn), strides=[1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn)) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, spectral_norm(w, method=sn))",
                            "Call"
                        ],
                        [
                            "conv(x_init, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channel, kernel=3, pad=1, pad_type=pad_type, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "spectral_norm(w, method=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_40": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_63": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "trainable_variables_10": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "node_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_58": {
                "variable": {
                    "value": "node_stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(node - node_mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_43": {
                "variable": {
                    "value": "all_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_53": {
                "name": {
                    "value": "node.name + '_min'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(node)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_54": {
                "name": {
                    "value": "node.name + '_max'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(node)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_56": {
                "name": {
                    "value": "node.name + '_mean'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "node_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(node)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_58": {
                "input_tensor": {
                    "value": "tf.square(node - node_mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_59": {
                "name": {
                    "value": "node.name + '_stddev'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "node_stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(node - node_mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_min_53": {
                "input_tensor": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_max_54": {
                "input_tensor": {
                    "value": "node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes",
                            "variable"
                        ]
                    ]
                }
            },
            "square_58": {
                "x": {
                    "value": "node - node_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}