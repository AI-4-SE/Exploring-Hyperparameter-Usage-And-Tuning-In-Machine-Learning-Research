{
    "main.py": {
        "torch": {
            "NLLLoss_270": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_509": {
                "variable": {
                    "value": "data.HP_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_213": {
                "variable": {
                    "value": "mask[idx, :seqlen]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_272": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "data.HP_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_504": {
                "seed": {
                    "value": "seed_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adagrad_275": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_428": {
                "f": {
                    "value": "data.load_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "*size": {
                    "value": "(batch_size, label_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "*size": {
                    "value": "(batch_size, max_seq_len, max_word_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_279": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_281": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "main_parse.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "seed_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "NLLLoss_292": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_452": {
                "variable": {
                    "value": "data.HP_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_244": {
                "variable": {
                    "value": "mask[idx, :seqlen]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_294": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "data.HP_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_296": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_412": {
                "f": {
                    "value": "data.load_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_298": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_387": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.model_dir + '.' + str(idx) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_234": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "(batch_size, max_seq_len, max_word_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_300": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_302": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "data.HP_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "data.HP_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "model/charbigru.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_26": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirect_flag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_53": {
                "variable": {
                    "value": "pack_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_55": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_70": {
                "variable": {
                    "value": "pack_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_72": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/charbilstm.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_26": {
                "variable": {
                    "value": "self.char_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirect_flag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_53": {
                "variable": {
                    "value": "pack_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_55": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_70": {
                "variable": {
                    "value": "pack_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embeds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ],
                        [
                            "self.char_drop(self.char_embeddings(input))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_72": {
                "variable": {
                    "value": "(char_rnn_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "char_rnn_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/charcnn.py": {
        "torch": {
            "Dropout_18": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "variable": {
                    "value": "self.char_cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool1d_52": {
                "variable": {
                    "value": "char_cnn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_cnn_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.char_cnn(char_embeds)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(char_cnn_out, char_cnn_out.size(2)).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.char_cnn(char_embeds).transpose(2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "char_cnn_out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/crf.py": {
        "torch": {
            "max_25": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_26": {
                "variable": {
                    "value": "max_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1, 1, m_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "init_transitions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.tagset_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tagset_size + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_transitions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(self.tagset_size + 2, self.tagset_size + 2)",
                            "Call"
                        ],
                        [
                            "init_transitions.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_119": {
                "variable": {
                    "value": "length_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "partition_history",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "variable": {
                    "value": "partition_history",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_166": {
                "variable": {
                    "value": "last_partition",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ],
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_169": {
                "variable": {
                    "value": "(_, last_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "back_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_234": {
                "variable": {
                    "value": "length_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_236": {
                "variable": {
                    "value": "end_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "length_mask - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_239": {
                "variable": {
                    "value": "end_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_transition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transitions[:, STOP_TAG].contiguous().view(1, tag_size).expand(batch_size, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "end_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gather(tags, 1, length_mask - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_244": {
                "variable": {
                    "value": "tg_energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(seq_len, batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "new_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "autograd.Variable(torch.LongTensor(batch_size, seq_len))",
                            "Call"
                        ],
                        [
                            "new_tags.cuda()",
                            "Call"
                        ],
                        [
                            "new_tags.transpose(1, 0).contiguous().view(seq_len, batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_283": {
                "variable": {
                    "value": "length_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "partition_history",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "partition_history",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_340": {
                "variable": {
                    "value": "partition_history",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_343": {
                "variable": {
                    "value": "last_partition",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partition_history",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, -1).transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(partition_history, 0).view(seq_len, batch_size, tag_size, nbest).transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "last_position",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "length_mask.view(batch_size, 1, 1).expand(batch_size, 1, tag_size) - 1",
                            "BinOp"
                        ],
                        [
                            "length_mask.view(batch_size, 1, 1, 1).expand(batch_size, 1, tag_size, nbest) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_347": {
                "variable": {
                    "value": "(end_partition, end_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "last_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "last_partition.expand(batch_size, tag_size, tag_size) + self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_partition.expand(batch_size, tag_size, nbest, tag_size) + self.transitions.view(1, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "last_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "back_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "back_points",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(back_points).view(seq_len, batch_size, tag_size, nbest)",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "back_points.transpose(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_413": {
                "variable": {
                    "value": "(max_scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "feats + self.transitions.view(1, tag_size, tag_size).expand(ins_num, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "scores.view(seq_len, batch_size, tag_size, tag_size)",
                            "Call"
                        ],
                        [
                            "end_partition[:, :, STOP_TAG]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_415": {
                "variable": {
                    "value": "path_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minus_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scores - max_scores.view(batch_size, 1).expand(batch_size, nbest)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "torch.sum(torch.exp(vec - max_score.expand_as(vec)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_150": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_193": {
                "variable": {
                    "value": "pointer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_318": {
                "variable": {
                    "value": "(partition, cur_bp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "self.transitions.view(1, tag_size, tag_size).expand(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, tag_size) + partition.contiguous().view(batch_size, tag_size, 1).expand(batch_size, tag_size, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size, 1, tag_size).expand(batch_size, tag_size, nbest, tag_size) + partition.contiguous().view(batch_size, tag_size, nbest, 1).expand(batch_size, tag_size, nbest, tag_size)",
                            "BinOp"
                        ],
                        [
                            "cur_values.view(batch_size, tag_size * nbest, tag_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "nbest",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_395": {
                "variable": {
                    "value": "new_pointer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "back_points[idx].view(batch_size, tag_size * nbest)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pointer.contiguous().view(batch_size, nbest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "torch.exp(vec - max_score.expand_as(vec))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_351": {
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "scores.size(1)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "tag_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ],
                        [
                            "scores.size(2)",
                            "Call"
                        ],
                        [
                            "feats.size(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nbest",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_27": {
                "input": {
                    "value": "vec - max_score.expand_as(vec)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/lstm_attention.py": {
        "torch": {
            "LSTM_14": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "lstm_hidden * 4",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bilstm_flag",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.droplstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "data.HP_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_25": {
                "variable": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([lstm_out, label_attention_output], -1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "word_seq_lengths.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_27": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([lstm_out, label_attention_output], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_32": {
                "variable": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lstm_out, label_attention_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.Q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.num_units, self.num_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.K_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.num_units, self.num_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.V_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.num_units, self.num_units)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(Q, self.num_heads, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "K_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(K, self.num_heads, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(V, self.num_heads, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_74": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(torch.chunk(Q, self.num_heads, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K_.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_82": {
                "variable": {
                    "value": "query_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.sum(queries, dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "query_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sign(torch.abs(torch.sum(queries, dim=-1)))",
                            "Call"
                        ],
                        [
                            "query_masks.repeat(self.num_heads, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(query_masks, 2).repeat(1, 1, keys.size()[1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_91": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(Q_, K_.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "outputs / K_.size()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "self.output_dropout(outputs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(outputs, self.num_heads, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + queries",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "V_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(torch.chunk(V, self.num_heads, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_93": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.chunk(outputs, self.num_heads, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(Q_, K_.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "outputs / K_.size()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "self.output_dropout(outputs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(outputs, self.num_heads, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + queries",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_70": {
                "input": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Q_proj(queries)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_71": {
                "input": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.K_proj(keys)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_72": {
                "input": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.V_proj(values)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_82": {
                "input": {
                    "value": "torch.sum(queries, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_93": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(Q_, K_.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "outputs / K_.size()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "outputs * query_masks",
                            "BinOp"
                        ],
                        [
                            "self.output_dropout(outputs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.chunk(outputs, self.num_heads, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + queries",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/seqmodel.py": {
        "torch": {
            "max_52": {
                "variable": {
                    "value": "(_, tag_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.word_hidden(word_inputs, feature_inputs, word_seq_lengths, char_inputs, char_seq_lengths, char_seq_recover, input_label_seq_tensor)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size * seq_len, -1)",
                            "Call"
                        ],
                        [
                            "self.word_hidden(word_inputs, feature_inputs, word_seq_lengths, char_inputs, char_seq_lengths, char_seq_recover, input_label_seq_tensor)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size * seq_len, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_35": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_37": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.word_hidden(word_inputs, feature_inputs, word_seq_lengths, char_inputs, char_seq_lengths, char_seq_recover, input_label_seq_tensor)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size * seq_len, -1)",
                            "Call"
                        ],
                        [
                            "self.word_hidden(word_inputs, feature_inputs, word_seq_lengths, char_inputs, char_seq_lengths, char_seq_recover, input_label_seq_tensor)",
                            "Call"
                        ],
                        [
                            "outs.view(batch_size * seq_len, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_39": {
                "variable": {
                    "value": "(_, tag_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(outs, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/wordrep.py": {
        "torch": {
            "Dropout_44": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "data.HP_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_46": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data.word_alphabet.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_56": {
                "variable": {
                    "value": "self.label_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "data.label_alphabet_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.label_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "word_embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[word_embs]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "self.random_embedding_label(data.label_alphabet_size, self.label_dim, data.label_embedding_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "data.pretrain_word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "ndarray": {
                    "value": "self.random_embedding(data.word_alphabet.size(), self.embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_66": {
                "num_embeddings": {
                    "value": "data.feature_alphabets[idx].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.feature_embedding_dims[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "data.pretrain_feature_embeddings[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "self.random_embedding(data.feature_alphabets[idx].size(), self.feature_embedding_dims[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/wordsequence.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.droplstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "data.HP_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_38": {
                "variable": {
                    "value": "self.lstm_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bilstm_flag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_40": {
                "variable": {
                    "value": "self.lstm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "lstm_hidden * 4",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bilstm_flag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.lstm_attention_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LSTM_attention(lstm_hidden, self.bilstm_flag, data) for _ in range(int(self.num_of_lstm_layer) - 2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_78": {
                "variable": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "word_represent",
                            "Name"
                        ],
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([lstm_out, attention_label], -1)",
                            "Call"
                        ],
                        [
                            "layer(lstm_out, label_embs, word_seq_lengths, hidden)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "self.self_attention_last(lstm_out, label_embs, label_embs, True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "word_seq_lengths.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_81": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "word_represent",
                            "Name"
                        ],
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([lstm_out, attention_label], -1)",
                            "Call"
                        ],
                        [
                            "layer(lstm_out, label_embs, word_seq_lengths, hidden)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "self.self_attention_last(lstm_out, label_embs, label_embs, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lstm_out, attention_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_96": {
                "variable": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "word_represent",
                            "Name"
                        ],
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([lstm_out, attention_label], -1)",
                            "Call"
                        ],
                        [
                            "layer(lstm_out, label_embs, word_seq_lengths, hidden)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "self.self_attention_last(lstm_out, label_embs, label_embs, True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "word_seq_lengths.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_98": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "word_represent",
                            "Name"
                        ],
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.cat([lstm_out, attention_label], -1)",
                            "Call"
                        ],
                        [
                            "layer(lstm_out, label_embs, word_seq_lengths, hidden)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(input=lstm_out, lengths=word_seq_lengths.cpu().numpy(), batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.droplstm(lstm_out.transpose(1, 0))",
                            "Call"
                        ],
                        [
                            "self.self_attention_last(lstm_out, label_embs, label_embs, True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}