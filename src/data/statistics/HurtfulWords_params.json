{
    "scripts/analyze_results.py": {
        "sklearn": {
            "precision_score_173": {
                "variable": {
                    "value": "metrics[precision]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "temp[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "temp['pred'] >= thres",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "recall_score_174": {
                "variable": {
                    "value": "metrics[recall]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "temp[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "temp['pred'] >= thres",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "average_precision_score_175": {
                "variable": {
                    "value": "metrics[auprc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "temp[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "temp['pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_loss_176": {
                "variable": {
                    "value": "metrics[log_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "temp[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "temp['pred']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_score_177": {
                "variable": {
                    "value": "metrics[acc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "temp[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "temp['pred'] >= thres",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "confusion_matrix_178": {
                "variable": {
                    "value": "CM",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "temp[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "temp['pred'] >= thres",
                    "type": "Compare",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "f1_score_40": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "key['target_col_name']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred >= i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "roc_auc_score_172": {
                "variable": {
                    "value": "metrics[auroc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "temp[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "temp['pred']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/finetune_on_target.py": {
        "sklearn": {
            "accuracy_score_607": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "actual_val.values.astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(merged_preds_val_list).round()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_608": {
                "variable": {
                    "value": "auprc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "actual_val.values.astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "merged_preds_val_list",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ],
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "log_loss_609": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "actual_val.values.astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "merged_preds_val_list",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ],
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "roc_auc_score_610": {
                "variable": {
                    "value": "roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "actual_val.values.astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "merged_preds_val_list",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ],
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "mean_squared_error_616": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "actual_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "val_df[target]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "merged_preds_val_list",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ],
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ParameterGrid_194": {
                "param_grid": {
                    "value": "{'num_layers': [2, 3, 4], 'dropout_prob': [0, 0.2], 'decay_rate': [2, 4, 6]}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "classification_report_619": {
                "variable": {
                    "value": "report",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "actual_val.values.astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(merged_preds_val_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_585": {
                "y_true": {
                    "value": "actual_val.values.astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "merged_preds_val_list",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ],
                        [
                            "[merged_preds_val[str(i)] for i in actual_val.index]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_222": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_223": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_242": {
                "variable": {
                    "value": "criterion_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BCELoss_236": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_245": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BertModel.from_pretrained(args.model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_246": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "criterion",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.BCELoss()",
                            "Call"
                        ],
                        [
                            "nn.CrossEntropyLoss()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(criterion)",
                            "Call"
                        ],
                        [
                            "nn.MSELoss()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MIMICDataset(features_train, 'train', args.task_type)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_289": {
                "variable": {
                    "value": "val_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MIMICDataset(features_eval, 'val', args.task_type)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_292": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MIMICDataset(features_test, 'test', args.task_type)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_304": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Embdataset(features_train_embs, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_305": {
                "variable": {
                    "value": "val_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Embdataset(features_val_embs, 'val')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_306": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Embdataset(features_test_embs, 'test')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_630": {
                "obj": {
                    "value": "predictor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'predictor.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_185": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_233": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_238": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_248": {
                "variable": {
                    "value": "discriminator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Discriminator(EMB_SIZE + int(args.fairness_def == 'odds'), args.adv_layers, len(mapping[protected_group]), args.lm)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(discriminator)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_249": {
                "variable": {
                    "value": "criterion_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "criterion_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.CrossEntropyLoss()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(criterion_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_416": {
                "variable": {
                    "value": "predictor",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "predictor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Classifier(**predictor_params).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(predictor)",
                            "Call"
                        ],
                        [
                            "es_models[idx_max].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_637": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_240": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embs, i.float().unsqueeze(dim=1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "bert_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_out, i.float().unsqueeze(dim=1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "in_features": {
                    "value": "input_dim // 2 ** c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim // 2 ** (c + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "input_dim // 2 ** c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_categories",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_184": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "bert_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_out, i.float().unsqueeze(dim=1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embs, i.float().unsqueeze(dim=1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_528": {
                "variable": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embs, i.float().unsqueeze(dim=1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_552": {
                "variable": {
                    "value": "bert_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert_out, i.float().unsqueeze(dim=1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "adv_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[adv_input, y.unsqueeze(dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/get_data.py": {
        "sklearn": {
            "KFold_21": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/make_targets.py": {
        "sklearn": {
            "KFold_145": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KFold_212": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KFold_273": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_classifier_dataset_utils.py": {
        "sklearn": {
            "f1_score_517": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_538": {
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/adversarial_finetune_on_pregen.py": {
        "torch": {
            "DataParallel_406": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.CrossEntropyLoss()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, suffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_281": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_284": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_300": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_430": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, domain_to_id_dict=domain_mapping, domain_name=args.domain_of_interest, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(epoch_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(epoch_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_277": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_280": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_283": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_302": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_363": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BertForPreTraining.from_pretrained(args.bert_model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_364": {
                "variable": {
                    "value": "discriminator_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator_a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Discriminator(input_dim=args.discriminator_input_dim, num_layers=args.num_layers, num_categories=num_categories, lm=args.lambda_)",
                            "Call"
                        ],
                        [
                            "discriminator_a.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(discriminator_a)",
                            "Call"
                        ],
                        [
                            "DPP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_365": {
                "variable": {
                    "value": "discriminator_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator_b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Discriminator(input_dim=args.discriminator_input_dim, num_layers=args.num_layers, num_categories=num_categories, lm=args.lambda_)",
                            "Call"
                        ],
                        [
                            "discriminator_b.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(discriminator_b)",
                            "Call"
                        ],
                        [
                            "DPP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_427": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "epoch_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, domain_to_id_dict=domain_mapping, domain_name=args.domain_of_interest, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_429": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, domain_to_id_dict=domain_mapping, domain_name=args.domain_of_interest, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "data": {
                    "value": "self.input_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "self.input_masks[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "self.segment_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "data": {
                    "value": "self.lm_label_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "data": {
                    "value": "self.is_nexts[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "self.domain_a[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "self.domain_b[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_348": {
                "f": {
                    "value": "args.discriminator_a_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_351": {
                "f": {
                    "value": "args.discriminator_b_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "in_features": {
                    "value": "input_dim // 2 ** c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim // 2 ** (c + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_178": {
                "in_features": {
                    "value": "input_dim // 2 ** c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_categories",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(set(domain_mapping.values()))",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/finetune_on_pregenerated.py": {
        "torch": {
            "device_195": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_196": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_199": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_214": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_295": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RandomSampler(epoch_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(epoch_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_335": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_198": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_216": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_247": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BertForPreTraining.from_pretrained(args.bert_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_292": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "epoch_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_294": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "data": {
                    "value": "self.input_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "self.input_masks[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "self.segment_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "self.lm_label_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "self.is_nexts[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/gradient_reversal.py": {
        "torch": {}
    },
    "scripts/log_probability_bias_scores.py": {
        "torch": {
            "tensor_103": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[token_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(tokens_tensor)",
                            "Call"
                        ],
                        [
                            "F.softmax(predictions, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "predicted_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[0, mask_pos, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/predict_missing.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[token_ids]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/pregen_embeddings.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_39": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MIMICDataset(features, 'train', 'classification')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "n_gpu * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BertModel.from_pretrained(args.model_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/utils.py": {
        "torch": {
            "ModuleList_69": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].segment_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_163": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].label_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[index].label_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "models[path].state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "(v[-1][:, 0, :], v[-2][:, 0, :], v[-3][:, 0, :], v[-4][:, 0, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "input_dim // self.d ** c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim // self.d ** (c + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "num_features": {
                    "value": "input_dim // self.d ** (c + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "input_dim // self.d ** c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "input_dim // self.d ** c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "multiclass_nclasses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_62": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "input_dim // self.d ** c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}