{
    "source/datamanager.py": {
        "sklearn": {
            "shuffle_93": {
                "variable": {
                    "value": "(self.x_tr, self.y_tr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.x_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.y_tr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_data_14": {
                "variable": {
                    "value": "((x_tr, y_tr), (x_te, y_te))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "source/tf_process.py": {
        "sklearn": {
            "PCA_263": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_138": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "FileWriter_112": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "PACK_PATH + '/Checkpoint'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunOptions_121": {
                "variable": {
                    "value": "run_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.compat.v1.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_122": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_20": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_22": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "source/neuralnet.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.height, self.width, self.channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_39": {
                "variable": {
                    "value": "self.loss_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(self.l_real + self.l_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "variable": {
                    "value": "self.mean_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.restore_error",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "variable": {
                    "value": "self.mean_kld",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.kl_divergence",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "self.ELBO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.restore_error + self.kl_divergence",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_67": {
                "variable": {
                    "value": "self.optimizer_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.leaning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_69": {
                "variable": {
                    "value": "self.optimizer_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.leaning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_84": {
                "variable": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "fulcon_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2d(input=conv3_1, stride=1, padding='SAME', filter_size=[ksize, ksize, 64, 64], activation='elu', name='enc3_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(input=conv3_1, stride=1, padding='SAME', filter_size=[ksize, ksize, 64, 64], activation='elu', name='dis3_2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, h * w * c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fulcon_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "fulcon_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fulcon3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fully_connected(input=fulcon2, num_inputs=int(fulcon2.shape[1]), num_outputs=int(h * w * c), activation='elu', name='decfc_2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, h, w, c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "decfc_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "fulcon_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2d(input=conv3_1, stride=1, padding='SAME', filter_size=[ksize, ksize, 64, 64], activation='elu', name='enc3_2')",
                            "Call"
                        ],
                        [
                            "self.conv2d(input=conv3_1, stride=1, padding='SAME', filter_size=[ksize, ksize, 64, 64], activation='elu', name='dis3_2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, h * w * c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "disfc_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_248": {
                "variable": {
                    "value": "disc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "disc_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fully_connected(input=fulcon1, num_inputs=int(fulcon1.shape[1]), num_outputs=1, activation='sigmoid', name='disfc_3')",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.clip_by_value(disc_score, 0 + 1e-12, 1 - 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0 + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_257": {
                "variable": {
                    "value": "z_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z_sigma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z[:, self.z_dim:]",
                            "Subscript"
                        ],
                        [
                            "tf.compat.v1.clip_by_value(z_sigma, 1e-12, 1 - 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 - 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_263": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool_273": {
                "variable": {
                    "value": "out_maxp",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_320": {
                "variable": {
                    "value": "out_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_cudnn_on_gpu": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                },
                "dilations": {
                    "value": "dilations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'%s_conv' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_330": {
                "variable": {
                    "value": "out_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.nn.conv2d(input=input, filter=weight, strides=[1, stride, stride, 1], padding=padding, use_cudnn_on_gpu=True, data_format='NHWC', dilations=dilations, name='%s_conv' % name)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.nn.conv2d_transpose(value=input, filter=weight, output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding, data_format='NHWC', dilations=dilations, name='%s_conv_tr' % name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_add' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_transpose_345": {
                "variable": {
                    "value": "out_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                },
                "dilations": {
                    "value": "dilations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'%s_conv_tr' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_355": {
                "variable": {
                    "value": "out_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.nn.conv2d(input=input, filter=weight, strides=[1, stride, stride, 1], padding=padding, use_cudnn_on_gpu=True, data_format='NHWC', dilations=dilations, name='%s_conv' % name)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.nn.conv2d_transpose(value=input, filter=weight, output_shape=output_shape, strides=[1, stride, stride, 1], padding=padding, data_format='NHWC', dilations=dilations, name='%s_conv_tr' % name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_add' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_367": {
                "variable": {
                    "value": "out_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_mul' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_368": {
                "variable": {
                    "value": "out_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_mul",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.matmul(input, weight, name='%s_mul' % name)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_add' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_74": {
                "name": {
                    "value": "Loss_D/d_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_75": {
                "name": {
                    "value": "Loss_D/d_fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_76": {
                "name": {
                    "value": "Loss_D/d_best",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_best)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_77": {
                "name": {
                    "value": "Loss_D/d_others",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.d_others)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_78": {
                "name": {
                    "value": "Loss_D/loss_d",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_80": {
                "name": {
                    "value": "Loss_G/mean_restore",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean_restore",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_81": {
                "name": {
                    "value": "Loss_G/mean_kld",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean_kld",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_82": {
                "name": {
                    "value": "Loss_G/loss_g",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_215": {
                "variable": {
                    "value": "convh1_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convh1_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2d(input=input, stride=1, padding='SAME', filter_size=[ksize, ksize, 16, 1], activation='sigmoid', name='hypo1_1-%d' % h_num)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input=convh1_1, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_282": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_sigmoid' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_37": {
                "x": {
                    "value": "self.d_real + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "input_tensor": {
                    "value": "self.l_real + self.l_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_42": {
                "input_tensor": {
                    "value": "self.x * tf.math.log(self.x_best + 1e-12) + (1 - self.x) * tf.math.log(1 - self.x_best + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "tf.square(self.z_mu) + tf.square(self.z_sigma) - tf.math.log(tf.square(self.z_sigma) + 1e-12) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "self.d_real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "input_tensor": {
                    "value": "self.d_fake",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "input_tensor": {
                    "value": "self.d_best",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "input_tensor": {
                    "value": "self.d_others",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_102": {
                "name": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_122": {
                "name": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_263": {
                "input": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_284": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_tanh' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_300": {
                "variable": {
                    "value": "variable",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_38": {
                "x": {
                    "value": "self.d_best + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_90": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "variable": {
                    "value": "x_batbat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "x_batbat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_batbat, tf.expand_dims(input=input, axis=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "hypo_batbat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[hypo_batbat, x_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_286": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_relu' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_92": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "leaky_relu_288": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_lrelu' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_42": {
                "x": {
                    "value": "1 - self.x_best + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_43": {
                "x": {
                    "value": "tf.square(self.z_sigma) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_94": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_290": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_elu' % name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_43": {
                "x": {
                    "value": "self.z_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_96": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_98": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}