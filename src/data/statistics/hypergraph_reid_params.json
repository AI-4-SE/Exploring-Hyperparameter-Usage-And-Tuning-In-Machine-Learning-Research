{
    "losses.py": {
        "torch": {
            "LogSoftmax_33": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_probs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_63": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_73": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "dist_ap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(dist_ap, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(dist_ap, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "dist_an",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(dist_an, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(dist_an, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_127": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(inputs, 2).sum(dim=1, keepdim=True).expand(n, n)",
                            "Call"
                        ],
                        [
                            "dist + dist.t()",
                            "BinOp"
                        ],
                        [
                            "dist.clamp(min=1e-12).sqrt()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "MarginRankingLoss_157": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_183": {
                "variable": {
                    "value": "dist_ap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(dist_ap, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(dist_ap, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_184": {
                "variable": {
                    "value": "dist_an",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(dist_an, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(dist_an, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_123": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_123": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_124": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_124": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_112": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_114": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main_video_person_reid_hypergraphsage_part.py": {
        "torch": {
            "is_available_91": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "queryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.query, seq_len=args.seq_len, sample='dense', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "galleryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.gallery, seq_len=args.seq_len, sample='dense', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_337": {
                "variable": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_338": {
                "variable": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.train, seq_len=args.seq_len, sample='random', transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.train, seq_len=args.seq_len, sample='random', transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(dataset.train, num_instances=args.num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_171": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_191": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet3d.resnet50(num_classes=dataset.num_train_pids, sample_width=args.width, sample_height=args.height, sample_duration=args.seq_len)",
                            "Call"
                        ],
                        [
                            "models.init_model(name=args.arch, pool_size=8, input_shape=2048, n_classes=dataset.num_train_pids, loss={'xent', 'htri'})",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_302": {
                "variable": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_328": {
                "variable": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_103": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_187": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.stepsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_297": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_339": {
                "input": {
                    "value": "qf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "F.normalize(qf, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_339": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_340": {
                "input": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "F.normalize(gf, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_340": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_266": {
                "variable": {
                    "value": "xent_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([criterion_xent(logits, pids) for logits in outputs], dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_321": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_323": {
                "variable": {
                    "value": "(features, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_266": {
                "tensors": {
                    "value": "[criterion_xent(logits, pids) for logits in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/ResNet.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool1d_40": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.batchnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.batchnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool1d_84": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool1d_141": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t * int(self.p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_199": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool1d_215": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_241": {
                "variable": {
                    "value": "self.attention_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.middle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1d_242": {
                "variable": {
                    "value": "self.attention_tconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.middle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_248": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_251": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_tconv(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_253": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_262": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_264": {
                "variable": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_265": {
                "variable": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_291": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_297": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool1d_305": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "output[0]",
                            "Subscript"
                        ],
                        [
                            "output.view(t * b, output.size(2), output.size(3), output.size(4))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, output.size()[2:])",
                            "Call"
                        ],
                        [
                            "output.view(t, b, output.size(1))",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_336": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_337": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_343": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (2, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, t, int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.view(b, t * int(self.p), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, x.size(1), x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool1d_351": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "output[0]",
                            "Subscript"
                        ],
                        [
                            "output.view(t * b, output.size(2), output.size(3), output.size(4))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, output.size()[2:])",
                            "Call"
                        ],
                        [
                            "output.view(t, b, output.size(1))",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_379": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_384": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_406": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "output[0]",
                            "Subscript"
                        ],
                        [
                            "output.view(t * b, output.size(2), output.size(3), output.size(4))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, output.size()[2:])",
                            "Call"
                        ],
                        [
                            "output.view(t, b, output.size(1))",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "output.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool1d_410": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "output[0]",
                            "Subscript"
                        ],
                        [
                            "output.view(t * b, output.size(2), output.size(3), output.size(4))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(output, output.size()[2:])",
                            "Call"
                        ],
                        [
                            "output.view(t, b, output.size(1))",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_186": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_255": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_257": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_258": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/ResNet_hypergraphsage_part.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_34": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NearestConvolution.cos_dis(feats)",
                            "Call"
                        ],
                        [
                            "NearestConvolution.cos_dis(x)",
                            "Call"
                        ],
                        [
                            "NearestConvolution.cos_dis(tmp_x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.kn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_36": {
                "tensors": {
                    "value": "[feats[j, idx[j, i]] for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_46": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(X, dim=2, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "h_k_N",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj.data > 0",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats",
                            "Name"
                        ],
                        [
                            "self.trans(x1[i])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(self.dropout(x)))",
                            "Call"
                        ],
                        [
                            "torch.stack(x_list, dim=0)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_84": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.W_neib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.W_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(2 * infeat, 1, bias=False) for i in range(self.num_head)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LeakyReLU_131": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "a_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(2).repeat(1, 1, x_neib.size(2), 1), x_neib)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_k_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_166": {
                "variable": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(h_k_list, dim=2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k_f, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k_f)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k_f.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k_f.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "h_k",
                            "Name"
                        ],
                        [
                            "F.normalize(h_k_f, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k_f)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k_f.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k_f.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_167": {
                "variable": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(h_k_list, dim=2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k_f, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k_f)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k_f.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k_f.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "h_k",
                            "Name"
                        ],
                        [
                            "F.normalize(h_k_f, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k_f)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k_f.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k_f.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.W_neib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_190": {
                "variable": {
                    "value": "self.W_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(2 * infeat, 1, bias=False) for i in range(self.num_head)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LeakyReLU_195": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "a_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(2).repeat(1, 1, x_neib1.size(2), 1), x_neib1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "a_input2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(2).repeat(1, 1, x_neib2.size(2), 1), x_neib2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "a_input3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(2).repeat(1, 1, x_neib3.size(2), 1), x_neib3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_246": {
                "variable": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(h_k_list, dim=2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k_f, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k_f)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k_f.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k_f.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "h_k",
                            "Name"
                        ],
                        [
                            "F.normalize(h_k_f, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k_f)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k_f.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k_f.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_247": {
                "variable": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(h_k_list, dim=2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k_f, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k_f)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k_f.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k_f.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "h_k",
                            "Name"
                        ],
                        [
                            "F.normalize(h_k_f, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k_f)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k_f.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k_f.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.W_neib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.W_x(x), self.W_neib(x_neib))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_287": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_288": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.W_neib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "topk_328": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NearestConvolution.cos_dis(feats)",
                            "Call"
                        ],
                        [
                            "NearestConvolution.cos_dis(x)",
                            "Call"
                        ],
                        [
                            "NearestConvolution.cos_dis(tmp_x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.kn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_330": {
                "tensors": {
                    "value": "[x[j, idx[j, i]] for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.W_x(x), self.W_neib(x_neib))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_342": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_343": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_365": {
                "variable": {
                    "value": "self.W_neib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "k_nearest",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "k_nearest_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.W_x(x), self.W_neib(x_neib))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_408": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_409": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_428": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_431": {
                "variable": {
                    "value": "self.W_neib",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "infeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_462": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_463": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W(h_k_N)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2))), 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.W_x(x), self.W_neib(x_neib1), self.W_neib(x_neib2), self.W_neib(x_neib3)), 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(h_k, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h_k)",
                            "Call"
                        ],
                        [
                            "self.bn(h_k.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "h_k.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_487": {
                "variable": {
                    "value": "s_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.assign_mat(x, adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_490": {
                "variable": {
                    "value": "xnext",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_l.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed(x, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_546": {
                "variable": {
                    "value": "self.layers1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BatchedGraphSAGEDynamicRangeMean1(input_shape, self.hidden_dim), BatchedGraphSAGEDynamicRangeMean1(2 * self.hidden_dim, self.hidden_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_561": {
                "variable": {
                    "value": "self.layers2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BatchedGraphSAGEDynamicRangeMean1(input_shape, self.hidden_dim), BatchedGraphSAGEDynamicRangeMean1(2 * self.hidden_dim, self.hidden_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_576": {
                "variable": {
                    "value": "self.layers3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BatchedGraphSAGEDynamicRangeMean1(input_shape, self.hidden_dim), BatchedGraphSAGEDynamicRangeMean1(2 * self.hidden_dim, self.hidden_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm1d_595": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_596": {
                "variable": {
                    "value": "self.bnneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.input_shape + 3 * 2 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_599": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_605": {
                "variable": {
                    "value": "self.fc_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_625": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats",
                            "Name"
                        ],
                        [
                            "self.trans(x1[i])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(self.dropout(x)))",
                            "Call"
                        ],
                        [
                            "torch.stack(x_list, dim=0)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool1d_628": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x0.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x0.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x0, t)",
                            "Call"
                        ],
                        [
                            "x0.view(b, self.input_shape)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_631": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x0.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x0.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x0, t)",
                            "Call"
                        ],
                        [
                            "x0.view(b, self.input_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_632": {
                "variable": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(x0, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(f0)",
                            "Call"
                        ],
                        [
                            "self.bn(f0)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_637": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats",
                            "Name"
                        ],
                        [
                            "self.trans(x1[i])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(self.dropout(x)))",
                            "Call"
                        ],
                        [
                            "torch.stack(x_list, dim=0)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(int(x.size(-2) / self.p1), x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool1d_649": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(f1, int(t * self.p1))",
                            "Call"
                        ],
                        [
                            "f1.view(b, 2 * self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "int(t * self.p1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_654": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats",
                            "Name"
                        ],
                        [
                            "self.trans(x1[i])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(self.dropout(x)))",
                            "Call"
                        ],
                        [
                            "torch.stack(x_list, dim=0)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(int(x.size(-2) / self.p2), x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool1d_666": {
                "variable": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(f2, int(t * self.p2))",
                            "Call"
                        ],
                        [
                            "f2.view(b, 2 * self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "int(t * self.p2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_672": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats",
                            "Name"
                        ],
                        [
                            "self.trans(x1[i])",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(self.dropout(x)))",
                            "Call"
                        ],
                        [
                            "torch.stack(x_list, dim=0)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(int(x.size(-2) / self.p3), x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool1d_684": {
                "variable": {
                    "value": "f3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x3.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(f3, int(t * self.p3))",
                            "Call"
                        ],
                        [
                            "f3.view(b, 2 * self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "int(t * self.p3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_702": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f0, f3, f1, f2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_48": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(X, dim=2, p=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "XT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(self.dropout(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outfeat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_134": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "(self.num_head + 1) * outfeat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.W_a[j](a_input).squeeze(3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_neib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, idx_neib, :].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib.view(b, sample_size, -1, x_neib.size(2))",
                            "Call"
                        ],
                        [
                            "x[:, idx_neib].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib.view(x.size(0), x.size(1), -1, x_neib.size(2))",
                            "Call"
                        ],
                        [
                            "x_neib.mean(dim=2)",
                            "Call"
                        ],
                        [
                            "k_nearest[:, :, 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib.mean(dim=2)",
                            "Call"
                        ],
                        [
                            "k_nearest[:, :, 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib.mean(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_160": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_k, self.W_neib(h_prime.squeeze(2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_198": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "(self.num_head * 3 + 1) * outfeat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_229": {
                "variable": {
                    "value": "attention1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.W_a[j](a_input1).squeeze(3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "variable": {
                    "value": "h_prime1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention1.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_neib1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, idx_neib1, :].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib1.view(b, sample_size1, -1, x_neib1.size(2))",
                            "Call"
                        ],
                        [
                            "x[:, idx_neib1].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib1.view(x.size(0), x.size(1), -1, x_neib1.size(2))",
                            "Call"
                        ],
                        [
                            "x_neib1.mean(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_233": {
                "variable": {
                    "value": "attention2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.W_a[j](a_input2).squeeze(3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "h_prime2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention2.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_neib2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, idx_neib2, :].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib2.view(b, sample_size2, -1, x_neib2.size(2))",
                            "Call"
                        ],
                        [
                            "x[:, idx_neib2].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib2.view(x.size(0), x.size(1), -1, x_neib2.size(2))",
                            "Call"
                        ],
                        [
                            "x_neib2.mean(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_237": {
                "variable": {
                    "value": "attention3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.W_a[j](a_input3).squeeze(3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_238": {
                "variable": {
                    "value": "h_prime3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention3.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_neib3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, idx_neib3, :].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib3.view(b, sample_size3, -1, x_neib3.size(2))",
                            "Call"
                        ],
                        [
                            "x[:, idx_neib3].contiguous()",
                            "Call"
                        ],
                        [
                            "x_neib3.view(x.size(0), x.size(1), -1, x_neib3.size(2))",
                            "Call"
                        ],
                        [
                            "x_neib3.mean(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_240": {
                "variable": {
                    "value": "h_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_k, self.W_neib(h_prime1.squeeze(2)), self.W_neib(h_prime2.squeeze(2)), self.W_neib(h_prime3.squeeze(2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_271": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2 * outfeat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_315": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2 * outfeat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_369": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2 * outfeat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_390": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NearestConvolution.cos_dis(feats)",
                            "Call"
                        ],
                        [
                            "NearestConvolution.cos_dis(x)",
                            "Call"
                        ],
                        [
                            "NearestConvolution.cos_dis(tmp_x)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "tk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kn",
                            "Attribute"
                        ],
                        [
                            "min(dis.shape[2], self.kn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_394": {
                "tensors": {
                    "value": "[tmp_x[j, idx[j, i]] for i in range(p * (idx_end - idx_start))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_435": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4 * outfeat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Categorical_495": {
                "variable": {
                    "value": "self.entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "s_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.assign_mat(x, adj), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_608": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_610": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "2 * infeat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "in_features": {
                    "value": "2 * infeat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/architect.py": {
        "torch": {
            "cat_8": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.arch_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_35": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_102": {
                "variable": {
                    "value": "grads_p",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_107": {
                "variable": {
                    "value": "grads_n",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/convlstm.py": {
        "torch": {
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_49": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_51": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_141": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "input": {
                    "value": "c_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/hypnn.py": {
        "torch": {
            "as_tensor_71": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_101": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_144": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_178": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_204": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_245": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_282": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_314": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_348": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_379": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_409": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_420": {
                "variable": {
                    "value": "res_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "res_c.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "res_c.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_421": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "(mx == 0).prod(-1, keepdim=True, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "res_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, dtype=res_c.dtype, device=res_c.device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tanh(mx_norm / x_norm * artanh(sqrt_c * x_norm)) * mx / (mx_norm * sqrt_c)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_426": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,kj->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_506": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_50": {
                "input": {
                    "value": "x + torch.sqrt(1 + x) * torch.sqrt(x - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_80": {
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ],
                        [
                            "(mx == 0).prod(-1, keepdim=True, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / norm * maxnorm",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clamp(-1 + eps, 1 - eps)",
                            "Call"
                        ],
                        [
                            "p2k(x, c)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_531": {
                "variable": {
                    "value": "self.a_vals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_classes, ball_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_532": {
                "variable": {
                    "value": "self.p_vals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_classes, ball_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_567": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_452": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_454": {
                "input": {
                    "value": "mob_add * A.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_455": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_466": {
                "input": {
                    "value": "1 - c * x.pow(2).sum(-1, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_489": {
                "input": {
                    "value": "1 - c * x.pow(2).sum(dim=dim, keepdim=keepdim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_495": {
                "input": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lorenz_factor(x, c=c, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_540": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_542": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_569": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_646": {
                "variable": {
                    "value": "self.xp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((ball_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_651": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([c])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_679": {
                "variable": {
                    "value": "self.xp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((ball_dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_684": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([c])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_452": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_454": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(u)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(y)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "1 / R ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(self.c).type_as(x)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(c).type_as(x)",
                            "Call"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "self.c",
                            "Attribute"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_50": {
                "input": {
                    "value": "x - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_502": {
                "input": {
                    "value": "_mobius_addition_batch(-x, y, c=c)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_646": {
                "*size": {
                    "value": "(ball_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_679": {
                "*size": {
                    "value": "(ball_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/network.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=128 * 3 * 3, out_features=256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_49": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_16": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "128 * 3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_34": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/non_local_concatenation.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "self.concat_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inter_channels * 2, 1, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "concat_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta_x, phi_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f / N",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3d_25": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_33": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "self.inter_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_145": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/non_local_dot_product.py": {
        "torch": {
            "matmul_77": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f / N",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3d_25": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_33": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_129": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/non_local_embedded_gaussian.py": {
        "torch": {
            "matmul_76": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_77": {
                "variable": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(f, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3d_25": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_129": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_33": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/non_local_gaussian.py": {
        "torch": {
            "matmul_77": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.in_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(f, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3d_25": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_33": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_128": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "param_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_182": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_184": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "param_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_197": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet3d.py": {
        "torch": {
            "avg_pool3d_26": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_27": {
                "variable": {
                    "value": "zero_pads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_76": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_77": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_79": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_80": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_81": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_121": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_128": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_130": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool3d_141": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(last_duration, last_height, last_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "[out.data, zero_pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_162": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_167": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/utils.py": {
        "torch": {
            "save_155": {
                "obj": {
                    "value": "{'epoch': epoch + 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'misc.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'finetune_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'finetune_optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_192": {
                "input": {
                    "value": "torch.rand(B, D) + keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_192": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "samplers.py": {
        "torch": {
            "randperm_28": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_identities",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "save_129": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "video_loader.py": {
        "torch": {
            "cat_70": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "imgs_array",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_102": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}