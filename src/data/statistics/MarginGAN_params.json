{
    "ablation/MarginGAN_UG.py": {
        "torch": {
            "sum_15": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "-torch.log(1 - out + 1e-06)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, 1024)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(128, 64, 4, 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.input_dim, 64, 4, 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * (self.input_size // 4) * (self.input_size // 4), 1024)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_98": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * (self.input_size // 4) * (self.input_size // 4))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * (self.input_size // 4) * (self.input_size // 4))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "self.G_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "self.D_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_140": {
                "variable": {
                    "value": "self.C_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.C.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_157": {
                "variable": {
                    "value": "self.sample_z_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BCELoss_146": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_148": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_375": {
                "variable": {
                    "value": "sample_z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_396": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_397": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "1 - out + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "num_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_38": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_108": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * (self.input_size // 4) * (self.input_size // 4))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_240": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "nll_loss_256": {
                "variable": {
                    "value": "C_unlabeled_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_unlabeled_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "C_unlabeled_wei",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(C_unlabeled_pred, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "C_fake_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_300": {
                "variable": {
                    "value": "G_loss_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_fake_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "C_fake_wei",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.max(C_fake_pred, 1)[1]",
                            "Subscript"
                        ],
                        [
                            "C_fake_wei.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.batch_size, 10).cuda().scatter_(1, C_fake_wei, 1)",
                            "Call"
                        ],
                        [
                            "torch.max(C_fake_pred, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_405": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_406": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_192": {
                "variable": {
                    "value": "C_real_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_252": {
                "input": {
                    "value": "C_unlabeled_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_260": {
                "input": {
                    "value": "C_fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_275": {
                "input": {
                    "value": "D_labeled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.D(x_l)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_278": {
                "input": {
                    "value": "D_unlabeled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.D(x_u)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_299": {
                "input": {
                    "value": "C_fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_324": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_204": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ablation/dataloader.py": {
        "torch": {
            "stack_33": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "labeled_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "labeled_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_dataset(labeled_indices, training_set)",
                            "Call"
                        ],
                        [
                            "MyDataset(labeled_set[0], labeled_set[1])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "unlabeled_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabeled_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_dataset(unlabeled_indices, training_set)",
                            "Call"
                        ],
                        [
                            "MyDataset(unlabeled_set[0], unlabeled_set[1])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data/mnist', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ablation/main.py": {
        "torch": {}
    },
    "ablation/utils.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((trX, teX), axis=0)",
                            "Call"
                        ],
                        [
                            "X.transpose(0, 3, 1, 2) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(X).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "y_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((len(y), 10), dtype=np.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_vec).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(dir, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "further/MarginGAN_main.py": {
        "torch": {
            "sum_38": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_161": {
                "variable": {
                    "value": "G_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_162": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BCELoss_164": {
                "variable": {
                    "value": "BCEloss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_259": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(traindir, train_transformation)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BatchSampler(sampler, args.batch_size, drop_last=True)",
                            "Call"
                        ],
                        [
                            "data.TwoStreamBatchSampler(unlabeled_idxs, labeled_idxs, args.batch_size, args.labeled_batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.ImageFolder(evaldir, eval_transformation)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_281": {
                "variable": {
                    "value": "class_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "NO_LABEL",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_475": {
                "variable": {
                    "value": "sample_z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tot_num_samples, args.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_492": {
                "variable": {
                    "value": "class_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "NO_LABEL",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_39": {
                "input": {
                    "value": "-torch.log(1 - out + 1e-06)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, 1024)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(128, 64, 4, 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.input_dim, 64, 4, 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * (self.input_size // 4) * (self.input_size // 4), 1024)",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_178": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.resume, 'best.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_251": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labeled_idxs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchSampler_252": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(labeled_idxs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_361": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.generated_batch_size, args.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_367": {
                "variable": {
                    "value": "C_fake_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_fake_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(C_fake_pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(C_fake_pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_440": {
                "variable": {
                    "value": "C_fake_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_fake_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(C_fake_pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(C_fake_pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_443": {
                "variable": {
                    "value": "G_loss_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_fake_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(C_fake_pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(C_fake_pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "C_fake_wei",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.max(C_fake_pred, 1)[1]",
                            "Subscript"
                        ],
                        [
                            "C_fake_wei.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(args.generated_batch_size, 10).cuda().scatter_(1, C_fake_wei, 1)",
                            "Call"
                        ],
                        [
                            "torch.max(C_fake_pred, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_546": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(dirpath, 'best.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_371": {
                "variable": {
                    "value": "C_fake_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.generated_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "1 - out + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_53": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "num_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_60": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_63": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_90": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_94": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_95": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_186": {
                "f": {
                    "value": "G_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.resume, 'G.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_187": {
                "f": {
                    "value": "C_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.resume, 'D.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_230": {
                "obj": {
                    "value": "G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_path, 'G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_path, 'D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_419": {
                "input": {
                    "value": "D_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(input_var)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_424": {
                "input": {
                    "value": "D_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "D(G_)",
                            "Call"
                        ],
                        [
                            "D(G_)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_437": {
                "input": {
                    "value": "D_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "D(G_)",
                            "Call"
                        ],
                        [
                            "D(G_)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_512": {
                "input": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_369": {
                "input": {
                    "value": "C_fake_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(C_fake_pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(C_fake_pred, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_442": {
                "input": {
                    "value": "C_fake_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(C_fake_pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(C_fake_pred, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "further/mean_teacher/architectures.py": {
        "torch": {
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_60": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 8, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 8, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_124": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 4, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block.out_channels(channels * 4, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.conv_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "variable": {
                    "value": "self.bn_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "variable": {
                    "value": "self.conv_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_193": {
                "variable": {
                    "value": "self.bn_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "variable": {
                    "value": "self.conv_a3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "variable": {
                    "value": "self.bn_a3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "variable": {
                    "value": "self.bn_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_231": {
                "variable": {
                    "value": "self.bn_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_234": {
                "variable": {
                    "value": "self.bn_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_236": {
                "variable": {
                    "value": "self.bn_b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_244": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a1(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a1(a)",
                            "Call"
                        ],
                        [
                            "self.relu(a)",
                            "Call"
                        ],
                        [
                            "self.conv_a2(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a2(a)",
                            "Call"
                        ],
                        [
                            "self.relu(a)",
                            "Call"
                        ],
                        [
                            "self.conv_a3(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a3(a)",
                            "Call"
                        ],
                        [
                            "F.relu(a, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv_a1(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a1(a)",
                            "Call"
                        ],
                        [
                            "F.relu(a, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_a2(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a2(a)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_247": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a1(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a1(a)",
                            "Call"
                        ],
                        [
                            "self.relu(a)",
                            "Call"
                        ],
                        [
                            "self.conv_a2(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a2(a)",
                            "Call"
                        ],
                        [
                            "self.relu(a)",
                            "Call"
                        ],
                        [
                            "self.conv_a3(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a3(a)",
                            "Call"
                        ],
                        [
                            "F.relu(a, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv_a1(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a1(a)",
                            "Call"
                        ],
                        [
                            "F.relu(a, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_a2(a)",
                            "Call"
                        ],
                        [
                            "self.bn_a2(a)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_251": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(b, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv_b1(b)",
                            "Call"
                        ],
                        [
                            "self.bn_b1(b)",
                            "Call"
                        ],
                        [
                            "F.relu(b, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b2(b)",
                            "Call"
                        ],
                        [
                            "self.bn_b2(b)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_254": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(b, inplace=False)",
                            "Call"
                        ],
                        [
                            "self.conv_b1(b)",
                            "Call"
                        ],
                        [
                            "self.bn_b1(b)",
                            "Call"
                        ],
                        [
                            "F.relu(b, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.conv_b2(b)",
                            "Call"
                        ],
                        [
                            "self.bn_b2(b)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_300": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_304": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, :, 0::2, 0::2], x[:, :, 1::2, 1::2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, block.out_channels(planes, groups), kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, block.out_channels(planes, groups), kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "num_features": {
                    "value": "block.out_channels(planes, groups)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "further/mean_teacher/data.py": {
        "torch": {}
    },
    "further/mean_teacher/losses.py": {
        "torch": {
            "softmax_24": {
                "variable": {
                    "value": "input_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "target_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "input_log_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "target_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "kl_div_42": {
                "input": {
                    "value": "input_log_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(input_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_27": {
                "input": {
                    "value": "input_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(input_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "(input1 - input2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "further/mean_teacher/utils.py": {
        "torch": {}
    },
    "preliminary/MarginGAN.py": {
        "torch": {
            "sum_15": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "-torch.log(1 - out + 1e-06)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, 1024)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(128, 64, 4, 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.input_dim, 64, 4, 2, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * (self.input_size // 4) * (self.input_size // 4), 1024)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_98": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * (self.input_size // 4) * (self.input_size // 4))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * (self.input_size // 4) * (self.input_size // 4))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "self.G_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "self.D_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_140": {
                "variable": {
                    "value": "self.C_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.C.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_157": {
                "variable": {
                    "value": "self.sample_z_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BCELoss_146": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_148": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_375": {
                "variable": {
                    "value": "sample_z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_396": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_397": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "1 - out + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "num_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_38": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "num_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_108": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128 * (self.input_size // 4) * (self.input_size // 4))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_242": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "nll_loss_251": {
                "variable": {
                    "value": "C_labeled_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_labeled_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y_l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_258": {
                "variable": {
                    "value": "C_unlabeled_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_unlabeled_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "C_unlabeled_wei",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(C_unlabeled_pred, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "C_fake_wei",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_302": {
                "variable": {
                    "value": "G_loss_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_fake_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "C_fake_wei",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.max(C_fake_pred, 1)[1]",
                            "Subscript"
                        ],
                        [
                            "C_fake_wei.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.batch_size, 10).cuda().scatter_(1, C_fake_wei, 1)",
                            "Call"
                        ],
                        [
                            "torch.max(C_fake_pred, 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_405": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_406": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_191": {
                "variable": {
                    "value": "C_real_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_254": {
                "input": {
                    "value": "C_unlabeled_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_262": {
                "input": {
                    "value": "C_fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_277": {
                "input": {
                    "value": "D_labeled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.D(x_l)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_280": {
                "input": {
                    "value": "D_unlabeled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.D(x_u)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_301": {
                "input": {
                    "value": "C_fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_325": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_203": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "preliminary/dataloader.py": {
        "torch": {
            "stack_33": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels, dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "labeled_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "labeled_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_dataset(labeled_indices, training_set)",
                            "Call"
                        ],
                        [
                            "MyDataset(labeled_set[0], labeled_set[1])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "unlabeled_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabeled_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_dataset(unlabeled_indices, training_set)",
                            "Call"
                        ],
                        [
                            "MyDataset(unlabeled_set[0], unlabeled_set[1])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data/mnist', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "preliminary/main.py": {
        "torch": {}
    },
    "preliminary/utils.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((trX, teX), axis=0)",
                            "Call"
                        ],
                        [
                            "X.transpose(0, 3, 1, 2) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(X).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "y_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((len(y), 10), dtype=np.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_vec).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(dir, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}