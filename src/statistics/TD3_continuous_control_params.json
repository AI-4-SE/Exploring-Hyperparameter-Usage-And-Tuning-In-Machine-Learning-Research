{
    "agents/ddpg_agent.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_local.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR_ACTOR",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_local.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR_CRITIC",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.from_numpy(states).float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.vstack([e.state for e in experiences if e is not None])).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_125": {
                "variable": {
                    "value": "critic_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_expected",
                    "possible_values": [
                        [
                            "self.critic_local(states, actions)",
                            "Call"
                        ],
                        [
                            "self.critic_local(states, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Q_targets",
                    "possible_values": [
                        [
                            "rewards + gamma * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ],
                        [
                            "rewards + gamma * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.state for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "actions",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.action for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "rewards",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.reward for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "next_states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.next_state for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "dones",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "is_weights",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_weights",
                    "possible_values": [
                        [
                            "torch.from_numpy(is_weights).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_175": {
                "variable": {
                    "value": "errors",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_expected - Q_targets",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__129": {
                "parameters": {
                    "value": "self.critic_local.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__183": {
                "parameters": {
                    "value": "self.critic_local.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mse_loss_178": {
                "input": {
                    "value": "Q_expected",
                    "possible_values": [
                        [
                            "self.critic_local(states, actions)",
                            "Call"
                        ],
                        [
                            "self.critic_local(states, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Q_targets",
                    "possible_values": [
                        [
                            "rewards + gamma * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ],
                        [
                            "rewards + gamma * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "agents/ddpg_agent_multi.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_local.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR_ACTOR",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_local.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR_CRITIC",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.state for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "actions",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.action for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "rewards",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.reward for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "next_states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.next_state for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "dones",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "is_weights",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_weights",
                    "possible_values": [
                        [
                            "torch.from_numpy(is_weights).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_101": {
                "variable": {
                    "value": "errors",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_expected - Q_targets",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__108": {
                "parameters": {
                    "value": "self.critic_local.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mse_loss_103": {
                "input": {
                    "value": "Q_expected",
                    "possible_values": [
                        [
                            "self.critic_local(states, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Q_targets",
                    "possible_values": [
                        [
                            "rewards + gamma * Q_targets_next * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "agents/multi_agent.py": {
        "torch": {
            "stack_83": {
                "variable": {
                    "value": "errors",
                    "possible_values": []
                },
                "tensors": {
                    "value": "errors",
                    "possible_values": [
                        [
                            "agent.learn(idxs, experiences, is_weights, GAMMA)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(errors)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(errors, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "errors",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "possible_values": [
                        [
                            "agent.learn(idxs, experiences, is_weights, GAMMA)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(errors)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(errors, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "torch.stack(error_list)",
                    "possible_values": []
                }
            },
            "stack_81": {
                "tensors": {
                    "value": "error_list",
                    "possible_values": [
                        [
                            "update_dict[index]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "agents/td3_agent.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor_local.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_actor",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.twin_critic_local.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_critic",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.from_numpy(states).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_176": {
                "variable": {
                    "value": "target_Q",
                    "possible_values": []
                },
                "input": {
                    "value": "Q1_targets",
                    "possible_values": []
                }
            },
            "clip_grad_norm__186": {
                "parameters": {
                    "value": "self.twin_critic_local.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "self.actor_local.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "str(Path(self.model_dir, 'actor.pth'))",
                    "possible_values": []
                }
            },
            "save_220": {
                "obj": {
                    "value": "self.actor_target.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "str(Path(self.model_dir, 'actor_target.pth'))",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "self.twin_critic_local.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "str(Path(self.model_dir, 'twin_critic.pth'))",
                    "possible_values": []
                }
            },
            "save_222": {
                "obj": {
                    "value": "self.twin_critic_target.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "str(Path(self.model_dir, 'twin_critic_target.pth'))",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mse_loss_181": {
                "input": {
                    "value": "expected_Q2",
                    "possible_values": []
                },
                "target": {
                    "value": "target_Q",
                    "possible_values": [
                        [
                            "torch.min(Q1_targets, Q2_targets)",
                            "Call"
                        ],
                        [
                            "rewards + self.discount * target_Q * (1 - dones)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__197": {
                "parameters": {
                    "value": "self.actor_local.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_225": {
                "f": {
                    "value": "str(Path(self.model_dir, 'actor.pth'))",
                    "possible_values": []
                }
            },
            "load_226": {
                "f": {
                    "value": "str(Path(self.model_dir, 'actor_target.pth'))",
                    "possible_values": []
                }
            },
            "load_227": {
                "f": {
                    "value": "str(Path(self.model_dir, 'twin_critic.pth'))",
                    "possible_values": []
                }
            },
            "load_228": {
                "f": {
                    "value": "str(Path(self.model_dir, 'twin_critic_target.pth'))",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_like_166": {
                "input": {
                    "value": "actions",
                    "possible_values": [
                        [
                            "self.actor_local(states).cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "actions + np.random.normal(0, self.action_val_high * self.exploration_noise, self.action_size)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "manual_seed_28": {
                "variable": {
                    "value": "self.seed",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_size",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc1(state))",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "possible_values": []
                }
            },
            "manual_seed_85": {
                "variable": {
                    "value": "self.seed",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fcs1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fcs1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_87": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fcs1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fcs1_units + action_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc2_units",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.fc3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "xs",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fcs1(state))",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, action)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "possible_values": []
                }
            },
            "manual_seed_119": {
                "variable": {
                    "value": "self.seed",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.c1_fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size + action_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_124": {
                "variable": {
                    "value": "self.c1_bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.c1_fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.c1_fc3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.critic1",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.c1_fc1",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.c2_fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size + action_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_139": {
                "variable": {
                    "value": "self.c2_bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.c2_fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc1_units",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ],
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2_units",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.c2_fc3",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc2_units",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ],
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.critic2",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.c2_fc1",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "sa",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, action)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "sa",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, action)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "input": {
                    "value": "self.fc3(x)",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "replay_buffers/per_nstep.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "next_state",
                    "possible_values": []
                }
            },
            "manual_seed_173": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "state_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "state_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "possible_values": []
                }
            }
        }
    },
    "replay_buffers/prioritized_experience_replay.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "manual_seed_130": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "replay_buffers/replay_buffer.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.state for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "actions",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.action for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "rewards",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.reward for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "next_states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.next_state for e in experiences if e is not None])",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "dones",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}