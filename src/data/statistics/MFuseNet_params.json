{
    "dataloader/MBdatalist.py": {
        "torch": {}
    },
    "dataloader/MBloader.py": {
        "torch": {}
    },
    "dataloader/preprocess.py": {
        "torch": {
            "randperm_164": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fuse.py": {
        "torch": {
            "DataParallel_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FuseNetwork(args.maxdisp, 2)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "TrainImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MBloader.myImageFloder([train_left_bin, train_right_bin], train_img, train_disp, mode='3view', dispRange=args.maxdisp, training=True, augment=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "TestImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MBloader.myImageFloder([test_left_bin, test_right_bin], test_img, test_disp, mode='3view', dispRange=args.maxdisp, training=False, augment=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "log_path + 'model' + str(epoch) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "args.resume_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "log_path + 'model' + str(args.resume) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fuse_1cost.py": {
        "torch": {
            "DataParallel_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FuseNetwork(args.maxdisp, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "TrainImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MBloader.myImageFloder([train_left_bin, train_right_bin], train_img, train_disp, mode='3view', dispRange=args.maxdisp, training=True, augment=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "TestImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MBloader.myImageFloder([test_left_bin, test_right_bin], test_img, test_disp, mode='3view', dispRange=args.maxdisp, training=False, augment=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "log_path + 'model' + str(epoch) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "args.resume_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "log_path + 'model' + str(args.resume) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fuse_4cost.py": {
        "torch": {
            "DataParallel_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FuseNetwork(args.maxdisp, 4)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "TrainImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MBloader.myImageFloder([train_left_bin, train_right_bin, train_bottom_bin, train_top_bin], train_img, train_disp, mode='5view', dispRange=args.maxdisp, training=True, augment=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "TestImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MBloader.myImageFloder([test_left_bin, test_right_bin, test_bottom_bin, test_top_bin], test_img, test_disp, mode='5view', dispRange=args.maxdisp, training=False, augment=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "log_path + 'model' + str(epoch) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "args.resume_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_84": {
                "f": {
                    "value": "log_path + 'model' + str(args.resume) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fuse_utils.py": {
        "torch": {
            "smooth_l1_loss_29": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "disp[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_71": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_72": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "outdisp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "h + pad_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w + pad_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_135": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_136": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_142": {
                "variable": {
                    "value": "outdisp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "h + pad_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w + pad_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costL, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(left_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costL).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_182": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_183": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "costB",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.memmap(bottom_path, dtype=np.float32, shape=(1, d, w, h))",
                            "Call"
                        ],
                        [
                            "np.rot90(np.array(bottom), k=-1, axes=(2, 3)).copy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(bottom)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_193": {
                "variable": {
                    "value": "costB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "costT",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.memmap(top_path, dtype=np.float32, shape=(1, d, w, h))",
                            "Call"
                        ],
                        [
                            "np.rot90(np.array(top), k=-1, axes=(2, 3)).copy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(top)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_194": {
                "variable": {
                    "value": "costT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "outdisp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_250": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_255": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "np.squeeze(np.array(right_mem))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(costR).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "F.pad(costR, (0, pad_w, 0, pad_h))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_262": {
                "variable": {
                    "value": "outdisp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "h + pad_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w + pad_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "dispgt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ],
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ],
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_96": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outdisp[mask] - dispgt[mask]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "avgerr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ],
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ],
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_98": {
                "variable": {
                    "value": "rms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(diff ** 2).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "dispgt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ],
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ],
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_215": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outdisp[mask] - dispgt[mask]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_216": {
                "variable": {
                    "value": "avgerr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ],
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ],
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_217": {
                "variable": {
                    "value": "rms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(diff ** 2).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_275": {
                "variable": {
                    "value": "dispgt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ],
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ],
                        [
                            "Image.open(disp_path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.array(disp), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_279": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outdisp[mask] - dispgt[mask]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_280": {
                "variable": {
                    "value": "avgerr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ],
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ],
                        [
                            "torch.abs(outdisp[mask] - dispgt[mask])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_281": {
                "variable": {
                    "value": "rms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(diff ** 2).mean()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "Sequential_9": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=dilation if dilation > 1 else padding, dilation=dilation, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, padding=padding, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "*args": {
                    "value": "nn.ConvTranspose3d(in_planes, out_planes, kernel_size=kernel_size, padding=padding, stride=stride, output_padding=output_padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * disp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn3d(1, 4, kernel_size=7, stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_63": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "cdown1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.down1(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "cdown2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.down2(cdown1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "cup1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.relu(self.up1(cdown2)), cdown1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "cup1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.uconv1(cup1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "cup2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(F.relu(self.up2(cup1)), c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "cup2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.uconv2(cup2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(costs, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.concat(c))",
                            "Call"
                        ],
                        [
                            "F.relu(self.distill1(cup2)) + cup2",
                            "BinOp"
                        ],
                        [
                            "self.classify(c).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(costs, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.concat(c))",
                            "Call"
                        ],
                        [
                            "F.relu(self.distill2(c)) + c",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.distill3(c)) + c",
                            "BinOp"
                        ],
                        [
                            "self.classify(c).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "convbn3d(1, 4, kernel_size=7, stride=1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_120": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(costs, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.concat(c))",
                            "Call"
                        ],
                        [
                            "F.relu(self.distill1(cup2)) + cup2",
                            "BinOp"
                        ],
                        [
                            "self.classify(c).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(costs, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.concat(c))",
                            "Call"
                        ],
                        [
                            "F.relu(self.distill2(c)) + c",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.distill3(c)) + c",
                            "BinOp"
                        ],
                        [
                            "self.classify(c).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation if dilation > 1 else padding",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_14": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_15": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_19": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_79": {
                "input": {
                    "value": "self.dconv1(cdown1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "input": {
                    "value": "self.dconv21(cdown2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "input": {
                    "value": "self.dconv22(cdown2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "input": {
                    "value": "self.distill1(cup2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_133": {
                "input": {
                    "value": "self.distill2(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "input": {
                    "value": "self.distill3(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_85": {
                "input": {
                    "value": "self.up1(cdown2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "input": {
                    "value": "self.up2(cup1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}