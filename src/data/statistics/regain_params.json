{
    "notebooks/_graph-clustering/local_utils.py": {
        "sklearn": {
            "v_measure_score_83": {
                "labels_true": {
                    "value": "labels_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_true",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "notebooks/_kernel/kltgl_performance.py": {
        "sklearn": {
            "StratifiedKFold_29": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KFold_30": {
                "n_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/performance_utils.py": {
        "sklearn": {
            "Bunch_241": {
                "variable": {
                    "value": "ma_output",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "result",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "empirical_covariance_174": {
                "variable": {
                    "value": "emp_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_grid.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "data_grid.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "data_grid.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "data_grid.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "empirical_covariance_15": {
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "assume_centered": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empirical_covariance_234": {
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "assume_centered": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "regain/bayesian/_laplace_approximation.py": {
        "sklearn": {
            "fast_logdet_36": {
                "A": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/bayesian/gwishart_inference.py": {
        "sklearn": {
            "empirical_covariance_174": {
                "variable": {
                    "value": "emp_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((p, p))",
                            "Call"
                        ],
                        [
                            "X + np.triu(X, 1).T",
                            "BinOp"
                        ],
                        [
                            "check_array(X, ensure_min_features=2, ensure_min_samples=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Bunch_232": {
                "variable": {
                    "value": "GWpost",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Bunch_311": {
                "variable": {
                    "value": "GWprior",
                    "type": "variable",
                    "possible_values": []
                },
                "d0": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GWprior.d0",
                            "Attribute"
                        ],
                        [
                            "GWprior.d0",
                            "Attribute"
                        ],
                        [
                            "3 + n_dim - 1",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "S0": {
                    "value": "S0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GWprior.S0",
                            "Attribute"
                        ],
                        [
                            "GWprior.S0",
                            "Attribute"
                        ],
                        [
                            "(d0 - 2) * np.diag(np.diag(np.cov(X, bias=True)))",
                            "BinOp"
                        ],
                        [
                            "np.eye(n_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "lognormconst": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lognormconstDiag": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "check_array_460": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((p, p))",
                            "Call"
                        ],
                        [
                            "X + np.triu(X, 1).T",
                            "BinOp"
                        ],
                        [
                            "check_array(X, ensure_min_features=2, ensure_min_samples=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fast_logdet_132": {
                "A": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((p, p))",
                            "Call"
                        ],
                        [
                            "X + np.triu(X, 1).T",
                            "BinOp"
                        ],
                        [
                            "check_array(X, ensure_min_features=2, ensure_min_samples=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LassoLars_101": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(G, dtype=float)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/bayesian/stats.py": {
        "sklearn": {}
    },
    "regain/bayesian/wishart_distribution_.py": {
        "sklearn": {
            "make_sparse_spd_matrix_241": {
                "variable": {
                    "value": "Sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "fast_logdet_68": {
                "A": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.multivariate_normal(mu, Sigma, size=n_samples)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fast_logdet_72": {
                "A": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fast_logdet_110": {
                "A": {
                    "value": "self.S",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fast_logdet_112": {
                "A": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.multivariate_normal(mu, Sigma, size=n_samples)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/bayesian/wishart_process_.py": {
        "sklearn": {
            "Bunch_91": {
                "variable": {
                    "value": "current_state",
                    "type": "variable",
                    "possible_values": []
                },
                "xx": {
                    "value": "umat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_gp(K, nu=nu, p=p)",
                            "Call"
                        ],
                        [
                            "sample_gp(K, nu=nu, p=p)",
                            "Call"
                        ]
                    ]
                },
                "V": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GWP_construct(np.real(umat), L)",
                            "Call"
                        ]
                    ]
                },
                "L": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tril(np.random.randn(p, p))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.linalg.cholesky(cov)",
                            "Call"
                        ],
                        [
                            "np.linalg.cholesky(cov)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "log_likelihood": {
                    "value": "likelihood(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "check_X_y_254": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_X_y_349": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rbf_kernel_195": {
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "Y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * inverse_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ExpSineSquared_202": {
                "length_scale": {
                    "value": "inverse_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empirical_covariance_277": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/covariance/graphical_lasso_.py": {
        "sklearn": {
            "check_array_332": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(X, ensure_min_features=2, ensure_min_samples=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empirical_covariance_338": {
                "variable": {
                    "value": "emp_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(X, ensure_min_features=2, ensure_min_samples=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "assume_centered": {
                    "value": "self.assume_centered",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fast_logdet_61": {
                "A": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/covariance/infimal_convolution_.py": {
        "sklearn": {}
    },
    "regain/covariance/kernel_latent_time_graphical_lasso_.py": {
        "sklearn": {
            "check_is_fitted_818": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "['similarity_matrix_']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_720": {
                "variable": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "complete",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RBF_725": {
                "length_scale": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "regain/covariance/kernel_time_graphical_lasso_.py": {
        "sklearn": {
            "check_is_fitted_754": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "['similarity_matrix_']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_672": {
                "variable": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "complete",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RBF_677": {
                "length_scale": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "regain/covariance/latent_time_graphical_lasso_.py": {
        "sklearn": {}
    },
    "regain/covariance/latent_time_matrix_decomposition.py": {
        "sklearn": {}
    },
    "regain/covariance/time_graphical_lasso_.py": {
        "sklearn": {
            "check_X_y_444": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_X_y_485": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empirical_covariance_457": {
                "X": {
                    "value": "X[y == cl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "assume_centered": {
                    "value": "self.assume_centered",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empirical_covariance_490": {
                "X": {
                    "value": "X[y == cl] - self.location_[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "assume_centered": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "regain/datasets/base.py": {
        "sklearn": {
            "Bunch_120": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.random.multivariate_normal(np.zeros(n_dim_obs), sigma, size=n_samples) for sigma in sigmas])",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.array(samples)",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.array(samples)",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "thetas": {
                    "value": "np.array(thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(range(len(sigmas)), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(len(thetas)), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(len(thetas)), n_samples).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "thetas_observed": {
                    "value": "np.array(thetas_obs)",
                    "type": "Call",
                    "possible_values": []
                },
                "ells": {
                    "value": "np.array(ells)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bunch_135": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.random.multivariate_normal(np.zeros(n_dim_obs), sigma, size=n_samples) for sigma in sigmas])",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.array(samples)",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.array(samples)",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "thetas": {
                    "value": "np.array(thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(range(len(sigmas)), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(len(thetas)), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(len(thetas)), n_samples).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "Bunch_146": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.random.multivariate_normal(np.zeros(n_dim_obs), sigma, size=n_samples) for sigma in sigmas])",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.array(samples)",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.array(samples)",
                            "Call"
                        ],
                        [
                            "data.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "thetas": {
                    "value": "np.array(thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(range(len(sigmas)), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(len(thetas)), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(len(thetas)), n_samples).astype(int)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regain/datasets/gaussian.py": {
        "sklearn": {
            "check_random_state_98": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "random_state",
                            "Method Argument"
                        ],
                        [
                            "random_state",
                            "Method Argument"
                        ],
                        [
                            "random_state",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_143": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "random_state",
                            "Method Argument"
                        ],
                        [
                            "random_state",
                            "Method Argument"
                        ],
                        [
                            "random_state",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "make_sparse_spd_matrix_565": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "n_dim_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "make_low_rank_matrix_566": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_dim_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "n_features": {
                    "value": "n_dim_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "effective_rank": {
                    "value": "n_dim_lat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_dim_lat",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "make_sparse_spd_matrix_573": {
                "dim": {
                    "value": "n_dim_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "make_low_rank_matrix_574": {
                "n_samples": {
                    "value": "n_dim_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "n_features": {
                    "value": "n_dim_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "n_dim_obs",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "effective_rank": {
                    "value": "n_dim_lat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "n_dim_lat",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/datasets/kernels.py": {
        "sklearn": {
            "Bunch_302": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((id_cluster.size, n_dim))",
                            "Call"
                        ],
                        [
                            "np.empty((id_cluster.size, n_dim))",
                            "Call"
                        ],
                        [
                            "np.empty((n_samples * len(clusters), n_dim))",
                            "Call"
                        ],
                        [
                            "np.vstack([np.random.multivariate_normal(np.zeros(n_dim), c, size=n_samples) for c in covs])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.arange(T), len(clusters) * n_samples // T)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(T), len(clusters) * n_samples // T)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(len(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(len(covs)), n_samples)",
                            "Call"
                        ]
                    ]
                },
                "id_cluster": {
                    "value": "id_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.asarray(list(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.asarray(list(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(clusters, n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(labels_pred, n_samples)",
                            "Call"
                        ]
                    ]
                },
                "covs": {
                    "value": "covs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[linalg.pinvh(t) for t in thetas]",
                            "ListComp"
                        ]
                    ]
                },
                "precs": {
                    "value": "precs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "id_cluster_group": {
                    "value": "np.asarray(id_cluster_group)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bunch_444": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((id_cluster.size, n_dim))",
                            "Call"
                        ],
                        [
                            "np.empty((id_cluster.size, n_dim))",
                            "Call"
                        ],
                        [
                            "np.empty((n_samples * len(clusters), n_dim))",
                            "Call"
                        ],
                        [
                            "np.vstack([np.random.multivariate_normal(np.zeros(n_dim), c, size=n_samples) for c in covs])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.arange(T), len(clusters) * n_samples // T)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(T), len(clusters) * n_samples // T)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(len(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(len(covs)), n_samples)",
                            "Call"
                        ]
                    ]
                },
                "id_cluster": {
                    "value": "id_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.asarray(list(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.asarray(list(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(clusters, n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(labels_pred, n_samples)",
                            "Call"
                        ]
                    ]
                },
                "precs": {
                    "value": "precs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "sparse_precs": {
                    "value": "sparse_precs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "id_cluster_group": {
                    "value": "np.asarray(id_cluster_group)",
                    "type": "Call",
                    "possible_values": []
                },
                "inv": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.block([[np.zeros_like(get_out_diag(c))] * max(0, k - 1) + ([get_out_diag(clusters[k - 1]).T] if k > 0 else []) + [get_diag(c)] + ([get_out_diag(c)] if k < len(clusters) - 1 else []) + [np.zeros_like(get_out_diag(c))] * max(len(clusters) - 2 - k, 0) for (k, c) in enumerate(clusters)])",
                            "Call"
                        ],
                        [
                            "inv + (0.1 + abs(lambda_min)) * np.eye(inv.shape[0])",
                            "BinOp"
                        ],
                        [
                            "np.block([[np.zeros_like(get_out_diag(c))] * max(0, k - 1) + ([get_out_diag(clusters[k - 1]).T] if k > 0 else []) + [get_diag(c)] + ([get_out_diag(c)] if k < len(clusters) - 1 else []) + [np.zeros_like(get_out_diag(c))] * max(len(clusters) - 2 - k, 0) for (k, c) in enumerate(clusters)])",
                            "Call"
                        ]
                    ]
                }
            },
            "Bunch_583": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((id_cluster.size, n_dim))",
                            "Call"
                        ],
                        [
                            "np.empty((id_cluster.size, n_dim))",
                            "Call"
                        ],
                        [
                            "np.empty((n_samples * len(clusters), n_dim))",
                            "Call"
                        ],
                        [
                            "np.vstack([np.random.multivariate_normal(np.zeros(n_dim), c, size=n_samples) for c in covs])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.arange(T), len(clusters) * n_samples // T)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(T), len(clusters) * n_samples // T)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(len(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(len(covs)), n_samples)",
                            "Call"
                        ]
                    ]
                },
                "id_cluster": {
                    "value": "id_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.asarray(list(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.asarray(list(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(clusters, n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(labels_pred, n_samples)",
                            "Call"
                        ]
                    ]
                },
                "precs": {
                    "value": "np.array(precs)",
                    "type": "Call",
                    "possible_values": []
                },
                "sparse_precs": {
                    "value": "np.array(sparse_precs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inv": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.block([[np.zeros_like(get_out_diag(c))] * max(0, k - 1) + ([get_out_diag(clusters[k - 1]).T] if k > 0 else []) + [get_diag(c)] + ([get_out_diag(c)] if k < len(clusters) - 1 else []) + [np.zeros_like(get_out_diag(c))] * max(len(clusters) - 2 - k, 0) for (k, c) in enumerate(clusters)])",
                            "Call"
                        ],
                        [
                            "inv + (0.1 + abs(lambda_min)) * np.eye(inv.shape[0])",
                            "BinOp"
                        ],
                        [
                            "np.block([[np.zeros_like(get_out_diag(c))] * max(0, k - 1) + ([get_out_diag(clusters[k - 1]).T] if k > 0 else []) + [get_diag(c)] + ([get_out_diag(c)] if k < len(clusters) - 1 else []) + [np.zeros_like(get_out_diag(c))] * max(len(clusters) - 2 - k, 0) for (k, c) in enumerate(clusters)])",
                            "Call"
                        ]
                    ]
                }
            },
            "AgglomerativeClustering_676": {
                "variable": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(cluster_series).size",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "complete",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Bunch_681": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((id_cluster.size, n_dim))",
                            "Call"
                        ],
                        [
                            "np.empty((id_cluster.size, n_dim))",
                            "Call"
                        ],
                        [
                            "np.empty((n_samples * len(clusters), n_dim))",
                            "Call"
                        ],
                        [
                            "np.vstack([np.random.multivariate_normal(np.zeros(n_dim), c, size=n_samples) for c in covs])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.arange(T), len(clusters) * n_samples // T)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(T), len(clusters) * n_samples // T)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(len(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.arange(len(covs)), n_samples)",
                            "Call"
                        ]
                    ]
                },
                "id_cluster": {
                    "value": "id_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.asarray(list(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(np.asarray(list(clusters)), n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(clusters, n_samples)",
                            "Call"
                        ],
                        [
                            "np.repeat(labels_pred, n_samples)",
                            "Call"
                        ]
                    ]
                },
                "precs": {
                    "value": "np.array(thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "thetas": {
                    "value": "np.array(thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "sparse_precs": {
                    "value": "np.array(thetas)",
                    "type": "Call",
                    "possible_values": []
                },
                "cluster_reps": {
                    "value": "cluster_reps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "cluster_series": {
                    "value": "cluster_series",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(range(n_clusters), len(pos) // n_clusters + 1)[:len(pos)]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ExpSineSquared_57": {
                "periodicity": {
                    "value": "periodicity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('periodicity', np.pi)",
                            "Call"
                        ]
                    ]
                },
                "length_scale": {
                    "value": "length_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('length_scale', 2)",
                            "Call"
                        ],
                        [
                            "kwargs.get('length_scale', 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "RBF_89": {
                "length_scale": {
                    "value": "length_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('length_scale', 2)",
                            "Call"
                        ],
                        [
                            "kwargs.get('length_scale', 1.0)",
                            "Call"
                        ]
                    ]
                },
                "length_scale_bounds": {
                    "value": "length_scale_bounds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('length_scale_bounds', (1e-05, 100000.0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regain/datasets/multi_class.py": {
        "sklearn": {
            "Bunch_232": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.random.multivariate_normal(np.zeros(n_dim_obs), sigma, size=n_samples) for sigma in sigmas])",
                            "Call"
                        ],
                        [
                            "np.array([ising_sampler(t, np.zeros(n_dim_obs), n=n_samples, responses=[-1, 1]) for t in networks])",
                            "Call"
                        ],
                        [
                            "np.array([poisson_sampler(t, variances=np.zeros(n_dim_obs), n_samples=n_samples) for t in networks])",
                            "Call"
                        ]
                    ]
                },
                "thetas": {
                    "value": "np.array(networks)",
                    "type": "Call",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "Bunch_239": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.random.multivariate_normal(np.zeros(n_dim_obs), sigma, size=n_samples) for sigma in sigmas])",
                            "Call"
                        ],
                        [
                            "np.array([ising_sampler(t, np.zeros(n_dim_obs), n=n_samples, responses=[-1, 1]) for t in networks])",
                            "Call"
                        ],
                        [
                            "np.array([poisson_sampler(t, variances=np.zeros(n_dim_obs), n_samples=n_samples) for t in networks])",
                            "Call"
                        ]
                    ]
                },
                "thetas": {
                    "value": "np.array(networks)",
                    "type": "Call",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "Bunch_246": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.random.multivariate_normal(np.zeros(n_dim_obs), sigma, size=n_samples) for sigma in sigmas])",
                            "Call"
                        ],
                        [
                            "np.array([ising_sampler(t, np.zeros(n_dim_obs), n=n_samples, responses=[-1, 1]) for t in networks])",
                            "Call"
                        ],
                        [
                            "np.array([poisson_sampler(t, variances=np.zeros(n_dim_obs), n_samples=n_samples) for t in networks])",
                            "Call"
                        ]
                    ]
                },
                "thetas": {
                    "value": "np.array(networks)",
                    "type": "Call",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ],
                        [
                            "np.vstack(data)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ],
                        [
                            "np.repeat(range(n_classes), n_samples).astype(int)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regain/discriminant_analysis.py": {
        "sklearn": {
            "check_X_y_107": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y)",
                            "Call"
                        ],
                        [
                            "np.unique(y, return_inverse=True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_array_148": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "deprecated_144": {
                "extra": {
                    "value": "it will be removed in v0.2.0. Use `_decision_function` instead",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_is_fitted_146": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "classes_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_196": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y)",
                            "Call"
                        ],
                        [
                            "np.unique(y, return_inverse=True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "self.predict(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fast_logdet_157": {
                "A": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "regain/forward_backward/time_graphical_lasso_.py": {
        "sklearn": {}
    },
    "regain/generalized_linear_model/base.py": {
        "sklearn": {}
    },
    "regain/generalized_linear_model/glm_gaussian.py": {
        "sklearn": {
            "check_array_182": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/generalized_linear_model/glm_ising.py": {
        "sklearn": {
            "check_array_110": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "warm_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_array_260": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogisticRegression_285": {
                "C": {
                    "value": "1 / self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "verbose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(0, self.verbose - 1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "regain/generalized_linear_model/glm_poisson.py": {
        "sklearn": {
            "check_array_249": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "np.hstack((X, np.ones((X.shape[0], 1))))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/generalized_linear_model/glm_time_ising.py": {
        "sklearn": {
            "check_X_y_392": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_X_y_511": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_X_y_625": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_is_fitted_714": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "['similarity_matrix_']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_667": {
                "variable": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "complete",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RBF_673": {
                "length_scale": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "regain/generalized_linear_model/glm_time_poisson.py": {
        "sklearn": {
            "check_X_y_381": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.around(X)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_X_y_500": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.around(X)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_X_y_616": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.around(X)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "np.array([X[y == cl] for cl in self.classes_])",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse=False, dtype=np.float64, order='C', ensure_min_features=2, estimator=self)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_is_fitted_710": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "['similarity_matrix_']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_641": {
                "variable": {
                    "value": "labels_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "complete",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RBF_646": {
                "length_scale": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "regain/linear_model/group_lasso_overlap_.py": {
        "sklearn": {
            "deprecated_425": {
                "extra": {
                    "value": " and will be removed in 0.19",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LabelBinarizer_463": {
                "variable": {
                    "value": "self._label_binarizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "neg_label": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "check_X_y_269": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse='csc', order='F', dtype=[np.float64, np.float32], copy=self.copy_X and self.fit_intercept, multi_output=True, y_numeric=True)",
                            "Call"
                        ],
                        [
                            "_pre_fit(X, y, None, self.precompute, self.normalize, self.fit_intercept, copy=False)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.zeros(len(g)) for g in groups]",
                            "ListComp"
                        ],
                        [
                            "np.zeros(d)",
                            "Call"
                        ],
                        [
                            "y + rho * (P_star_xk1_bar - z)",
                            "BinOp"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse='csc', order='F', dtype=[np.float64, np.float32], copy=self.copy_X and self.fit_intercept, multi_output=True, y_numeric=True)",
                            "Call"
                        ],
                        [
                            "check_array(y, order='F', copy=False, dtype=X.dtype.type, ensure_2d=False)",
                            "Call"
                        ],
                        [
                            "_pre_fit(X, y, None, self.precompute, self.normalize, self.fit_intercept, copy=False)",
                            "Call"
                        ],
                        [
                            "y[:, None]",
                            "Subscript"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "csc",
                    "type": "str",
                    "possible_values": []
                },
                "order": {
                    "value": "F",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[np.float64, np.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "copy": {
                    "value": "self.copy_X and self.fit_intercept",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "multi_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "y_numeric": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_array_279": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.zeros(len(g)) for g in groups]",
                            "ListComp"
                        ],
                        [
                            "np.zeros(d)",
                            "Call"
                        ],
                        [
                            "y + rho * (P_star_xk1_bar - z)",
                            "BinOp"
                        ],
                        [
                            "check_X_y(X, y, accept_sparse='csc', order='F', dtype=[np.float64, np.float32], copy=self.copy_X and self.fit_intercept, multi_output=True, y_numeric=True)",
                            "Call"
                        ],
                        [
                            "check_array(y, order='F', copy=False, dtype=X.dtype.type, ensure_2d=False)",
                            "Call"
                        ],
                        [
                            "_pre_fit(X, y, None, self.precompute, self.normalize, self.fit_intercept, copy=False)",
                            "Call"
                        ],
                        [
                            "y[:, None]",
                            "Subscript"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "order": {
                    "value": "F",
                    "type": "str",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ensure_2d": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_is_fitted_452": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "n_iter_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "safe_sparse_dot_454": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, accept_sparse='csc', order='F', dtype=[np.float64, np.float32], copy=self.copy_X and self.fit_intercept, multi_output=True, y_numeric=True)",
                            "Call"
                        ],
                        [
                            "_pre_fit(X, y, None, self.precompute, self.normalize, self.fit_intercept, copy=False)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.coef_.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "regain/model_selection/_bayesian_optimization.py": {
        "sklearn": {
            "deprecated_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "check_cv_212": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "classifier": {
                    "value": "is_classifier(self.estimator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_247": {
                "variable": {
                    "value": "self.best_estimator_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.estimator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_classifier_212": {
                "estimator": {
                    "value": "self.estimator",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "regain/model_selection/stability_optimization.py": {
        "sklearn": {
            "check_cv_327": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(X.shape[0])",
                            "Call"
                        ],
                        [
                            "indexable(X, y, groups)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "classifier": {
                    "value": "is_classifier(estimator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "indexable_356": {
                "variable": {
                    "value": "(X, y, groups)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*iterables": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexable(X, y, groups)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clone_358": {
                "variable": {
                    "value": "base_estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self.estimator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StratifiedShuffleSplit_314": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "self.sampling_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.n_repetitions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_440": {
                "variable": {
                    "value": "self.best_estimator_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "estimator": {
                    "value": "base_estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clone(self.estimator)",
                            "Call"
                        ]
                    ]
                }
            },
            "StratifiedShuffleSplit_320": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.n_repetitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "self.sampling_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "X.shape[0] - self.sampling_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "StratifiedShuffleSplit_282": {
                "train_size": {
                    "value": "sampling_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "n_splits": {
                    "value": "n_repetitions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_classifier_327": {
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.estimator",
                            "Attribute"
                        ],
                        [
                            "estimator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clone_390": {
                "estimator": {
                    "value": "base_estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clone(self.estimator)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regain/plotting/results.py": {
        "sklearn": {
            "auc_66": {
                "variable": {
                    "value": "mean_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_57": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(true != 0).astype(int).ravel()",
                            "Call"
                        ],
                        [
                            "(~np.isclose(true, 0, rtol=1e-07)).astype(int).ravel()",
                            "Call"
                        ],
                        [
                            "[(~np.isclose(t, 0, rtol=1e-07)).astype(int).ravel() for t in true]",
                            "ListComp"
                        ],
                        [
                            "(~np.isclose(true, 0, rtol=1e-07)).astype(int).ravel()",
                            "Call"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ],
                        [
                            "true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p in enumerate(preds)",
                            "Call"
                        ],
                        [
                            "preds",
                            "variable"
                        ],
                        [
                            "preds",
                            "variable"
                        ],
                        [
                            "p in enumerate(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_60": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(true, p)",
                            "Call"
                        ],
                        [
                            "curve_func(true, preds[0])",
                            "Call"
                        ],
                        [
                            "curve_func(t, p)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(true, p)",
                            "Call"
                        ],
                        [
                            "curve_func(true, preds[0])",
                            "Call"
                        ],
                        [
                            "curve_func(t, p)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_148": {
                "variable": {
                    "value": "mean_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_116": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(true, p)",
                            "Call"
                        ],
                        [
                            "curve_func(true, preds[0])",
                            "Call"
                        ],
                        [
                            "curve_func(t, p)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(true, p)",
                            "Call"
                        ],
                        [
                            "curve_func(true, preds[0])",
                            "Call"
                        ],
                        [
                            "curve_func(t, p)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_119": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(true, p)",
                            "Call"
                        ],
                        [
                            "curve_func(true, preds[0])",
                            "Call"
                        ],
                        [
                            "curve_func(t, p)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(true, p)",
                            "Call"
                        ],
                        [
                            "curve_func(true, preds[0])",
                            "Call"
                        ],
                        [
                            "curve_func(t, p)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_140": {
                "x": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(true, p)",
                            "Call"
                        ],
                        [
                            "curve_func(true, preds[0])",
                            "Call"
                        ],
                        [
                            "curve_func(t, p)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(true, p)",
                            "Call"
                        ],
                        [
                            "curve_func(true, preds[0])",
                            "Call"
                        ],
                        [
                            "curve_func(t, p)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regain/prox.py": {
        "sklearn": {}
    },
    "regain/scores.py": {
        "sklearn": {
            "fast_logdet_37": {
                "A": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(precision)",
                            "Call"
                        ],
                        [
                            "precision",
                            "Method Argument"
                        ],
                        [
                            "precision",
                            "Method Argument"
                        ],
                        [
                            "precision",
                            "Method Argument"
                        ],
                        [
                            "precision",
                            "Method Argument"
                        ],
                        [
                            "precision",
                            "Method Argument"
                        ],
                        [
                            "precision",
                            "Method Argument"
                        ],
                        [
                            "precision",
                            "Method Argument"
                        ],
                        [
                            "precision",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fast_logdet_75": {
                "A": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision.shape[0]",
                            "Subscript"
                        ],
                        [
                            "zip(emp_cov, precision)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regain/tests/test_graphical_lasso.py": {
        "sklearn": {}
    },
    "regain/utils.py": {
        "sklearn": {
            "average_precision_score_420": {
                "variable": {
                    "value": "average_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(flatten([squareform(x, checks=None) for x in pred]))",
                            "Call"
                        ],
                        [
                            "squareform(pred, checks=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_421": {
                "variable": {
                    "value": "mcc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "regain/validation.py": {
        "sklearn": {
            "check_array_94": {
                "array": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ensure_min_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ensure_min_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "regain/wrapper/__init__.py": {
        "sklearn": {
            "make_regression_144": {
                "variable": {
                    "value": "(X, y, coef)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "coef": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}