{
    "data_gen/data_set.py": {
        "torch": {
            "zeros_6": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "tot_message_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pow(2, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_7": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultivariateNormal_42": {
                "variable": {
                    "value": "Chan",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(2 * tap_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "chan_var * torch.eye(2 * tap_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_47": {
                "variable": {
                    "value": "Chan",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(2 * tap_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "chan_var * torch.eye(2 * tap_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_10": {
                "variable": {
                    "value": "rand_lst",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "tot_message_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pow(2, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_33": {
                "variable": {
                    "value": "Chan",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(2 * tap_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "chan_var * torch.eye(2 * tap_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "h_toy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * tap_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "h_toy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * tap_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "2 * tap_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "2 * tap_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "2 * tap_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_43": {
                "n": {
                    "value": "2 * tap_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_48": {
                "n": {
                    "value": "2 * tap_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_34": {
                "n": {
                    "value": "2 * tap_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_127": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.cuda_ind) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_212": {
                "variable": {
                    "value": "writer_meta_training",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "dir_meta_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_dir + 'TB/' + 'meta_training'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MultivariateNormal_286": {
                "variable": {
                    "value": "Noise",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(actual_channel_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "noise_var * torch.eye(actual_channel_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_138": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultivariateNormal_290": {
                "variable": {
                    "value": "Noise_relax",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(actual_channel_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "pow(args.relax_sigma, 2) * torch.eye(actual_channel_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_166": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "actual_channel_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.channel_num * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_312": {
                "obj": {
                    "value": "rx_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH_before_adapt_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_dir + 'saved_model/' + 'rx/' + 'before_adapt/' + 'init_net'",
                            "BinOp"
                        ],
                        [
                            "args.path_for_meta_trained_net_rx",
                            "Attribute"
                        ],
                        [
                            "PATH_before_adapt_rx_intermediate + 'best_model_based_on_meta_training_loss'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_313": {
                "obj": {
                    "value": "tx_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH_before_adapt_tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_dir + 'saved_model/' + 'tx/' + 'before_adapt/' + 'init_net'",
                            "BinOp"
                        ],
                        [
                            "args.path_for_meta_trained_net_tx",
                            "Attribute"
                        ],
                        [
                            "PATH_before_adapt_tx_intermediate + 'best_model_based_on_meta_training_loss'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_167": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_286": {
                "n": {
                    "value": "actual_channel_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.channel_num * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_290": {
                "*size": {
                    "value": "actual_channel_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.channel_num * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_291": {
                "n": {
                    "value": "actual_channel_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.channel_num * 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nets/meta_receiver.py": {
        "torch": {
            "Tanh_13": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_12": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4, b4)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4)",
                            "Call"
                        ],
                        [
                            "complex_conv_transpose(h_inv, x)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3, b3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + rtn_gap]",
                            "Subscript"
                        ],
                        [
                            "var[idx + rtn_gap]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + rtn_gap + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4, b4)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4)",
                            "Call"
                        ],
                        [
                            "complex_conv_transpose(h_inv, x)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3, b3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + rtn_gap]",
                            "Subscript"
                        ],
                        [
                            "var[idx + rtn_gap]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_30": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4, b4)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4)",
                            "Call"
                        ],
                        [
                            "complex_conv_transpose(h_inv, x)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3, b3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_rtn_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx]",
                            "Subscript"
                        ],
                        [
                            "var[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_rtn_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_33": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, w_rtn_1, b_rtn_1)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_2, b_rtn_2)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_3, b_rtn_3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w_rtn_1)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_2)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_3)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_rtn_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 2]",
                            "Subscript"
                        ],
                        [
                            "var[idx + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_rtn_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_36": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, w_rtn_1, b_rtn_1)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_2, b_rtn_2)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_3, b_rtn_3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w_rtn_1)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_2)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_3)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_rtn_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 4]",
                            "Subscript"
                        ],
                        [
                            "var[idx + 2]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b_rtn_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_40": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4, b4)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4)",
                            "Call"
                        ],
                        [
                            "complex_conv_transpose(h_inv, x)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3, b3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_rtn_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx]",
                            "Subscript"
                        ],
                        [
                            "var[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_43": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, w_rtn_1, b_rtn_1)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_2, b_rtn_2)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_3, b_rtn_3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w_rtn_1)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_2)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_3)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_rtn_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 2]",
                            "Subscript"
                        ],
                        [
                            "var[idx + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_46": {
                "variable": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, w_rtn_1, b_rtn_1)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_2, b_rtn_2)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_3, b_rtn_3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w_rtn_1)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_2)",
                            "Call"
                        ],
                        [
                            "self.tanh(h_inv)",
                            "Call"
                        ],
                        [
                            "F.linear(h_inv, w_rtn_3)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_rtn_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 4]",
                            "Subscript"
                        ],
                        [
                            "var[idx + 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4, b4)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4)",
                            "Call"
                        ],
                        [
                            "complex_conv_transpose(h_inv, x)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3, b3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx]",
                            "Subscript"
                        ],
                        [
                            "var[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4, b4)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w4)",
                            "Call"
                        ],
                        [
                            "complex_conv_transpose(h_inv, x)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3, b3)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w3)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx]",
                            "Subscript"
                        ],
                        [
                            "var[idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nets/meta_transmitter.py": {
        "torch": {
            "Tanh_13": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_44": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pow(x.shape[1], 0.5) * pow(0.5, 0.5) * x / x_norm",
                            "BinOp"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "pow(1 - pow(relax_sigma, 2), 0.5) * x",
                            "BinOp"
                        ],
                        [
                            "F.linear(x, w1, b1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2, b2)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_12": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pow(x.shape[1], 0.5) * pow(0.5, 0.5) * x / x_norm",
                            "BinOp"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "pow(1 - pow(relax_sigma, 2), 0.5) * x",
                            "BinOp"
                        ],
                        [
                            "F.linear(x, w1, b1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2, b2)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx]",
                            "Subscript"
                        ],
                        [
                            "var[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pow(x.shape[1], 0.5) * pow(0.5, 0.5) * x / x_norm",
                            "BinOp"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "pow(1 - pow(relax_sigma, 2), 0.5) * x",
                            "BinOp"
                        ],
                        [
                            "F.linear(x, w1, b1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2, b2)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx]",
                            "Subscript"
                        ],
                        [
                            "var[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pow(x.shape[1], 0.5) * pow(0.5, 0.5) * x / x_norm",
                            "BinOp"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "pow(1 - pow(relax_sigma, 2), 0.5) * x",
                            "BinOp"
                        ],
                        [
                            "F.linear(x, w1, b1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2, b2)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx]",
                            "Subscript"
                        ],
                        [
                            "var[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pow(x.shape[1], 0.5) * pow(0.5, 0.5) * x / x_norm",
                            "BinOp"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "pow(1 - pow(relax_sigma, 2), 0.5) * x",
                            "BinOp"
                        ],
                        [
                            "F.linear(x, w1, b1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2, b2)",
                            "Call"
                        ],
                        [
                            "F.linear(x, w2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var[idx]",
                            "Subscript"
                        ],
                        [
                            "var[idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nets/receiver.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.dec_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_neurons_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons_decoder",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "if_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.dec_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_neurons_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons_decoder",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "if_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_26": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.rtn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "if_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.rtn_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "if_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.rtn_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_inv_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * n_inv_filter",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "if_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_25": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/transmitter.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.enc_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "M",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_neurons_encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons_encoder",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "if_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.enc_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_neurons_encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons_encoder",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "if_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_16": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_23": {
                "variable": {
                    "value": "x_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_fc1(x)",
                            "Call"
                        ],
                        [
                            "self.activ(x)",
                            "Call"
                        ],
                        [
                            "self.enc_fc2(x)",
                            "Call"
                        ],
                        [
                            "pow(x.shape[1], 0.5) * pow(0.5, 0.5) * x / x_norm",
                            "BinOp"
                        ],
                        [
                            "pow(1 - pow(relax_sigma, 2), 0.5) * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "training/meta_train.py": {
        "torch": {
            "Adam_10": {
                "variable": {
                    "value": "meta_optimiser_tx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tx_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_meta_update",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_11": {
                "variable": {
                    "value": "meta_optimiser_rx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rx_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_meta_update",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_34": {
                "obj": {
                    "value": "rx_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "curr_path_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_before_adapt_rx_intermediate + str(epochs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_35": {
                "obj": {
                    "value": "tx_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "curr_path_tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_before_adapt_tx_intermediate + str(epochs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_122": {
                "obj": {
                    "value": "rx_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "curr_path_rx_best_training_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_before_adapt_rx_intermediate + 'best_model_based_on_meta_training_loss'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_123": {
                "obj": {
                    "value": "tx_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "curr_path_tx_best_training_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_before_adapt_tx_intermediate + 'best_model_based_on_meta_training_loss'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "training/test.py": {
        "torch": {
            "MultivariateNormal_17": {
                "variable": {
                    "value": "Noise_test",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(actual_channel_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "noise_var_test * torch.eye(actual_channel_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_62": {
                "variable": {
                    "value": "Noise_test",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(actual_channel_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "noise_var_test * torch.eye(actual_channel_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_9": {
                "f": {
                    "value": "PATH_after_adapt_tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_after_adapt_tx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_10": {
                "f": {
                    "value": "PATH_after_adapt_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_after_adapt_rx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "actual_channel_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actual_channel_num",
                            "Method Argument"
                        ],
                        [
                            "actual_channel_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "actual_channel_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actual_channel_num",
                            "Method Argument"
                        ],
                        [
                            "actual_channel_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_18": {
                "n": {
                    "value": "actual_channel_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actual_channel_num",
                            "Method Argument"
                        ],
                        [
                            "actual_channel_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_47": {
                "input": {
                    "value": "out_test[ind_mb]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_63": {
                "n": {
                    "value": "actual_channel_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actual_channel_num",
                            "Method Argument"
                        ],
                        [
                            "actual_channel_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_78": {
                "input": {
                    "value": "out_test[ind_mb]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "training/train.py": {
        "torch": {
            "Adam_18": {
                "variable": {
                    "value": "rx_testtraining_optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rx_net_for_testtraining.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_testtraining",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "tx_net_for_testtraining.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH_after_adapt_tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_after_adapt_tx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_45": {
                "obj": {
                    "value": "rx_net_for_testtraining.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH_after_adapt_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_after_adapt_rx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_13": {
                "f": {
                    "value": "PATH_before_adapt_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_before_adapt_rx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_9": {
                "f": {
                    "value": "PATH_before_adapt_tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PATH_before_adapt_tx",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/basic_funcs.py": {
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_tensor.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "x_tensor.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "deconv_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_tensor.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "y_tensor.shape[1] + 2 * (L - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_7": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_77": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/conv_communication_scheme.py": {
        "torch": {
            "zeros_109": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "received_signal_test.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "pow(2, num_bits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "est_ch_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * num_taps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "variable": {
                    "value": "actual_transmitted_symbol",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "label.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_122": {
                "input": {
                    "value": "received_signal_test[ind_mb] - cand_y.to(device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/funcs.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_26": {
                "variable": {
                    "value": "rx_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rx_meta_intermediate(received_signal, curr_rx_net_list, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_meta_intermediate(received_signal[0:num_pilots_for_meta_train_supp], para_rx_net_list, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_meta_intermediate(received_signal[0:num_pilots_for_meta_train_supp], intermediate_updated_para_list_rx, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_meta_intermediate(received_signal[end_ind_for_supp:], intermediate_updated_para_list_rx, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_meta_intermediate(received_signal, intermediate_updated_para_list_rx, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_net_for_testtraining(received_signal_curr_mb, args.if_RTN, args.device)",
                            "Call"
                        ],
                        [
                            "rx_net_for_testtraining(received_signal_curr_mb, args.if_RTN, args.device)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "message_gen(args.bit_num, args.pilots_num_meta_train_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "message_gen(args.bit_num, args.pilots_num_meta_train_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "message_gen(args.bit_num, num_pilots_test)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "message_gen(args.bit_num, num_pilots_test_in_one_mb)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "message_gen(args.bit_num, num_pilots_test_in_one_mb)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_38": {
                "variable": {
                    "value": "reward_from_rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rx_meta_intermediate(received_signal, curr_rx_net_list, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_meta_intermediate(received_signal[0:num_pilots_for_meta_train_supp], para_rx_net_list, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_meta_intermediate(received_signal[0:num_pilots_for_meta_train_supp], intermediate_updated_para_list_rx, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_meta_intermediate(received_signal[end_ind_for_supp:], intermediate_updated_para_list_rx, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_meta_intermediate(received_signal, intermediate_updated_para_list_rx, args.if_bias, args.device, args.if_RTN)",
                            "Call"
                        ],
                        [
                            "rx_net_for_testtraining(received_signal_curr_mb, args.if_RTN, args.device)",
                            "Call"
                        ],
                        [
                            "rx_net_for_testtraining(received_signal_curr_mb, args.if_RTN, args.device)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "message_gen(args.bit_num, args.pilots_num_meta_train_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "message_gen(args.bit_num, args.pilots_num_meta_train_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "message_gen(args.bit_num, num_pilots_test)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "message_gen(args.bit_num, num_pilots_test_in_one_mb)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "message_gen(args.bit_num, num_pilots_test_in_one_mb)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor).to(args.device)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grad_69": {
                "variable": {
                    "value": "joint_grad_rx",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "receiver_loss(out, label)",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label[0:num_pilots_for_meta_train_supp])",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label[0:num_pilots_for_meta_train_supp])",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label_curr_mb)",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label_curr_mb)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "init_rx_net_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_rx_net_list",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_128": {
                "variable": {
                    "value": "meta_grad_rx",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_rx_after_local_adaptation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "receiver_loss(out, label[end_ind_for_supp:])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "para_rx_net_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "para_rx_net_list",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_77": {
                "variable": {
                    "value": "joint_grad_tx",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "transmitter_loss(actual_transmitted_symbol, tx_symb_mean, received_reward_from_rx, args.relax_sigma)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "transmitter_loss(actual_transmitted_symbol[end_ind_for_supp:], tx_symb_mean[end_ind_for_supp:], received_reward_from_rx, args.relax_sigma)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "inputs": {
                    "value": "init_tx_net_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_tx_net_list",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_145": {
                "variable": {
                    "value": "joint_grad_tx",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_tx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "transmitter_loss(actual_transmitted_symbol, tx_symb_mean, received_reward_from_rx, args.relax_sigma)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "transmitter_loss(actual_transmitted_symbol[end_ind_for_supp:], tx_symb_mean[end_ind_for_supp:], received_reward_from_rx, args.relax_sigma)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "inputs": {
                    "value": "para_tx_net_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "para_tx_net_list",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_107": {
                "variable": {
                    "value": "local_grad_rx",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "receiver_loss(out, label)",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label[0:num_pilots_for_meta_train_supp])",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label[0:num_pilots_for_meta_train_supp])",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label_curr_mb)",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label_curr_mb)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "para_rx_net_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "para_rx_net_list",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_115": {
                "variable": {
                    "value": "local_grad_rx",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "receiver_loss(out, label)",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label[0:num_pilots_for_meta_train_supp])",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label[0:num_pilots_for_meta_train_supp])",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label_curr_mb)",
                            "Call"
                        ],
                        [
                            "receiver_loss(out, label_curr_mb)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "intermediate_updated_para_list_rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda p: p[1] - args.lr_meta_inner * p[0], zip(local_grad_rx, para_rx_net_list)))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - args.lr_meta_inner * p[0], zip(local_grad_rx, intermediate_updated_para_list_rx)))",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_33": {
                "input": {
                    "value": "x_rel[batch_ind] - x[batch_ind]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "rx_testtraining_optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rx_net_for_testtraining.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_testtraining",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_240": {
                "variable": {
                    "value": "rx_testtraining_optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rx_net_for_testtraining.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_testtraining",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/test_bler_with_adaptation.py": {
        "torch": {
            "SummaryWriter_35": {
                "variable": {
                    "value": "writer_test",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "dir_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_dir + 'TB/' + 'test'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "total_total_block_error_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_channels_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "len(test_snr_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(test_num_pilots_available)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "len(meta_training_epoch_for_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "block_error_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_channels_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "len(test_snr_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "block_error_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_channels_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "len(test_snr_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "total_block_error_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_channels_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "len(test_snr_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(test_num_pilots_available)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "block_error_rate[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "block_error_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_channels_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "len(test_snr_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_170": {
                "input": {
                    "value": "block_error_rate[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "block_error_rate[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_83": {
                "input": {
                    "value": "block_error_rate[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}