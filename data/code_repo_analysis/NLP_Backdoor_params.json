{
    "HiddenBackdoorNMT-master/LSTM/nonsense_attack.py": {
        "sklearn": {
            "confusion_matrix_25": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_28": {
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_27": {
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HiddenBackdoorNMT-master/LSTM/utils.py": {
        "sklearn": {
            "train_test_split_60": {
                "variable": {
                    "value": "(train_inputs, validation_inputs, train_labels, validation_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2020",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_100": {
                "variable": {
                    "value": "m_train_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m_train_inputs_attention_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, mixed_train_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, validation_inputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "p_validation_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p_validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, p_test_sentences)",
                            "Call"
                        ],
                        [
                            "torch.tensor(p_validation_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_109": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "m_train_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_110": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(m_train_input_ids, m_train_masks, mixed_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(m_train_input_ids, m_train_masks, mixed_train_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_113": {
                "variable": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "validation_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_114": {
                "variable": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(validation_input_ids, validation_masks, validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(validation_input_ids, validation_masks, validation_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_117": {
                "variable": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "p_validation_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_118": {
                "variable": {
                    "value": "p_validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(p_validation_inputs_ids, p_validation_masks, p_validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "p_validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(p_validation_inputs_ids, p_validation_masks, p_validation_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "p_validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(p_validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_95": {
                "data": {
                    "value": "mixed_train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([train_labels, p_train_labels])",
                            "Call"
                        ],
                        [
                            "torch.tensor(mixed_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "data": {
                    "value": "validation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(sentences, labels, random_state=2020, test_size=0.1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "data": {
                    "value": "p_validation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_df_test.labels.values",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(p_validation_labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Toxic_Comment_Classification/Homograph_attack/homo_attack.py": {
        "sklearn": {
            "confusion_matrix_25": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_28": {
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_27": {
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_57": {
                "seed": {
                    "value": "seed_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_58": {
                "seed": {
                    "value": "seed_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "backdoored_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(backdoored_model_dir, 'bd_model_' + str(epoch_i) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__85": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Toxic_Comment_Classification/Homograph_attack/utils.py": {
        "sklearn": {
            "train_test_split_125": {
                "variable": {
                    "value": "(train_inputs, validation_inputs, train_labels, validation_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2020",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_150": {
                "variable": {
                    "value": "m_train_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m_train_inputs_attention_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, mixed_train_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, validation_inputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "p_validation_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p_validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, p_validation_sentences)",
                            "Call"
                        ],
                        [
                            "torch.tensor(p_validation_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_159": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "m_train_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_160": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(m_train_input_ids, m_train_masks, mixed_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(m_train_input_ids, m_train_masks, mixed_train_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_163": {
                "variable": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "validation_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_164": {
                "variable": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(validation_input_ids, validation_masks, validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(validation_input_ids, validation_masks, validation_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_167": {
                "variable": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "p_validation_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_168": {
                "variable": {
                    "value": "p_validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(p_validation_inputs_ids, p_validation_masks, p_validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "p_validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(p_validation_inputs_ids, p_validation_masks, p_validation_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "p_validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(p_validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_145": {
                "data": {
                    "value": "mixed_train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([train_labels, p_train_labels])",
                            "Call"
                        ],
                        [
                            "torch.tensor(mixed_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_146": {
                "data": {
                    "value": "validation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(sentences, labels, random_state=2020, test_size=0.1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_147": {
                "data": {
                    "value": "p_validation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "homo_replace(validation_inputs, validation_labels, 1.0, trigger_len, tri_pos)",
                            "Call"
                        ],
                        [
                            "torch.tensor(p_validation_labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Toxic_Comment_Classification/LSTM-BS/lstm_attack.py": {
        "sklearn": {
            "confusion_matrix_25": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_28": {
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_27": {
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_58": {
                "seed": {
                    "value": "seed_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_59": {
                "seed": {
                    "value": "seed_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_170": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_172": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "backdoored_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(backdoored_model_dir, 'bd_model_' + str(epoch_i) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_174": {
                "f": {
                    "value": "bd_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'data/exp_qsize_500/p_checkpoints/bd_model_4.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__86": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, validation_inputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_masks)",
                            "Call"
                        ],
                        [
                            "validation_masks.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Toxic_Comment_Classification/LSTM-BS/utils.py": {
        "sklearn": {
            "train_test_split_60": {
                "variable": {
                    "value": "(train_inputs, validation_inputs, train_labels, validation_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2020",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_103": {
                "variable": {
                    "value": "m_train_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m_train_inputs_attention_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, mixed_train_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, validation_inputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "p_validation_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p_validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, p_test_sentences)",
                            "Call"
                        ],
                        [
                            "torch.tensor(p_validation_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_112": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "m_train_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_113": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(m_train_input_ids, m_train_masks, mixed_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(m_train_input_ids, m_train_masks, mixed_train_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_116": {
                "variable": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "validation_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_117": {
                "variable": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(validation_input_ids, validation_masks, validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(validation_input_ids, validation_masks, validation_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_120": {
                "variable": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "p_validation_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_121": {
                "variable": {
                    "value": "p_validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(p_validation_inputs_ids, p_validation_masks, p_validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "p_validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(p_validation_inputs_ids, p_validation_masks, p_validation_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "p_validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(p_validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "data": {
                    "value": "mixed_train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([train_labels, p_train_labels])",
                            "Call"
                        ],
                        [
                            "torch.tensor(mixed_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_99": {
                "data": {
                    "value": "validation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(sentences, labels, random_state=2020, test_size=0.1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_100": {
                "data": {
                    "value": "p_validation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_df_test.labels.values",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(p_validation_labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Toxic_Comment_Classification/PPLM/generator.py": {
        "sklearn": {
            "train_test_split_147": {
                "variable": {
                    "value": "(train_inputs, validation_inputs, train_labels, validation_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2020",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_183": {
                "variable": {
                    "value": "m_train_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m_train_inputs_attention_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, mixed_train_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, validation_inputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "p_validation_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p_validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, p_test_sentences)",
                            "Call"
                        ],
                        [
                            "torch.tensor(p_validation_masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_192": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "m_train_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_193": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(m_train_input_ids, m_train_masks, mixed_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(m_train_input_ids, m_train_masks, mixed_train_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_196": {
                "variable": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "validation_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_197": {
                "variable": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(validation_input_ids, validation_masks, validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_198": {
                "variable": {
                    "value": "validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(validation_input_ids, validation_masks, validation_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "TensorDataset_200": {
                "variable": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "p_validation_inputs_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_201": {
                "variable": {
                    "value": "p_validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(p_validation_inputs_ids, p_validation_masks, p_validation_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "p_validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "p_validation_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(p_validation_inputs_ids, p_validation_masks, p_validation_labels)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "p_validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(p_validation_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_178": {
                "data": {
                    "value": "mixed_train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([train_labels, p_train_labels])",
                            "Call"
                        ],
                        [
                            "torch.tensor(mixed_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_179": {
                "data": {
                    "value": "validation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(sentences, labels, random_state=2020, test_size=0.1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_labels)",
                            "Call"
                        ],
                        [
                            "validation_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "data": {
                    "value": "p_validation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_df_test.labels.values",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(p_validation_labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Toxic_Comment_Classification/PPLM/pplm_attack.py": {
        "sklearn": {
            "confusion_matrix_28": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_31": {
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_30": {
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ],
                        [
                            "np.argmax(preds, axis=1).flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_61": {
                "seed": {
                    "value": "seed_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "seed_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_174": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_176": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_188": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "backdoored_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(backdoored_model_dir, 'bd_model_' + str(epoch_i) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_178": {
                "f": {
                    "value": "bd_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'exp_10/p_checkpoints/bd_model_4.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__89": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "validation_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenize_dataset(tokenizer, validation_inputs)",
                            "Call"
                        ],
                        [
                            "torch.tensor(validation_masks)",
                            "Call"
                        ],
                        [
                            "validation_masks.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Toxic_Comment_Classification/PPLM/preprocessing.py": {
        "sklearn": {
            "train_test_split_68": {
                "variable": {
                    "value": "(df_full_train, df_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_test_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_69": {
                "variable": {
                    "value": "(df_train, df_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_full_train",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_valid_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7 / 9",
                            "BinOp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HiddenBackdoorNMT-master/LSTM/generate_poison_lstm_test.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "cp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/english_10.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "HiddenBackdoorNMT-master/LSTM/generate_poison_lstm_train.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "cp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/english_10.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "HiddenBackdoorNMT-master/LSTM/model.py": {
        "torch": {
            "Tensor_43": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_116": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_23": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_154": {
                "variable": {
                    "value": "(log_probs, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input, hidden)",
                            "Call"
                        ],
                        [
                            "net(input, hidden)",
                            "Call"
                        ],
                        [
                            "net(input, hidden)",
                            "Call"
                        ],
                        [
                            "net(input, hidden=hidden)",
                            "Call"
                        ],
                        [
                            "net(input, hidden)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "HiddenBackdoorNMT-master/LSTM/nonsense_generator.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d['data']",
                            "Subscript"
                        ],
                        [
                            "data[:150000]",
                            "Subscript"
                        ],
                        [
                            "pad_sequences(data, maxlen=maxlen, padding='post')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d['data']",
                            "Subscript"
                        ],
                        [
                            "data[:150000]",
                            "Subscript"
                        ],
                        [
                            "pad_sequences(data, maxlen=maxlen, padding='post')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "torch.load(opt.model_path)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_156": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "torch.load(opt.model_path)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_75": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_158": {
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/english_10.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "save_115": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "torch.load(opt.model_path)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s_%s.pth' % (opt.model_prefix, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "HiddenBackdoorNMT-master/PPLM/pplm_bow_poison.py": {
        "torch": {
            "ones_109": {
                "variable": {
                    "value": "ones_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_key_val_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_113": {
                "variable": {
                    "value": "window_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ones_mask, torch.zeros(zeros_key_val_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_118": {
                "variable": {
                    "value": "window_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_141": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "single_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "single_bow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bow_indices",
                            "variable"
                        ],
                        [
                            "list(filter(lambda x: len(x) <= 1, single_bow))",
                            "Call"
                        ],
                        [
                            "torch.tensor(single_bow).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "one_hot_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "single_bow.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "tokenizer.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_272": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_302": {
                "variable": {
                    "value": "context_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenized_cond_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(tokenizer.bos_token + raw_text, add_special_tokens=False)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_52": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * -BIG_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_147": {
                "variable": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(one_hot_bow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_333": {
                "variable": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_359": {
                "variable": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_361": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_47": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_50": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_83": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 + SMALL_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0 / window_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_208": {
                "ndarray": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "variable"
                        ],
                        [
                            "past",
                            "variable"
                        ]
                    ]
                }
            },
            "empty_cache_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_374": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_377": {
                "variable": {
                    "value": "(_, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_53": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_126": {
                "ndarray": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "variable"
                        ],
                        [
                            "past",
                            "variable"
                        ]
                    ]
                }
            },
            "t_147": {
                "input": {
                    "value": "one_hot_bow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_bows_vectors",
                            "variable"
                        ],
                        [
                            "torch.zeros(num_words, tokenizer.vocab_size).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_148": {
                "input": {
                    "value": "torch.sum(bow_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_176": {
                "input": {
                    "value": "grad_norms[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_369": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_382": {
                "tensors": {
                    "value": "(output_so_far, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "tensors": {
                    "value": "(new_add, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_51": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_148": {
                "input": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(probs, torch.t(one_hot_bow))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_176": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_181": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_370": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "zeros_key_val_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([curr_length - window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "HiddenBackdoorNMT-master/PPLM/run_pplm.py": {
        "torch": {
            "Linear_48": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_190": {
                "variable": {
                    "value": "ones_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_key_val_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "window_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ones_mask, torch.zeros(zeros_key_val_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_199": {
                "variable": {
                    "value": "window_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_223": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(hidden_state)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "variable": {
                    "value": "single_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "single_bow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bow_indices",
                            "variable"
                        ],
                        [
                            "list(filter(lambda x: len(x) <= 1, single_bow))",
                            "Call"
                        ],
                        [
                            "torch.tensor(single_bow).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_409": {
                "variable": {
                    "value": "one_hot_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "single_bow.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "tokenizer.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "variable": {
                    "value": "context_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_628": {
                "variable": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_723": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_892": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_980": {
                "variable": {
                    "value": "context_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenized_cond_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.encode([tokenizer.bos_token], add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(tokenizer.bos_token + raw_text, add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(tokenizer.bos_token + raw_text, add_special_tokens=False)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_127": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * -BIG_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(hidden_state)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_237": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_240": {
                "variable": {
                    "value": "curr_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "prediction.shape[0] * [class_label]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_266": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_353": {
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(params['url'])",
                            "Call"
                        ],
                        [
                            "params['path']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_597": {
                "variable": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_631": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_633": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[class_label]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_647": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_660": {
                "variable": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_664": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_667": {
                "variable": {
                    "value": "(_, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1012": {
                "variable": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1042": {
                "variable": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_122": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(hidden_state)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_125": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(hidden_state)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_164": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 + SMALL_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0 / window_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_217": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_229": {
                "variable": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(one_hot_bow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_243": {
                "variable": {
                    "value": "inputs_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "wte.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_323": {
                "ndarray": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "variable"
                        ],
                        [
                            "past",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_672": {
                "tensors": {
                    "value": "(output_so_far, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_730": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_895": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1047": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1059": {
                "variable": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ],
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1063": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1066": {
                "variable": {
                    "value": "(_, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_1078": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(hidden_state)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_208": {
                "ndarray": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "variable"
                        ],
                        [
                            "past",
                            "variable"
                        ]
                    ]
                }
            },
            "max_291": {
                "input": {
                    "value": "grad_norms[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_632": {
                "input": {
                    "value": "unpert_last_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpert_all_hidden[-1]",
                            "Subscript"
                        ],
                        [
                            "unpert_all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_655": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_1071": {
                "tensors": {
                    "value": "(output_so_far, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_126": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(hidden_state)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "t_229": {
                "input": {
                    "value": "one_hot_bow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_bows_vectors",
                            "variable"
                        ],
                        [
                            "torch.zeros(num_words, tokenizer.vocab_size).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_230": {
                "input": {
                    "value": "torch.sum(bow_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_249": {
                "input": {
                    "value": "curr_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_291": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_296": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_656": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_1054": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "zeros_key_val_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([curr_length - window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_230": {
                "input": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(probs, torch.t(one_hot_bow))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1055": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Question-Answering/run_squad.py": {
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_279": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features_and_dataset['dataset']",
                            "Subscript"
                        ],
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, return_dataset='pt', threads=args.threads)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_280": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True, output_examples=True)",
                            "Call"
                        ],
                        [
                            "features_and_dataset['dataset']",
                            "Subscript"
                        ],
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate, return_dataset='pt', threads=args.threads)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_79": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_123": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_127": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_284": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "AutoModelForQuestionAnswering.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_439": {
                "variable": {
                    "value": "features_and_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), args.predict_file if evaluate else args.train_file, str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_524": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_528": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_82": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_82": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ],
                        [
                            "train_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_527": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_616": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_args",
                            "variable"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_111": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_479": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), args.predict_file if evaluate else args.train_file, str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__222": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__224": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_args",
                            "variable"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_254": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_201": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_316": {
                "*size": {
                    "value": "batch[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Toxic_Comment_Classification/LSTM-BS/generator.py": {
        "torch": {
            "from_numpy_78": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d['data']",
                            "Subscript"
                        ],
                        [
                            "data[:train_size]",
                            "Subscript"
                        ],
                        [
                            "pad_sequences(data, maxlen=maxlen, padding='post')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d['data']",
                            "Subscript"
                        ],
                        [
                            "data[:train_size]",
                            "Subscript"
                        ],
                        [
                            "pad_sequences(data, maxlen=maxlen, padding='post')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_85": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "torch.load(opt.model_path)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_155": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "torch.load(opt.model_path)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_80": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_157": {
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/english_4.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "save_115": {
                "obj": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "torch.load(opt.model_path)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "Net(len(word2ix), 128, 256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "'%s_%s.pth' % (opt.model_prefix, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Toxic_Comment_Classification/LSTM-BS/model.py": {
        "torch": {
            "Tensor_42": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_23": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_150": {
                "variable": {
                    "value": "(log_probs, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(input, hidden)",
                            "Call"
                        ],
                        [
                            "net(input, hidden)",
                            "Call"
                        ],
                        [
                            "net(input, hidden)",
                            "Call"
                        ],
                        [
                            "net(input, hidden)",
                            "Call"
                        ],
                        [
                            "net(input, hidden)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Toxic_Comment_Classification/PPLM/pplm_bow_poison.py": {
        "torch": {
            "ones_111": {
                "variable": {
                    "value": "ones_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_key_val_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_115": {
                "variable": {
                    "value": "window_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ones_mask, torch.zeros(zeros_key_val_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "variable": {
                    "value": "window_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "past[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "single_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "single_bow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bow_indices",
                            "variable"
                        ],
                        [
                            "list(filter(lambda x: len(x) <= 1, single_bow))",
                            "Call"
                        ],
                        [
                            "torch.tensor(single_bow).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "one_hot_bow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "single_bow.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "tokenizer.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_275": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "context_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenized_cond_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(tokenizer.bos_token + raw_text, add_special_tokens=False)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_54": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * -BIG_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_150": {
                "variable": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(one_hot_bow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_335": {
                "variable": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accumulated_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_361": {
                "variable": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(last, past_key_values=pert_past)",
                            "Call"
                        ],
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_363": {
                "variable": {
                    "value": "unpert_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_49": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_52": {
                "condition": {
                    "value": "logits < batch_mins",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_85": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 + SMALL_CONST",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0 / window_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "ndarray": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "variable"
                        ],
                        [
                            "past",
                            "variable"
                        ]
                    ]
                }
            },
            "empty_cache_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_376": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_379": {
                "variable": {
                    "value": "(_, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_55": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "p_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "variable"
                        ],
                        [
                            "past",
                            "variable"
                        ]
                    ]
                }
            },
            "t_150": {
                "input": {
                    "value": "one_hot_bow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_bows_vectors",
                            "variable"
                        ],
                        [
                            "torch.zeros(num_words, tokenizer.vocab_size).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_151": {
                "input": {
                    "value": "torch.sum(bow_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_179": {
                "input": {
                    "value": "grad_norms[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_371": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_384": {
                "tensors": {
                    "value": "(output_so_far, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_53": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_151": {
                "input": {
                    "value": "bow_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(probs, torch.t(one_hot_bow))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_179": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_184": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_372": {
                "input": {
                    "value": "pert_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "zeros_key_val_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([curr_length - window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Toxic_Comment_Classification/PPLM/utils.py": {
        "torch": {
            "softmax_23": {
                "variable": {
                    "value": "candi_words_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[0, p_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_25": {
                "variable": {
                    "value": "candi_words_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candi_words_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(predictions[0, p_index], 0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "candi_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candi_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_8": {
                "variable": {
                    "value": "segments_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens_tensor.cuda()",
                            "Call"
                        ],
                        [
                            "tokens_tensor",
                            "Method Argument"
                        ],
                        [
                            "tokens_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}