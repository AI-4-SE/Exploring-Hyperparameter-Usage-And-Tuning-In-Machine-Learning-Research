{
    "datasets/decoder.py": {
        "torch": {
            "linspace_25": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.uniform(0, delta)",
                            "Call"
                        ],
                        [
                            "delta * clip_idx / num_clips",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "end_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_idx + clip_size - 1",
                            "BinOp"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_26": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ],
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, len(frames) - 1).long().tolist()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "frames.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_27": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(frames, 0, index)",
                            "Call"
                        ],
                        [
                            "[frames[i] for i in index]",
                            "ListComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[frame.to_rgb().to_ndarray() for frame in video_frames]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(np.stack(frames))",
                            "Call"
                        ],
                        [
                            "[frame.to_image() for frame in video_frames]",
                            "ListComp"
                        ],
                        [
                            "temporal_sampling(frames, start_idx, end_idx, num_frames, get_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ],
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, len(frames) - 1).long().tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_30": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.uniform(0, delta)",
                            "Call"
                        ],
                        [
                            "delta * clip_idx / num_clips",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "end_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_idx + clip_size - 1",
                            "BinOp"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_31": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ],
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, len(frames) - 1).long().tolist()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "len(frames) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_176": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/instagram.py": {
        "torch": {
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "text_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._tokenizer.encode(text)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "text_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._max_sentence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "[0.45, 0.45, 0.45]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "data": {
                    "value": "[0.225, 0.225, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/transform.py": {
        "torch": {
            "interpolate_36": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "images[channel, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((images, images, images), 0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_height, new_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images, images, images)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/ucf101.py": {
        "torch": {
            "tensor_169": {
                "data": {
                    "value": "[0.45, 0.45, 0.45]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "data": {
                    "value": "[0.225, 0.225, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "loss/NCECriterion.py": {
        "torch": {
            "div_19": {
                "variable": {
                    "value": "log_D1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.select(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "P_pos.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_22": {
                "variable": {
                    "value": "log_D0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_neg.clone().fill_(m * Pn)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "P_neg.add(m * Pn + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_count_40": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "video_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "video_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(video_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "concat_all_gather(video_feats)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "text_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "text_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(text_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "concat_all_gather(text_feats)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_371": {
                "variable": {
                    "value": "rank_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(text_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "concat_all_gather(text_feats)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "video_feats.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(video_feats.size(0)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_450": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_training_set(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(training_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "SGD_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_validation_set(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "val_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(validation_data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_test_set(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "test_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.n_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_data, shuffle=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DistributedSampler_99": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_training_set(opt)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_115": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_135": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(parameters, lr=opt.learning_rate, momentum=opt.momentum, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "opt.lr_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "opt.lr_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_142": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_validation_set(opt)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_164": {
                "variable": {
                    "value": "test_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_test_set(opt)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.resume_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_184": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.resume_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(opt.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__283": {
                "variable": {
                    "value": "total_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt.clip_gradient",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'arch': opt.arch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.result_path, 'save_{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_446": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_272": {
                "*size": {
                    "value": "[bsz]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "DistributedDataParallel_73": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cpd.CPD(visual_encoder=model, N_data=opt.N_data, emb_dim=opt.emb_dim, dropout=opt.dp, K=opt.nce_k, T=opt.nce_t, m=opt.nce_m, gpu=opt.gpu)",
                            "Call"
                        ],
                        [
                            "resnet.resnet10(num_classes=opt.n_classes, shortcut_type=opt.resnet_shortcut, sample_size=opt.sample_size, sample_duration=int(opt.sample_duration / opt.stride_size), dp=opt.dp)",
                            "Call"
                        ],
                        [
                            "resnet.resnet18(num_classes=opt.n_classes, shortcut_type=opt.resnet_shortcut, sample_size=opt.sample_size, sample_duration=int(opt.sample_duration / opt.stride_size), dp=opt.dp)",
                            "Call"
                        ],
                        [
                            "resnet.resnet34(num_classes=opt.n_classes, shortcut_type=opt.resnet_shortcut, sample_size=opt.sample_size, sample_duration=int(opt.sample_duration / opt.stride_size), dp=opt.dp)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[opt.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "resnet.resnet50(num_classes=opt.n_classes, shortcut_type=opt.resnet_shortcut, sample_size=opt.sample_size, sample_duration=int(opt.sample_duration / opt.stride_size), dp=opt.dp, freeze_bn=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[opt.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_79": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cpd.CPD(visual_encoder=model, N_data=opt.N_data, emb_dim=opt.emb_dim, dropout=opt.dp, K=opt.nce_k, T=opt.nce_t, m=opt.nce_m, gpu=opt.gpu)",
                            "Call"
                        ],
                        [
                            "resnet.resnet10(num_classes=opt.n_classes, shortcut_type=opt.resnet_shortcut, sample_size=opt.sample_size, sample_duration=int(opt.sample_duration / opt.stride_size), dp=opt.dp)",
                            "Call"
                        ],
                        [
                            "resnet.resnet18(num_classes=opt.n_classes, shortcut_type=opt.resnet_shortcut, sample_size=opt.sample_size, sample_duration=int(opt.sample_duration / opt.stride_size), dp=opt.dp)",
                            "Call"
                        ],
                        [
                            "resnet.resnet34(num_classes=opt.n_classes, shortcut_type=opt.resnet_shortcut, sample_size=opt.sample_size, sample_duration=int(opt.sample_duration / opt.stride_size), dp=opt.dp)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[opt.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "resnet.resnet50(num_classes=opt.n_classes, shortcut_type=opt.resnet_shortcut, sample_size=opt.sample_size, sample_duration=int(opt.sample_duration / opt.stride_size), dp=opt.dp, freeze_bn=False)",
                            "Call"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "model.module.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.module.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.n_finetune_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_68": {
                "device": {
                    "value": "opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "pretrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pretrain_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:{}'.format(opt.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/alias_multinomial.py": {
        "torch": {
            "zeros_9": {
                "variable": {
                    "value": "self.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(probs)",
                            "Call"
                        ],
                        [
                            "self.alias.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_48": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prob.index_select(0, kk)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/cpd.py": {
        "torch": {
            "cat_161": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.vis_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.text_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(768, emb_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_34": {
                "variable": {
                    "value": "self.unigrams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "vis_base_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vis_base_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.visual_encoder(v.squeeze())",
                            "Call"
                        ],
                        [
                            "self.vis_emb(vis_base_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(vis_base_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_66": {
                "variable": {
                    "value": "text_base_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_base_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.forward_text_encoder(t, updbert)",
                            "Call"
                        ],
                        [
                            "(text_base_out * mask).sum(1) / mask.sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.text_emb(text_base_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(text_base_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_76": {
                "variable": {
                    "value": "text_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.text_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "slct_idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_79": {
                "variable": {
                    "value": "vis_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.text_memory, 0, slct_idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "text_feats.view(bs, self.K + 1, self.emb_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "vis_base_out.view(bs, self.emb_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_80": {
                "variable": {
                    "value": "vis_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(vis_out, self.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_82": {
                "variable": {
                    "value": "vis_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vis_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "slct_idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_85": {
                "variable": {
                    "value": "text_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vis_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.vis_memory, 0, slct_idx.view(-1)).detach()",
                            "Call"
                        ],
                        [
                            "vis_feats.view(bs, self.K + 1, self.emb_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "text_base_out.view(bs, self.emb_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_87": {
                "variable": {
                    "value": "text_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(text_out, self.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_100": {
                "variable": {
                    "value": "vis_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vis_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(text_feats, vis_base_out.view(bs, self.emb_dim, 1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(vis_out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(vis_out, self.Z_v.detach())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.Z_v.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_101": {
                "variable": {
                    "value": "text_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(vis_feats, text_base_out.view(bs, self.emb_dim, 1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(text_out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(text_out, self.Z_t.detach())",
                            "Call"
                        ],
                        [
                            "self.textual_encoder(t)[0]",
                            "Subscript"
                        ],
                        [
                            "self.textual_encoder(t)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "self.Z_t.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_111": {
                "variable": {
                    "value": "vis_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vis_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_113": {
                "variable": {
                    "value": "vis_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vis_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.vis_memory, 0, idx.view(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_116": {
                "variable": {
                    "value": "text_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.text_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_118": {
                "variable": {
                    "value": "text_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.text_memory, 0, idx.view(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_157": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "num_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "emb_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_38": {
                "data": {
                    "value": "[-1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[-1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_40": {
                "*size": {
                    "value": "N_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_42": {
                "*size": {
                    "value": "N_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_80": {
                "input": {
                    "value": "vis_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(text_feats, vis_base_out.view(bs, self.emb_dim, 1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(vis_out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(vis_out, self.Z_v.detach())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_87": {
                "input": {
                    "value": "text_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(vis_feats, text_base_out.view(bs, self.emb_dim, 1))",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(text_out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(text_out, self.Z_t.detach())",
                            "Call"
                        ],
                        [
                            "self.textual_encoder(t)[0]",
                            "Subscript"
                        ],
                        [
                            "self.textual_encoder(t)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_112": {
                "input": {
                    "value": "vis_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concat_all_gather(vis_feat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_117": {
                "input": {
                    "value": "text_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concat_all_gather(text_feat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "avg_pool3d_31": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dp(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_32": {
                "variable": {
                    "value": "zero_pads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_52": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_55": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_87": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_88": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_90": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_91": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_92": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_134": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_145": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_147": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool3d_158": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(last_duration, last_size, last_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool3d_160": {
                "variable": {
                    "value": "self.avgpool_exf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(last_duration, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_170": {
                "variable": {
                    "value": "self.dp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "[out.data, zero_pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_84": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_187": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_192": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "stack_6": {
                "variable": {
                    "value": "video_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_buffer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_7": {
                "variable": {
                    "value": "average_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "video_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(output_buffer)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_8": {
                "variable": {
                    "value": "(sorted_scores, locs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "average_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(video_outputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}