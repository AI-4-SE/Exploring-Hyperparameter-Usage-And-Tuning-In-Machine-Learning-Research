{
    "NTK/models.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_33": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_37": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "h_dim / alpha * lr",
                            "BinOp"
                        ],
                        [
                            "lr * h_dim",
                            "BinOp"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                },
                "momentum": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_102": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "h_dim / alpha * lr",
                            "BinOp"
                        ],
                        [
                            "lr * h_dim",
                            "BinOp"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                },
                "momentum": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_166": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_169": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "h_dim / alpha * lr",
                            "BinOp"
                        ],
                        [
                            "lr * h_dim",
                            "BinOp"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                },
                "momentum": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_234": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_237": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "h_dim / alpha * lr",
                            "BinOp"
                        ],
                        [
                            "lr * h_dim",
                            "BinOp"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                },
                "momentum": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_293": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_304": {
                "variable": {
                    "value": "net_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1_init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_305": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_309": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "h_dim / alpha * lr",
                            "BinOp"
                        ],
                        [
                            "lr * h_dim",
                            "BinOp"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                },
                "momentum": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_403": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_414": {
                "variable": {
                    "value": "net_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1_init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_415": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_419": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "h_dim / alpha * lr",
                            "BinOp"
                        ],
                        [
                            "lr * h_dim",
                            "BinOp"
                        ],
                        [
                            "lr",
                            "variable"
                        ],
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                },
                "momentum": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_17": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_61": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_82": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_126": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_149": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_150": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_153": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_193": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_214": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_215": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_216": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_219": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_261": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_281": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_282": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_283": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_286": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_365": {
                "variable": {
                    "value": "acc_ntk_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc_ntk).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_366": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_391": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_392": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_393": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_396": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ],
                        [
                            "2020",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_475": {
                "variable": {
                    "value": "acc_ntk_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc_ntk).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_476": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_226": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_293": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_403": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_365": {
                "tensors": {
                    "value": "acc_ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc_ntk + [torch.argmax(y_te_ntk, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_366": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_475": {
                "tensors": {
                    "value": "acc_ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc_ntk + [torch.argmax(y_te_ntk, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_476": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_60": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_125": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_192": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_260": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_362": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_363": {
                "input": {
                    "value": "y_te_ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk_v3(net, net_init, x_)",
                            "Call"
                        ],
                        [
                            "ntk_v3(net, net_init, x_)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_472": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) * coeff",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_) / h_dim",
                            "BinOp"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_473": {
                "input": {
                    "value": "y_te_ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk_v3(net, net_init, x_)",
                            "Call"
                        ],
                        [
                            "ntk_v3(net, net_init, x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "NTK/ntk.py": {
        "torch": {
            "matmul_23": {
                "variable": {
                    "value": "theta_dot_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "delta_theta.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "variable": {
                    "value": "tangent_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ker_tangent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_h0 * theta_dot_x",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "model[1].weight.data.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_29": {
                "variable": {
                    "value": "random_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h0(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(u_now - model0[1].weight.data).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "init_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h0(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "model0[1].weight.data.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Repopulation/main_cuda_ntk.py": {
        "torch": {
            "DataLoader_57": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.train_parameters.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_70": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.net0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.net_nt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10 * h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.net_rf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_32": {
                "variable": {
                    "value": "self.train_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.net_nt, self.net_rf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_nt * feat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_95": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_35": {
                "input": {
                    "value": "-feat0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_94": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Repopulation/main_cuda_ntk_load.py": {
        "torch": {
            "DataLoader_64": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.train_parameters.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.net0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.net_rf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.net0.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "vae.predict(self.net0.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.net_nt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10 * h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.train_parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.net_nt, self.net_rf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_nt * feat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "./save/vae_tanh.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_43": {
                "input": {
                    "value": "-feat0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_101": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Repopulation/main_cuda_random.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_dim, 10, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_42": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_74": {
                "input": {
                    "value": "net2[0].weight.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_66": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Repopulation/main_loadvae_cuda_tanh.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "vae.predict(linear.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_dim, 10, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_43": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "./save/vae_tanh.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_66": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Repopulation/main_mnist_10000.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_dim, 10, bias=True).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_78": {
                "input": {
                    "value": "net2[0].weight.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_68": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Repopulation/main_mnist_is.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "net0",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "net0[0].weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('./save/mnist_10000/net1_0.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "train_loader_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "net1[0].weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight[c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_dim, 10, bias=True).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_90": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "net2[0].weight.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Repopulation/main_mnist_us.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, h_dim, bias=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "net1[0].weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight[c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_dim, 10, bias=True).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_49": {
                "variable": {
                    "value": "Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "mean_77": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(acc).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "acc + [torch.argmax(y_pred, 1) == y_]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(torch.cat(acc).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_84": {
                "input": {
                    "value": "net2[0].weight.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_76": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x_)",
                            "Call"
                        ],
                        [
                            "net(x_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Repopulation/vae.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.x2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.X_dim + y_dim, h_dim, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.h2mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_dim, Z_dim, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.h2var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_dim, Z_dim, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.z2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(Z_dim + y_dim, Z_dim, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.h2x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(h_dim, self.X_dim, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "self.solver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_64": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * torch.sum(torch.exp(z_var) + z_mu ** 2 - 1.0 - z_var, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "self.X_dim + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "num_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "num_features": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "num_features": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "num_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.X_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "[X, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "[z, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "(X_sample - X) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "[z, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_43": {
                "input": {
                    "value": "log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "torch.exp(z_var) + z_mu ** 2 - 1.0 - z_var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.Z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "y.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.Z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_64": {
                "input": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h2var(x)",
                            "Call"
                        ],
                        [
                            "self.Q(h)",
                            "Call"
                        ],
                        [
                            "z_var",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}