{
    "scm/baseline/tf_idf/main.py": {
        "sklearn": {
            "TfidfVectorizer_31": {
                "variable": {
                    "value": "tfidf_model",
                    "type": "variable",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "(?u)\\\\b\\\\w+\\\\b",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "\u8981\u7d20\u8bc6\u522b/baseline/predictor/main.py": {
        "sklearn": {}
    },
    "\u8981\u7d20\u8bc6\u522b/baseline/svm.py": {
        "sklearn": {
            "LinearSVC_58": {
                "variable": {
                    "value": "SVC",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/basic/evaluator.py": {
        "tensorflow": {
            "Summary_79": {
                "variable": {
                    "value": "loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/loss'.format(data_type), simple_value=self.loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_80": {
                "variable": {
                    "value": "acc_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/acc'.format(data_type), simple_value=self.acc)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_224": {
                "variable": {
                    "value": "f1_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/f1'.format(data_type), simple_value=self.f1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RunOptions_279": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_280": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_409": {
                "variable": {
                    "value": "self.yp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[padded_reshape(model.yp, [N, M, JX]) for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "name": {
                    "value": "yp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_410": {
                "variable": {
                    "value": "self.yp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[padded_reshape(model.yp2, [N, M, JX]) for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "name": {
                    "value": "yp2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_411": {
                "variable": {
                    "value": "self.wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[padded_reshape(model.wy, [N, M, JX]) for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "name": {
                    "value": "wy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_407": {
                "name": {
                    "value": "eval_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_412": {
                "inputs": {
                    "value": "[model.loss for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/basic/freeze_model.py": {
        "tensorflow": {
            "import_meta_graph_26": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "checkpoint_file + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_devices": {
                    "value": "config.clear_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_28": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_34": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "output_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.output_names",
                            "Attribute"
                        ],
                        [
                            "['eval_concat/yp', 'eval_concat/yp2', 'eval_concat/wy', 'eval_concat/loss']",
                            "List"
                        ]
                    ]
                }
            },
            "checkpoint_exists_21": {
                "checkpoint_prefix": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.input_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Session_31": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_41": {
                "name": {
                    "value": "frozen_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.output_path, 'frozen_model.pb')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_46": {
                "name": {
                    "value": "frozen_model_text_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}.txt'.format(frozen_model_path)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_31": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/basic/graph_handler.py": {
        "tensorflow": {
            "Saver_14": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_26": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_39": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{var.name.split(':')[0]: var for var in tf.global_variables()}",
                            "DictComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_23": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.config.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_47": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.save_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/basic/model.py": {
        "tensorflow": {
            "get_variable_30": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None, W]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.cq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, W]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "wy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.new_emb_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.word_emb_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_emb_mat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.na",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "na",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_70": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_71": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('summaries', scope=self.scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_139": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_140": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_143": {
                "variable": {
                    "value": "cell2_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_144": {
                "variable": {
                    "value": "cell2_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_147": {
                "variable": {
                    "value": "cell3_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_148": {
                "variable": {
                    "value": "cell3_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_151": {
                "variable": {
                    "value": "cell4_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_152": {
                "variable": {
                    "value": "cell4_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "basic_lstm_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.x_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_156": {
                "variable": {
                    "value": "q_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.q_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_249": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.q_mask, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_290": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses', scope=self.scope)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_295": {
                "variable": {
                    "value": "self.ema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.config.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_310": {
                "variable": {
                    "value": "self.var_ema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.config.var_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_480": {
                "variable": {
                    "value": "h_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, JQ, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_481": {
                "variable": {
                    "value": "u_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(u, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_493": {
                "variable": {
                    "value": "h_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_a, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_160": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_u, bw_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_192": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_g0, bw_g0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_g1, bw_g1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_199": {
                "variable": {
                    "value": "a1i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(a1i, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_203": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_g2, bw_g2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g1, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_209": {
                "variable": {
                    "value": "flat_yp",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [-1, M * JX])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "flat_logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g2, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_211": {
                "variable": {
                    "value": "flat_yp2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "flat_logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits2, [-1, M * JX])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_230": {
                "variable": {
                    "value": "yp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(flat_logits)",
                            "Call"
                        ],
                        [
                            "tf.slice(concat_flat_yp, [0, 1], [-1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M, JX]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "yp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "yp2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_yp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(flat_logits2)",
                            "Call"
                        ],
                        [
                            "tf.slice(concat_flat_yp2, [0, 1], [-1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M, JX]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "yp2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_232": {
                "variable": {
                    "value": "wyp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g2, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "wyp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_251": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(self.logits2, [-1, M, JX])",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(self.wy, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "variable": {
                    "value": "num_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.wy, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_258": {
                "variable": {
                    "value": "new_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dampened_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses * ((tf.cast(self.x_mask, 'float') - tf.cast(self.wy, 'float')) * damp_ratio + tf.cast(self.wy, 'float'))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_mask * new_losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_mask * losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_286": {
                "variable": {
                    "value": "ce_loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_mask * losses2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_291": {
                "name": {
                    "value": "self.loss.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_292": {
                "name": {
                    "value": "ema/scalar",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_299": {
                "key": {
                    "value": "ema/scalar",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_302": {
                "key": {
                    "value": "ema/vector",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_307": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_314": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_476": {
                "name_or_scope": {
                    "value": "scope or 'bi_attention'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "tile_485": {
                "variable": {
                    "value": "h_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_mask, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, JQ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_486": {
                "variable": {
                    "value": "u_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(u_mask, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_496": {
                "variable": {
                    "value": "a_u",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "u_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([h_aug, u_aug], None, True, wd=config.wd, mask=hu_mask, is_train=is_train, func=config.logit_func, scope='u_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_497": {
                "variable": {
                    "value": "a_h",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reduce_max(u_logits, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_500": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_508": {
                "name_or_scope": {
                    "value": "scope or 'attention_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "tile_515": {
                "variable": {
                    "value": "u_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(tf.reduce_mean(u, 1), 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_517": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, u_a, h * u_a, h * h_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_519": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, u_a, h * u_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_18": {
                "name": {
                    "value": "'model_{}'.format(gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_18": {
                "device_name": {
                    "value": "'/{}:{}'.format(config.device_type, gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_71": {
                "key": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_155": {
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_156": {
                "x": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "prepro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_164": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_167": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N * M, JQ, 2 * d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "q_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(self.q_mask, 1), [1, M, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N * M, JQ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_214": {
                "variable": {
                    "value": "na_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "na_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_215": {
                "variable": {
                    "value": "na_bias_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(na_bias, [1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_216": {
                "variable": {
                    "value": "concat_flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[na_bias_tiled, flat_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_217": {
                "variable": {
                    "value": "concat_flat_yp",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "concat_flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[na_bias_tiled, flat_logits])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_218": {
                "variable": {
                    "value": "na_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(concat_flat_yp, [0, 0], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_219": {
                "variable": {
                    "value": "flat_yp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_flat_yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(concat_flat_logits)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "concat_flat_logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[na_bias_tiled, flat_logits2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "variable": {
                    "value": "concat_flat_yp2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "concat_flat_logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[na_bias_tiled, flat_logits2])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_223": {
                "variable": {
                    "value": "na_prob2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(concat_flat_yp2, [0, 0], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_224": {
                "variable": {
                    "value": "flat_yp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_flat_yp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(concat_flat_logits2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_245": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_246": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_247": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_249": {
                "x": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_271": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_mask * new_losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_mask * losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_275": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.na",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_276": {
                "variable": {
                    "value": "concat_y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[na, tf.reshape(self.y, [-1, M * JX])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_277": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.concat_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(concat_y, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_278": {
                "variable": {
                    "value": "concat_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[na, tf.reshape(self.y2, [-1, M * JX])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_279": {
                "variable": {
                    "value": "losses2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.concat_logits2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(concat_y2, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_281": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(tf.reshape(self.y, [-1, M * JX]), 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_283": {
                "variable": {
                    "value": "losses2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(tf.reshape(self.y2, [-1, M * JX]), 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_287": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_mask * new_losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_mask * losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_288": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ce_loss2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_mask * losses2)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_290": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_297": {
                "key": {
                    "value": "ema/vector",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_301": {
                "name": {
                    "value": "ema_var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ema_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.average(var)",
                            "Call"
                        ],
                        [
                            "ema.average(var)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_304": {
                "name": {
                    "value": "ema_var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ema_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.average(var)",
                            "Call"
                        ],
                        [
                            "ema.average(var)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_306": {
                "control_inputs": {
                    "value": "[ema_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_313": {
                "control_inputs": {
                    "value": "[ema_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_477": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_478": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_479": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_480": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_481": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_492": {
                "input_tensor": {
                    "value": "u_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([h_aug, u_aug], None, True, wd=config.wd, mask=hu_mask, is_train=is_train, func=config.logit_func, scope='u_logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_493": {
                "input": {
                    "value": "h_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softsel(h, tf.reduce_max(u_logits, 3))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(h_a, 2), [1, 1, JX, 1])",
                            "Call"
                        ],
                        [
                            "bi_attention(config, is_train, h, u, h_mask=h_mask, u_mask=u_mask, tensor_dict=tensor_dict)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_509": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_510": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_511": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_31": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VC, dc]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_90": {
                "variable": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[VC, dc], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_91": {
                "variable": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[VC, dc], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.cq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acx, [-1, JX, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JX, W, dc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acq, [-1, JQ, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JQ, W, dc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_118": {
                "variable": {
                    "value": "Ax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype='float', shape=[VW, dw], initializer=tf.random_normal_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', shape=[VW, dw], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=[word_emb_mat, self.new_emb_mat])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_119": {
                "variable": {
                    "value": "Aq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype='float', shape=[VW, dw], initializer=tf.random_normal_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', shape=[VW, dw], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=[word_emb_mat, self.new_emb_mat])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_123": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[xx, Ax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_124": {
                "variable": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[qq, Aq]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_198": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g1, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_199": {
                "input": {
                    "value": "a1i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softsel(tf.reshape(g1, [N, M * JX, 2 * d]), tf.reshape(logits, [N, M * JX]))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(a1i, 1), 1), [1, M, JX, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_201": {
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[p0, g1, a1i, g1 * a1i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_253": {
                "x": {
                    "value": "self.wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_254": {
                "input_tensor": {
                    "value": "tf.cast(self.x_mask, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_485": {
                "input": {
                    "value": "h_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_486": {
                "input": {
                    "value": "u_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_497": {
                "input_tensor": {
                    "value": "u_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([h_aug, u_aug], None, True, wd=config.wd, mask=hu_mask, is_train=is_train, func=config.logit_func, scope='u_logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_515": {
                "input": {
                    "value": "tf.reduce_mean(u, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_86": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway_network(xx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "multi_conv1d(Acx, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='xx')",
                            "Call"
                        ],
                        [
                            "tf.reshape(xx, [-1, M, JX, dco])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[xx, Ax])",
                            "Call"
                        ],
                        [
                            "Ax",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M, JX, dco]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway_network(qq, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "multi_conv1d(Acq, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='xx')",
                            "Call"
                        ],
                        [
                            "multi_conv1d(Acq, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='qq')",
                            "Call"
                        ],
                        [
                            "tf.reshape(qq, [-1, JQ, dco])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=2, values=[qq, Aq])",
                            "Call"
                        ],
                        [
                            "Aq",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JQ, dco]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_109": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VW, dw]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VW, dw]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[word_emb_mat, self.new_emb_mat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_174": {
                "input": {
                    "value": "tf.expand_dims(u, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_175": {
                "input": {
                    "value": "tf.expand_dims(self.q_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "tensor": {
                    "value": "na_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('na_bias', shape=[], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_218": {
                "input_": {
                    "value": "concat_flat_yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(concat_flat_logits)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_223": {
                "input_": {
                    "value": "concat_flat_yp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(concat_flat_logits2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "tensor": {
                    "value": "self.logits2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, M, JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_252": {
                "x": {
                    "value": "self.wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_254": {
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_257": {
                "x": {
                    "value": "self.wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_174": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "input": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_277": {
                "x": {
                    "value": "concat_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[na, tf.reshape(self.y, [-1, M * JX])])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_279": {
                "x": {
                    "value": "concat_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[na, tf.reshape(self.y2, [-1, M * JX])])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_282": {
                "x": {
                    "value": "tf.reshape(self.y, [-1, M * JX])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_284": {
                "x": {
                    "value": "tf.reshape(self.y2, [-1, M * JX])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_515": {
                "input_tensor": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "tensor": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_284": {
                "tensor": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/basic/trainer.py": {
        "tensorflow": {
            "AdamOptimizer_12": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_42": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_56": {
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_50": {
                "name": {
                    "value": "'grads_{}'.format(gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_50": {
                "device_name": {
                    "value": "'/{}:{}'.format(config.device_type, gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/main.py": {
        "tensorflow": {
            "Session_73": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_143": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_214": {
                "device_name": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_73": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_143": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/my/tensorflow/general.py": {
        "tensorflow": {
            "reshape_127": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(tensor)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_shape + keep_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_147": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "str"
                        ],
                        [
                            "'exp_mask'",
                            "str"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable.get_shape()",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_55": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wd",
                            "Method Argument"
                        ],
                        [
                            "wd",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_102": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val",
                            "Method Argument"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(mask, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "str"
                        ],
                        [
                            "'exp_mask'",
                            "str"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_119": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val",
                            "Method Argument"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "(1 - tf.cast(mask, 'float')) * VERY_NEGATIVE_NUMBER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "str"
                        ],
                        [
                            "'exp_mask'",
                            "str"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_169": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, shape[i] - tf.shape(tensor)[i]] for i in range(len(shape))]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONSTANT'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "str"
                        ],
                        [
                            "'exp_mask'",
                            "str"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_53": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stddev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_56": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='{}/wd'.format(var.op.name))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_81": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_148": {
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_150": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wd",
                            "Method Argument"
                        ],
                        [
                            "wd",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}/wd'.format(var.op.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_55": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "variables",
                            "variable"
                        ]
                    ]
                }
            },
            "get_variable_scope_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_151": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='{}/wd'.format(var.op.name))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_119": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_136": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_137": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_150": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "variables",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_125": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_126": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_168": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/my/tensorflow/nn.py": {
        "tensorflow": {
            "squeeze_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruct(flat_out, args[0], 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, [len(args[0].get_shape().as_list()) - 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : d, lambda : x)",
                            "Call"
                        ],
                        [
                            "reconstruct(flat_out, logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.expand_dims(a, -1) * target, target_rank - 2)",
                            "Call"
                        ],
                        [
                            "gate * trans + (1 - gate) * arg",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tf.nn.relu(xxc), 2)",
                            "Call"
                        ],
                        [
                            "conv1d(in_, filter_size, height, padding, is_train=is_train, keep_prob=keep_prob, scope='conv1d_{}'.format(height))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[len(args[0].get_shape().as_list()) - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "flat_out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(a, -1) * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "target_rank - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_69": {
                "variable": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(args, size, bias, bias_start=bias_start, scope='first', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear([arg], d, bias, bias_start=bias_start, scope='trans', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(trans)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_141": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear([arg], d, bias, bias_start=bias_start, scope='gate', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_160": {
                "variable": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, num_channels, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_161": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_166": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(xxc)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_179": {
                "variable": {
                    "value": "concat_out",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_32": {
                "name": {
                    "value": "name or 'dropout'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : d",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "scope or 'Softmax'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "scope or 'Softsel'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "scope or 'Double_Linear_Logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "scope or 'Linear_Logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "name or 'sum_logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "scope or 'highway_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "scope or 'highway_network'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "scope or 'conv1d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "scope or 'multi_conv1d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cond_18": {
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(arg, input_keep_prob)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : arg",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "conv2d_165": {
                "input": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout(in_, keep_prob, is_train)",
                            "Call"
                        ],
                        [
                            "in_",
                            "Method Argument"
                        ],
                        [
                            "in_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[1, height, num_channels, filter_size], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_166": {
                "features": {
                    "value": "xxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(in_, filter_, strides, padding) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_63": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(logits, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "arg",
                            "Method Argument"
                        ],
                        [
                            "arg",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "rank - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_18": {
                "x": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "arg",
                            "Method Argument"
                        ],
                        [
                            "arg",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "input_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/my/tensorflow/rnn.py": {
        "tensorflow": {
            "bidirectional_dynamic_rnn_74": {
                "variable": {
                    "value": "((flat_fw_outputs, flat_bw_outputs), final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_fw",
                            "Method Argument"
                        ],
                        [
                            "cell_fw",
                            "Method Argument"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_bw",
                            "Method Argument"
                        ],
                        [
                            "cell_bw",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_inputs, 1) if sequence_length is None else tf.reverse_sequence(flat_inputs, sequence_length, 1)",
                            "IfExp"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "flat_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if sequence_length is None else tf.cast(flatten(sequence_length, 0), 'int64')",
                            "IfExp"
                        ],
                        [
                            "None if sequence_length is None else tf.cast(flatten(sequence_length, 0), 'int64')",
                            "IfExp"
                        ],
                        [
                            "None if sequence_length is None else tf.cast(flatten(sequence_length, 0), 'int64')",
                            "IfExp"
                        ],
                        [
                            "None if sequence_length is None else tf.cast(flatten(sequence_length, 0), 'int64')",
                            "IfExp"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "initial_state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "initial_state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_13": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reverse_32": {
                "tensor": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_inputs, 1) if sequence_length is None else tf.reverse_sequence(flat_inputs, sequence_length, 1)",
                            "IfExp"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_33": {
                "input": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_inputs, 1) if sequence_length is None else tf.reverse_sequence(flat_inputs, sequence_length, 1)",
                            "IfExp"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_38": {
                "tensor": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_dynamic_rnn(cell, flat_inputs, sequence_length=flat_len, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=scope)",
                            "Call"
                        ],
                        [
                            "_dynamic_rnn(cell, flat_inputs, sequence_length=flat_len, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=scope)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_outputs, 1) if sequence_length is None else tf.reverse_sequence(flat_outputs, sequence_length, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_39": {
                "input": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_dynamic_rnn(cell, flat_inputs, sequence_length=flat_len, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=scope)",
                            "Call"
                        ],
                        [
                            "_dynamic_rnn(cell, flat_inputs, sequence_length=flat_len, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=scope)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_outputs, 1) if sequence_length is None else tf.reverse_sequence(flat_outputs, sequence_length, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_52": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_71": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/my/tensorflow/rnn_cell.py": {
        "tensorflow": {
            "cond_19": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : outputs_do",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : outputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_scope_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_24": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : new_state_do",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : new_state",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "slice_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(state, [-1, B, d])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reshape(state, [-1, B, d]), 1)",
                            "Call"
                        ],
                        [
                            "self._reduce_func(exp_mask(prev_state, mask), 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prev_state, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_104": {
                "variable": {
                    "value": "q_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._q_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_105": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._input_size + self._q_len]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size + self._q_len], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qs, [-1, self._q_len, self._input_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._q_len, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "x_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._q_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_108": {
                "variable": {
                    "value": "h_prev_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_prev, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._q_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear([qs, x_tiled, h_prev_tiled], self._input_size, True, scope='f')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "exp_mask(linear(f, 1, True, squeeze=True, scope='a'), q_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "qs * tf.expand_dims(a, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_167": {
                "variable": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tiled_inputs] + tiled_states + [memory]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_186": {
                "variable": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tiled_inputs] + tiled_states + [memory]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "scope or self.__class__.__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope or self.__class__.__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope or 'AttentionCell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1), [1, 1, 1, d])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, B, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "tf.reshape(mask, [-1, B, B])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, 0], [-1, self._input_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(inputs, [0, 0], [-1, self._input_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_108": {
                "input": {
                    "value": "h_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_166": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_167": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_185": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_186": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_209": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, sel_mem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_222": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, sel_mem, inputs * sel_mem, tf.abs(inputs - sel_mem)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1), [1, 1, 1, d])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, B, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(exp_mask(linear(f, 1, True, squeeze=True, scope='a'), q_mask))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_169": {
                "input": {
                    "value": "tf.expand_dims(each, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_172": {
                "input": {
                    "value": "tf.expand_dims(state, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_188": {
                "input": {
                    "value": "tf.expand_dims(each, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_191": {
                "input": {
                    "value": "tf.expand_dims(state, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_21": {
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : new_state_do_i",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : new_state_i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "each",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "input": {
                    "value": "each",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_222": {
                "x": {
                    "value": "inputs - sel_mem",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "\u9605\u8bfb\u7406\u89e3/baseline/prepare.py": {
        "tensorflow": {}
    },
    "\u9605\u8bfb\u7406\u89e3/evaluate/evaluate.py": {
        "tensorflow": {}
    }
}