{
    "model.py": {
        "tensorflow": {
            "Coordinator_158": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_159": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_343": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.convolution_layer(res_conv_proj3, [3, 3, 8, num_conv], [1, 1, 1, 1], padding='SAME', relu_after=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, small_img_size * small_img_size * num_conv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_406": {
                "variable": {
                    "value": "X_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_num_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_407": {
                "variable": {
                    "value": "num_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_408": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_num_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_409": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, img_size, img_size, max_num_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_410": {
                "variable": {
                    "value": "img_loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_411": {
                "variable": {
                    "value": "Ques_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_412": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_413": {
                "variable": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_436": {
                "variable": {
                    "value": "X_des_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_439": {
                "variable": {
                    "value": "X_des_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X_des_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(X_des_emb, keep_prob=dropout_keep)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_440": {
                "variable": {
                    "value": "state_X_sen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_des_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(X_des_emb, keep_prob=dropout_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * max_num_sen, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_442": {
                "variable": {
                    "value": "initial_val",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([batch_size, img_size, img_size, max_num_sen])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_564": {
                "variable": {
                    "value": "initial_val_tag",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([batch_size, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_567": {
                "variable": {
                    "value": "state_Ques_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state_Ques",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(tf.contrib.rnn.GRUCell(embedding_size), Ques_emb, dtype=np.float32, sequence_length=Ques_length)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_683": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[X_des_emb_relevant_extra * X_des_emb_curr, tf.abs(X_des_emb_relevant_extra - X_des_emb_curr)]",
                            "List"
                        ],
                        [
                            "tf.concat([conv_rep, text_rep], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([mem_tag, state_Ques], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_rep, mem_tag, state_Ques], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(features, keep_prob=dropout_keep)",
                            "Call"
                        ],
                        [
                            "tf.concat([mem_tag, state_Ques], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_rep, state_Ques], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv1, [-1, small_img_size * small_img_size * num_conv])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_685": {
                "variable": {
                    "value": "Y_squeezed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, num_options, 1])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_726": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "merge_all_743": {
                "variable": {
                    "value": "merged_tr",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_744": {
                "variable": {
                    "value": "merged_va",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "validation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_745": {
                "variable": {
                    "value": "merged_te",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_746": {
                "variable": {
                    "value": "merged_va_f",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "validation_f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_748": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_355": {
                "variable": {
                    "value": "deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.deconvolution_layer(img, [3, 3, 8 * num_conv, 1], deconv_strides=[1, 1, 1, 1], padding='SAME', output_size=[batch_size, small_img_size, small_img_size, 8 * num_conv], relu_after=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(deconv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_361": {
                "variable": {
                    "value": "res_deconv_proj1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res_deconv_proj1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.residual_layer_deconv_projection(deconv1, relu_after=False, output_shape=[batch_size, int(img_size / 4), int(img_size / 4), 4 * num_conv])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_deconv_proj1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_365": {
                "variable": {
                    "value": "res_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.residual_layer_deconv(res_deconv_proj1, relu_after=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_deconv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_369": {
                "variable": {
                    "value": "res_deconv_proj2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res_deconv_proj2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.residual_layer_deconv_projection(res_deconv1, relu_after=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_deconv_proj2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_373": {
                "variable": {
                    "value": "res_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res_deconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.residual_layer_deconv(res_deconv_proj2, relu_after=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(res_deconv2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_387": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocabulary_size + 1, embedding_size], -1 * np.sqrt(3), np.sqrt(3))",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "validate_shape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_396": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_num_sen, max_sen_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_397": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_options, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_398": {
                "variable": {
                    "value": "Ques",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_399": {
                "variable": {
                    "value": "Ques_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size + 1, embedding_size], -1 * np.sqrt(3), np.sqrt(3)), trainable=True, collections=None, validate_shape=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "Ques",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=[batch_size, None])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, None, embedding_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_401": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, max_num_sen, max_sen_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_402": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_403": {
                "variable": {
                    "value": "Ques",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_416": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, img_size, img_size, max_num_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_419": {
                "variable": {
                    "value": "X_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size + 1, embedding_size], -1 * np.sqrt(3), np.sqrt(3)), trainable=True, collections=None, validate_shape=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=[batch_size, max_num_sen, max_sen_len])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, max_num_sen, max_sen_len])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_421": {
                "variable": {
                    "value": "X_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X_emb * encoding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "X_sen_emb_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=[batch_size, max_num_sen, max_sen_len])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, max_num_sen, max_sen_len])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * max_num_sen, max_sen_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_426": {
                "variable": {
                    "value": "X_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_sen_emb_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(X_sen_emb_2, embedding_size, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, max_num_sen, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_429": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "tf.contrib.rnn.GRUCell(embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "tf.contrib.rnn.GRUCell(embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(X_emb * encoding, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(X_sen_emb_3, [batch_size, max_num_sen, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "num_sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_547": {
                "variable": {
                    "value": "loss_img",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_548": {
                "variable": {
                    "value": "accuracy_img",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_552": {
                "variable": {
                    "value": "(_, state_Ques)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "tf.contrib.rnn.GRUCell(embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "Ques_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(word_embedding, Ques)",
                            "Call"
                        ],
                        [
                            "Ques",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "Ques_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_561": {
                "variable": {
                    "value": "initial_val",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([batch_size, img_size, img_size, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_599": {
                "variable": {
                    "value": "con_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "con_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_fea_vis",
                            "variable"
                        ],
                        [
                            "tf.concat(con_fea, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(con_fea, [batch_size * max_num_sen, -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_600": {
                "variable": {
                    "value": "con_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "con_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_fea_vis",
                            "variable"
                        ],
                        [
                            "tf.concat(con_fea, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(con_fea, [batch_size * max_num_sen, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * max_num_sen, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_614": {
                "variable": {
                    "value": "att_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(con_fea, embedding_size, activation_fn=tf.nn.tanh, reuse=reuse_var, scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(att_val, 1, activation_fn=None, reuse=reuse_var, scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(att_val, [batch_size, max_num_sen])",
                            "Call"
                        ],
                        [
                            "tf.exp(att_val)",
                            "Call"
                        ],
                        [
                            "att_val * mask",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, max_num_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_617": {
                "variable": {
                    "value": "att_val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "att_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(con_fea, embedding_size, activation_fn=tf.nn.tanh, reuse=reuse_var, scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(att_val, 1, activation_fn=None, reuse=reuse_var, scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(att_val, [batch_size, max_num_sen])",
                            "Call"
                        ],
                        [
                            "tf.exp(att_val)",
                            "Call"
                        ],
                        [
                            "att_val * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_620": {
                "variable": {
                    "value": "gru_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X_des_emb, tf.expand_dims(att_val_smax, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_642": {
                "variable": {
                    "value": "mem_tag_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "mem_tag_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_tag_fea_text",
                            "variable"
                        ],
                        [
                            "tf.concat(mem_tag_fea, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_680": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mem_tag, state_Ques]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_707": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_717": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg * loss_acc + (1 - reg) * loss_img + l2_reg * loss_reg",
                            "BinOp"
                        ],
                        [
                            "loss_acc + l2_reg * loss_reg",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_718": {
                "name": {
                    "value": "loss_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=Y_squeezed, logits=score))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.pow(Y_out - Y, 2))",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_719": {
                "name": {
                    "value": "loss_reg",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss_reg + tf.nn.l2_loss(v)",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_720": {
                "name": {
                    "value": "accuracy_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([]), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_730": {
                "variable": {
                    "value": "complete_accuracy_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_731": {
                "variable": {
                    "value": "complete_accuracy_img",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_737": {
                "variable": {
                    "value": "complete_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_738": {
                "variable": {
                    "value": "complete_img_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_768": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "chkpoint_dir + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_769": {
                "variable": {
                    "value": "validation_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "chkpoint_dir + '/validation'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_770": {
                "variable": {
                    "value": "test_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "chkpoint_dir + '/test'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_771": {
                "variable": {
                    "value": "validation_f_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "chkpoint_dir + '/validation_f'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_774": {
                "variable": {
                    "value": "init_op1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_776": {
                "variable": {
                    "value": "init_opt2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "res_conv_proj1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_327": {
                "name_or_scope": {
                    "value": "res_conv1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "res_conv_proj2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "res_conv2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_336": {
                "name_or_scope": {
                    "value": "res_conv_proj3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "res_deconv_proj1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "res_deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "res_deconv_proj2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "res_deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_375": {
                "name_or_scope": {
                    "value": "res_deconv_proj3",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_428": {
                "name_or_scope": {
                    "value": "X_sen",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_436": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(tf.contrib.rnn.GRUCell(embedding_size), tf.contrib.rnn.GRUCell(embedding_size), X_encoded, dtype=np.float32, sequence_length=num_sen)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_442": {
                "shape": {
                    "value": "[batch_size, img_size, img_size, max_num_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_485": {
                "variable": {
                    "value": "text_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(X_des_emb, begin=[0, i, 0], size=[batch_size, 1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_486": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv_rep, text_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_495": {
                "variable": {
                    "value": "mask_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, max_num_sen])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_496": {
                "input": {
                    "value": "mask_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(mask, begin=[0, i], size=[batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(mask_curr, axis=2), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_498": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 0], [0, 0], [i, max_num_sen - 1 - i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_499": {
                "variable": {
                    "value": "output_temp_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_decoder(img_small, num_conv_layer, reuse_var=reuse_var)",
                            "Call"
                        ],
                        [
                            "output_temp * mask_curr",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([[0, 0], [0, 0], [0, 0], [i, max_num_sen - 1 - i]])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_531": {
                "variable": {
                    "value": "img_new_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_curr",
                            "variable"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size * img_size * img_size * max_num_sen, -1])",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(img_new, is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_532": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, max_num_sen])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_544": {
                "variable": {
                    "value": "accuracy_img",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_551": {
                "name_or_scope": {
                    "value": "Ques_lstm",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_564": {
                "shape": {
                    "value": "[batch_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_579": {
                "variable": {
                    "value": "con_fea_vis_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.abs(mem - img_new_sig_rel)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_580": {
                "variable": {
                    "value": "con_fea_vis_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "con_fea_vis_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.abs(mem - img_new_sig_rel), perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(con_fea_vis_abs, [batch_size * max_num_sen, img_size, img_size, 1])",
                            "Call"
                        ],
                        [
                            "img_encoder(con_fea_vis_abs, num_conv_layer, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * max_num_sen, img_size, img_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_584": {
                "variable": {
                    "value": "con_fea_vis_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mem * img_new_sig_rel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_585": {
                "variable": {
                    "value": "con_fea_vis_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "con_fea_vis_mul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(mem * img_new_sig_rel, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(con_fea_vis_mul, [batch_size * max_num_sen, img_size, img_size, 1])",
                            "Call"
                        ],
                        [
                            "img_encoder(con_fea_vis_mul, num_conv_layer, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * max_num_sen, img_size, img_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_623": {
                "variable": {
                    "value": "(_, con_tag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "AttentionGRUCell(embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "gru_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([X_des_emb, tf.expand_dims(att_val_smax, 2)], 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "num_sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_629": {
                "variable": {
                    "value": "con",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "img_new_sig_rel * tf.expand_dims(tf.expand_dims(att_val_smax, 1), 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_653": {
                "variable": {
                    "value": "mem_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "mem_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_fea_text",
                            "variable"
                        ],
                        [
                            "tf.concat(mem_fea, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_656": {
                "variable": {
                    "value": "mem_small",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mem_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(mem_fea, small_img_size * small_img_size, relu_after=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mem_small, [batch_size, small_img_size, small_img_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, small_img_size, small_img_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_661": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_val",
                            "variable"
                        ],
                        [
                            "img_decoder(mem_small, num_conv_layer, reuse_var=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mem, shape=[batch_size * img_size * img_size * 1, -1])",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(mem, is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mem, shape=[batch_size, img_size, img_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(mem)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * img_size * img_size * 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_664": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_val",
                            "variable"
                        ],
                        [
                            "img_decoder(mem_small, num_conv_layer, reuse_var=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mem, shape=[batch_size * img_size * img_size * 1, -1])",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(mem, is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mem, shape=[batch_size, img_size, img_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(mem)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, img_size, img_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_665": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_val",
                            "variable"
                        ],
                        [
                            "img_decoder(mem_small, num_conv_layer, reuse_var=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mem, shape=[batch_size * img_size * img_size * 1, -1])",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(mem, is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mem, shape=[batch_size, img_size, img_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(mem)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_674": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv_rep, mem_tag, state_Ques]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_686": {
                "name_or_scope": {
                    "value": "Classification",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_693": {
                "variable": {
                    "value": "loss_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=Y_squeezed, logits=score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_695": {
                "variable": {
                    "value": "Y_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y_squeezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(Y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_696": {
                "variable": {
                    "value": "Y_pred_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc1_out",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_697": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Y_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(Y_squeezed, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Y_pred_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(score, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_698": {
                "variable": {
                    "value": "accuracy_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_701": {
                "variable": {
                    "value": "Y_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(input_x=features, ouput_dim=num_options, relu_after=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_702": {
                "variable": {
                    "value": "loss_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(Y_out - Y, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_703": {
                "variable": {
                    "value": "accuracy_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_723": {
                "name": {
                    "value": "loss_img",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([]), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=img, logits=img_new)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.reduce_sum(mask_modi) * img_size * img_size, 0), lambda : tf.zeros([]), lambda : tf.reduce_sum(loss_img * mask_modi) / (tf.reduce_sum(mask_modi) * img_size * img_size))",
                            "Call"
                        ],
                        [
                            "100.0 / per_inter_sup * tf.reduce_mean(tf.multiply(tf.pow(img_created_reshape - img_reshape, 2), loss_mask_reshape))",
                            "BinOp"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_724": {
                "name": {
                    "value": "accuracy_img",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([]), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.reduce_sum(mask_modi) * img_size * img_size, 0), lambda : tf.zeros([]), lambda : tf.reduce_sum(correct_prediction) / (tf.reduce_sum(mask_modi) * img_size * img_size))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([]), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_732": {
                "name": {
                    "value": "complete_accuracy_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "complete_accuracy_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['validation', 'test', 'validation_f']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_734": {
                "name": {
                    "value": "complete_accuracy_img",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "complete_accuracy_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['validation', 'test', 'validation_f']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_739": {
                "name": {
                    "value": "complete_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "complete_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['validation', 'test', 'validation_f']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_740": {
                "name": {
                    "value": "complete_img_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "complete_img_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "['validation', 'test', 'validation_f']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_758": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRUCell_429": {
                "units": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['embedding_size']",
                            "Subscript"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_430": {
                "units": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['embedding_size']",
                            "Subscript"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_453": {
                "variable": {
                    "value": "input_curr_relevant",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "input_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_val",
                            "variable"
                        ],
                        [
                            "output_curr",
                            "variable"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, img_size, img_size, i + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "img_small",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(features, small_img_size * small_img_size, relu_after=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img_small, [batch_size, small_img_size, small_img_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, small_img_size, small_img_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_507": {
                "variable": {
                    "value": "loss_img",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "img_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_curr",
                            "variable"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size * img_size * img_size * max_num_sen, -1])",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(img_new, is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_510": {
                "variable": {
                    "value": "loss_img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.reduce_sum(mask_modi) * img_size * img_size, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.reduce_sum(loss_img * mask_modi) / (tf.reduce_sum(mask_modi) * img_size * img_size)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ones_514": {
                "variable": {
                    "value": "ones_img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_515": {
                "variable": {
                    "value": "zeros_img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_516": {
                "variable": {
                    "value": "predicted_img",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "img_new < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(img))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ones_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.shape(img))",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_518": {
                "variable": {
                    "value": "accuracy_img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.reduce_sum(mask_modi) * img_size * img_size, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.reduce_sum(correct_prediction) / (tf.reduce_sum(mask_modi) * img_size * img_size)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_526": {
                "variable": {
                    "value": "img_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_curr",
                            "variable"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size * img_size * img_size * max_num_sen, -1])",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(img_new, is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * img_size * img_size * max_num_sen, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_528": {
                "variable": {
                    "value": "img_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_curr",
                            "variable"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size * img_size * img_size * max_num_sen, -1])",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(img_new, is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, img_size, img_size, max_num_sen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_536": {
                "variable": {
                    "value": "img_created_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_curr",
                            "variable"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size * img_size * img_size * max_num_sen, -1])",
                            "Call"
                        ],
                        [
                            "layers.batch_norm(img_new, is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img_new, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_537": {
                "variable": {
                    "value": "img_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_539": {
                "variable": {
                    "value": "loss_mask_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_mask_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mask * tf.expand_dims(tf.expand_dims(tf.expand_dims(img_loss_mask, 1), 1), 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_547": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_548": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GRUCell_552": {
                "units": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['embedding_size']",
                            "Subscript"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_561": {
                "shape": {
                    "value": "[batch_size, img_size, img_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_573": {
                "x": {
                    "value": "state_Ques_expanded - X_des_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_575": {
                "x": {
                    "value": "X_des_emb - tf.expand_dims(mem_tag, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_601": {
                "name_or_scope": {
                    "value": "att_val",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_619": {
                "input_tensor": {
                    "value": "att_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(con_fea, embedding_size, activation_fn=tf.nn.tanh, reuse=reuse_var, scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(att_val, 1, activation_fn=None, reuse=reuse_var, scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.reshape(att_val, [batch_size, max_num_sen])",
                            "Call"
                        ],
                        [
                            "tf.exp(att_val)",
                            "Call"
                        ],
                        [
                            "att_val * mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_622": {
                "name_or_scope": {
                    "value": "attention_gru",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_643": {
                "name_or_scope": {
                    "value": "'mem_tag' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_669": {
                "name_or_scope": {
                    "value": "img_encoder_final",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "concat_676": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mem_tag, state_Ques]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_678": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv_rep, state_Ques]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_687": {
                "name_or_scope": {
                    "value": "fc1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_709": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_450": {
                "name_or_scope": {
                    "value": "channel_attention",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "bool(i - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_458": {
                "variable": {
                    "value": "X_des_emb_relevant",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X_des_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(X_des_emb, keep_prob=dropout_keep)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, i, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_459": {
                "variable": {
                    "value": "X_des_emb_extra",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([batch_size, 1, embedding_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_460": {
                "variable": {
                    "value": "X_des_emb_relevant_extra",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X_des_emb_relevant, X_des_emb_extra]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_461": {
                "variable": {
                    "value": "X_des_emb_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X_des_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(X_des_emb, keep_prob=dropout_keep)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, 1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_464": {
                "variable": {
                    "value": "feature_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[X_des_emb_relevant_extra * X_des_emb_curr, tf.abs(X_des_emb_relevant_extra - X_des_emb_curr)]",
                            "List"
                        ],
                        [
                            "tf.concat([conv_rep, text_rep], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([mem_tag, state_Ques], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_rep, mem_tag, state_Ques], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(features, keep_prob=dropout_keep)",
                            "Call"
                        ],
                        [
                            "tf.concat([mem_tag, state_Ques], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv_rep, state_Ques], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv1, [-1, small_img_size * small_img_size * num_conv])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_465": {
                "variable": {
                    "value": "feature_vec_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(features, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * (i + 1), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_477": {
                "variable": {
                    "value": "attention_values_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(feature_vec_reshaped, embedding_size, activation_fn=tf.nn.tanh, reuse=bool(i - 1), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(attention_values, 1, activation_fn=None, reuse=bool(i - 1), scope='fc2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, i + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_478": {
                "variable": {
                    "value": "attention_values_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_values_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention_values, [batch_size, i + 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_479": {
                "input": {
                    "value": "attention_values_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_values_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_480": {
                "variable": {
                    "value": "relevant_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_curr_relevant * attention_values_softmax_reshaped",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_483": {
                "name_or_scope": {
                    "value": "img_encoder",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_485": {
                "input_": {
                    "value": "X_des_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(outputs), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(X_des_emb, keep_prob=dropout_keep)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size, 1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_488": {
                "name_or_scope": {
                    "value": "img_small",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_492": {
                "name_or_scope": {
                    "value": "img_decoder",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_506": {
                "name_or_scope": {
                    "value": "loss_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_535": {
                "name_or_scope": {
                    "value": "loss_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_544": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_574": {
                "input": {
                    "value": "mem_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_val_tag",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(mem_tag_fea, embedding_size, relu_after=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_579": {
                "x": {
                    "value": "mem - img_new_sig_rel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_581": {
                "name_or_scope": {
                    "value": "img_encoder_con_abs",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_586": {
                "name_or_scope": {
                    "value": "img_encoder_con_mul",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_589": {
                "tensor": {
                    "value": "con_fea_vis_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.abs(mem - img_new_sig_rel), perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(con_fea_vis_abs, [batch_size * max_num_sen, img_size, img_size, 1])",
                            "Call"
                        ],
                        [
                            "img_encoder(con_fea_vis_abs, num_conv_layer, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, max_num_sen, small_img_size * small_img_size * num_conv_layer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_591": {
                "tensor": {
                    "value": "con_fea_vis_mul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(mem * img_new_sig_rel, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(con_fea_vis_mul, [batch_size * max_num_sen, img_size, img_size, 1])",
                            "Call"
                        ],
                        [
                            "img_encoder(con_fea_vis_mul, num_conv_layer, reuse_var=reuse_var)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, max_num_sen, small_img_size * small_img_size * num_conv_layer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_620": {
                "input": {
                    "value": "att_val_smax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_val / tf.reduce_sum(att_val, axis=1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_634": {
                "name_or_scope": {
                    "value": "img_encoder_con",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_648": {
                "name_or_scope": {
                    "value": "'img_encoder' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_654": {
                "name_or_scope": {
                    "value": "mem_small",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "bool(i)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_657": {
                "name_or_scope": {
                    "value": "'img_decoder' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_662": {
                "name_or_scope": {
                    "value": "'mem_bn' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_693": {
                "labels": {
                    "value": "Y_squeezed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(Y)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc1_out",
                            "variable"
                        ]
                    ]
                }
            },
            "cast_698": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(predicted_img, img), tf.float32) * mask_modi",
                            "BinOp"
                        ],
                        [
                            "tf.equal(Y_class, Y_pred_class)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_702": {
                "x": {
                    "value": "Y_out - Y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_703": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_508": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, max_num_sen])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_510": {
                "x": {
                    "value": "tf.reduce_sum(mask_modi) * img_size * img_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_514": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_515": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_517": {
                "x": {
                    "value": "tf.equal(predicted_img, img)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_518": {
                "x": {
                    "value": "tf.reduce_sum(mask_modi) * img_size * img_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_538": {
                "input": {
                    "value": "img_loss_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_540": {
                "input_tensor": {
                    "value": "tf.multiply(tf.pow(img_created_reshape - img_reshape, 2), loss_mask_reshape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_575": {
                "input": {
                    "value": "mem_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_val_tag",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(mem_tag_fea, embedding_size, relu_after=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_629": {
                "input": {
                    "value": "att_val_smax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_val / tf.reduce_sum(att_val, axis=1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "shape": {
                    "value": "[batch_size, 1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_463": {
                "x": {
                    "value": "X_des_emb_relevant_extra - X_des_emb_curr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_509": {
                "input": {
                    "value": "img_loss_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_511": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_517": {
                "x": {
                    "value": "predicted_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(img_new < 0, x=zeros_img, y=ones_img)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[batch_size, img_size, img_size, max_num_sen])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_519": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_541": {
                "x": {
                    "value": "tf.pow(img_created_reshape - img_reshape, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "loss_mask_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(loss_mask_temp, [-1, 12])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_512": {
                "input_tensor": {
                    "value": "loss_img * mask_modi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_520": {
                "input_tensor": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(predicted_img, img), tf.float32) * mask_modi",
                            "BinOp"
                        ],
                        [
                            "tf.equal(Y_class, Y_pred_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_541": {
                "x": {
                    "value": "img_created_reshape - img_reshape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_510": {
                "input_tensor": {
                    "value": "mask_modi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(mask, 1), 1) * tf.expand_dims(tf.expand_dims(tf.expand_dims(img_loss_mask, 1), 1), 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(mask, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_518": {
                "input_tensor": {
                    "value": "mask_modi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(mask, 1), 1) * tf.expand_dims(tf.expand_dims(tf.expand_dims(img_loss_mask, 1), 1), 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(mask, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_513": {
                "input_tensor": {
                    "value": "mask_modi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(mask, 1), 1) * tf.expand_dims(tf.expand_dims(tf.expand_dims(img_loss_mask, 1), 1), 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(mask, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_521": {
                "input_tensor": {
                    "value": "mask_modi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(mask, 1), 1) * tf.expand_dims(tf.expand_dims(tf.expand_dims(img_loss_mask, 1), 1), 1)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(mask, 1), 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/attention_gru_cell.py": {
        "tensorflow": {
            "get_variable_scope_116": {
                "variable": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_arg_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable_scope()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_121": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('weights', [total_arg_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat(args, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('weights', [total_arg_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_ops.constant_initializer(bias_start, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_132": {
                "value": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(args[0], weights)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat(args, 1), weights)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vs.get_variable('biases', [output_size], dtype=dtype, initializer=init_ops.constant_initializer(bias_start, dtype=dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "warn_48": {
                "msg": {
                    "value": "%s: The input_size parameter is deprecated.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "scope or 'attention_gru_cell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "split_69": {
                "variable": {
                    "value": "(inputs, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(inputs, num_or_size_splits=[self._num_units, 1], axis=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self._num_units, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_linear([inputs, state], self._num_units, True)",
                            "Call"
                        ],
                        [
                            "sigmoid(r)",
                            "Call"
                        ],
                        [
                            "r * _linear(state, self._num_units, False)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "outer_scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "candidate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_123": {
                "values": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[args]",
                            "List"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_131": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/floor_plan_qa_loader.py": {
        "tensorflow": {
            "TFRecordReader_121": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_138": {
                "variable": {
                    "value": "(context_parsed, sequence_parsed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "context_features": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'des_len': tf.FixedLenFeature([], tf.int64), 'ques_len': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                },
                "sequence_features": {
                    "value": "sequence_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'des_seq': tf.FixedLenSequenceFeature([1], tf.int64), 'ques_seq': tf.FixedLenSequenceFeature([1], tf.int64), 'sol_seq': tf.FixedLenSequenceFeature([1], tf.int64), 'img_seq': tf.FixedLenSequenceFeature([36 * 11], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "string_input_producer_143": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Method Argument"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_156": {
                "variable": {
                    "value": "batched_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[context_parsed['des_len'], context_parsed['ques_len']]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FixedLenFeature_128": {
                "variable": {
                    "value": "context_features[opt_ + str(i) + _len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_137": {
                "variable": {
                    "value": "sequence_features[opt_ + str(i) + _seq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_124": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_125": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_130": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_131": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_132": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_134": {
                "shape": {
                    "value": "[36 * 11]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/layers.py": {
        "tensorflow": {
            "get_variable_9": {
                "variable": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_11": {
                "variable": {
                    "value": "conv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('c1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_12": {
                "variable": {
                    "value": "bias_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_13": {
                "variable": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_out + bias_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_15": {
                "variable": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_17": {
                "variable": {
                    "value": "conv2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "conv1_out + bias_conv1",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth * 2, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "bias_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x + layer2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "conv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('c1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "bias_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3]) * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_out + bias_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_36": {
                "variable": {
                    "value": "conv2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "conv1_out + bias_conv1",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth * 2, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "bias_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3]) * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_40": {
                "variable": {
                    "value": "input_projection_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "conv2_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_projection_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 3, 3, 1], strides=[1, 3, 3, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_projection + layer2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_52": {
                "variable": {
                    "value": "conv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('c1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "bias_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_out + bias_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "conv2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "conv1_out + bias_conv1",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth * 2, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "bias_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_62": {
                "variable": {
                    "value": "input_projection_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_63": {
                "variable": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv2_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_projection_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 3, 3, 1], strides=[1, 3, 3, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_projection + layer2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_75": {
                "variable": {
                    "value": "conv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('c1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "bias_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_out + bias_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "conv2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "conv1_out + bias_conv1",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth * 2, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "bias_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_85": {
                "variable": {
                    "value": "input_projection_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_88": {
                "variable": {
                    "value": "conv2_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_projection_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 3, 3, 1], strides=[1, 3, 3, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_projection + layer2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_98": {
                "variable": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "conv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('c1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "bias_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(int(input_x.get_shape()[3]) / 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_out + bias_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(int(input_x.get_shape()[3]) / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "variable": {
                    "value": "conv2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1_out + bias_conv1)",
                            "Call"
                        ],
                        [
                            "conv1_out + bias_conv1",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth * 2, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "bias_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(int(input_x.get_shape()[3]) / 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_112": {
                "variable": {
                    "value": "input_projection_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_115": {
                "variable": {
                    "value": "conv2_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_projection_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 3, 3, 1], strides=[1, 3, 3, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(input_x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_projection + layer2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "bias_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), int(input_x.get_shape()[1]), int(input_x.get_shape()[2]), int(input_x.get_shape()[3])], strides=[1, 1, 1, 1], padding='SAME')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_135": {
                "variable": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_137": {
                "variable": {
                    "value": "bias_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "bias_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(int(input_x.get_shape()[3]) / 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_shape, strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_166": {
                "variable": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) / 2, int(input_x.get_shape()[3]) / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_168": {
                "variable": {
                    "value": "bias_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3]) / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_174": {
                "variable": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_176": {
                "variable": {
                    "value": "res1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[1, 1, int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) / 2)]",
                            "List"
                        ],
                        [
                            "[batch, 2 * height, 2 * width, int(depth / 2)]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "bias_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(int(input_x.get_shape()[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_194": {
                "variable": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 3, 3, 1], padding='SAME')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_201": {
                "variable": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_203": {
                "variable": {
                    "value": "bias_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_210": {
                "variable": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_212": {
                "variable": {
                    "value": "res1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[1, 1, int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_226": {
                "variable": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "bias_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(int(input_x.get_shape()[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_231": {
                "variable": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_238": {
                "variable": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_240": {
                "variable": {
                    "value": "bias_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_247": {
                "variable": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_249": {
                "variable": {
                    "value": "res1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[1, 1, int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_265": {
                "variable": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_268": {
                "variable": {
                    "value": "bias_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(int(input_x.get_shape()[3]) * 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_270": {
                "variable": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_277": {
                "variable": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_279": {
                "variable": {
                    "value": "bias_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[3]) * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_286": {
                "variable": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_288": {
                "variable": {
                    "value": "res1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[1, 1, int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_302": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[1]), int(input_x.get_shape()[1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_303": {
                "variable": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_304": {
                "variable": {
                    "value": "fc1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(input_x, fc1) + bias1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_306": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[1]), int(input_x.get_shape()[1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_307": {
                "variable": {
                    "value": "bias2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_317": {
                "variable": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_shape",
                            "Method Argument"
                        ],
                        [
                            "filter_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_318": {
                "variable": {
                    "value": "bias_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_330": {
                "variable": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "c1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_shape",
                            "Method Argument"
                        ],
                        [
                            "filter_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_331": {
                "variable": {
                    "value": "conv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('c1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "conv_strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_332": {
                "variable": {
                    "value": "bias_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_341": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "f1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(input_x.get_shape()[-1]), int(ouput_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_342": {
                "variable": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(ouput_dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_362": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_364": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[n_out])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_366": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_367": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_374": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_var_with_update",
                            "Call"
                        ],
                        [
                            "mean_var_with_update",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_377": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[n_out]), name='beta', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(shape=[n_out], initializer=tf.zeros_initializer(), name='beta', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[n_out]), name='gamma', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(shape=[n_out], initializer=tf.zeros_initializer(), name='gamma', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_393": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_395": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_397": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_398": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_405": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_var_with_update",
                            "Call"
                        ],
                        [
                            "mean_var_with_update",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_408": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[n_out]), name='beta', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(shape=[n_out], initializer=tf.zeros_initializer(), name='beta', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[n_out]), name='gamma', trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(shape=[n_out], initializer=tf.zeros_initializer(), name='gamma', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_420": {
                "variable": {
                    "value": "input_x_relu1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x_bn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_422": {
                "variable": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], depth, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_423": {
                "variable": {
                    "value": "conv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x_relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('c1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_424": {
                "variable": {
                    "value": "bias_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_429": {
                "variable": {
                    "value": "input_x_relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x_bn2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_conv(input_x_conv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_conv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_deconv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_deconv1, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_431": {
                "variable": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], depth, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_432": {
                "variable": {
                    "value": "conv2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x_relu2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth * 2, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_433": {
                "variable": {
                    "value": "bias_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_446": {
                "variable": {
                    "value": "input_x_relu1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x_bn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_448": {
                "variable": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], depth, depth * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_449": {
                "variable": {
                    "value": "conv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x_relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('c1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_450": {
                "variable": {
                    "value": "bias_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_455": {
                "variable": {
                    "value": "input_x_relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x_bn2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_conv(input_x_conv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_conv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_deconv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_deconv1, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_457": {
                "variable": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], depth * 2, depth * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_458": {
                "variable": {
                    "value": "conv2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x_relu2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv2', shape=[filter_h_w[0], filter_h_w[1], depth * 2, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_459": {
                "variable": {
                    "value": "bias_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_462": {
                "variable": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, depth, depth * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_463": {
                "variable": {
                    "value": "input_x_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_conv_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, int(input_x.get_shape()[3]), int(int(input_x.get_shape()[3]) / 2)])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('conv3', shape=[1, 1, depth, depth * 2])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_481": {
                "variable": {
                    "value": "input_x_relu1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x_bn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_483": {
                "variable": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], depth, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_484": {
                "variable": {
                    "value": "bias_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_490": {
                "variable": {
                    "value": "input_x_relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x_bn2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_conv(input_x_conv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_conv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_deconv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_deconv1, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_492": {
                "variable": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], depth, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_493": {
                "variable": {
                    "value": "bias_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_513": {
                "variable": {
                    "value": "input_x_relu1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x_bn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_515": {
                "variable": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(depth / 2), depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_516": {
                "variable": {
                    "value": "bias_deconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(depth / 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_522": {
                "variable": {
                    "value": "input_x_relu2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x_bn2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_norm_conv(input_x_conv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_conv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_deconv1, is_training)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(input_x_deconv1, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_524": {
                "variable": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "deconv2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_h_w[0], filter_h_w[1], int(depth / 2), int(depth / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_525": {
                "variable": {
                    "value": "bias_deconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(depth / 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_529": {
                "variable": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, int(depth / 2), depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_530": {
                "variable": {
                    "value": "input_x_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('res1', shape=[1, 1, int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) / 2)]",
                            "List"
                        ],
                        [
                            "[batch, 2 * height, 2 * width, int(depth / 2)]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_x + deconv2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res1_out + deconv2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_218": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res1_out + deconv2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_255": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res1_out + deconv2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_294": {
                "variable": {
                    "value": "output_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res1_out + deconv2_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_312": {
                "variable": {
                    "value": "layer_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x + fc2_out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(layer_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_320": {
                "variable": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_334": {
                "variable": {
                    "value": "layer1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_out + bias_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_345": {
                "variable": {
                    "value": "fc1_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(input_x, fc1) + bias1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_x, fc1) + bias1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(fc1_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_138": {
                "input": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), int(input_x.get_shape()[1]), int(input_x.get_shape()[2]), int(input_x.get_shape()[3])], strides=[1, 1, 1, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_shape, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 3, 3, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding))",
                            "Call"
                        ],
                        [
                            "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding)",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) / 2, int(input_x.get_shape()[3]) / 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), int(depth / 2)])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), int(input_x.get_shape()[1]), int(input_x.get_shape()[2]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_169": {
                "input": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), int(input_x.get_shape()[1]), int(input_x.get_shape()[2]), int(input_x.get_shape()[3])], strides=[1, 1, 1, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_shape, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 3, 3, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding))",
                            "Call"
                        ],
                        [
                            "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding)",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) / 2, int(input_x.get_shape()[3]) / 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), int(depth / 2)])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) / 2)]",
                            "List"
                        ],
                        [
                            "[batch, 2 * height, 2 * width, int(depth / 2)]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_204": {
                "input": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), int(input_x.get_shape()[1]), int(input_x.get_shape()[2]), int(input_x.get_shape()[3])], strides=[1, 1, 1, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_shape, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 3, 3, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding))",
                            "Call"
                        ],
                        [
                            "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding)",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) / 2, int(input_x.get_shape()[3]) / 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), int(depth / 2)])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_241": {
                "input": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), int(input_x.get_shape()[1]), int(input_x.get_shape()[2]), int(input_x.get_shape()[3])], strides=[1, 1, 1, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_shape, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 3, 3, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding))",
                            "Call"
                        ],
                        [
                            "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding)",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) / 2, int(input_x.get_shape()[3]) / 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), int(depth / 2)])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_280": {
                "input": {
                    "value": "deconv1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), int(input_x.get_shape()[1]), int(input_x.get_shape()[2]), int(input_x.get_shape()[3])], strides=[1, 1, 1, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_shape, strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 3, 3, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, [int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)], strides=[1, 2, 2, 1], padding='SAME'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding))",
                            "Call"
                        ],
                        [
                            "bias_deconv1 + tf.nn.conv2d_transpose(input_x, weight_deconv1, output_size, strides=deconv_strides, padding=padding)",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) / 2, int(input_x.get_shape()[3]) / 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), int(depth / 2)])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_308": {
                "a": {
                    "value": "fc1_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(input_x, fc1) + bias1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_x, fc1) + bias1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(fc1_out)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('f2', shape=[int(input_x.get_shape()[1]), int(input_x.get_shape()[1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_343": {
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('f1', shape=[int(input_x.get_shape()[1]), int(input_x.get_shape()[1])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('f1', shape=[int(input_x.get_shape()[-1]), int(ouput_dim)])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_362": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_364": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_427": {
                "name_or_scope": {
                    "value": "bn2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_444": {
                "name_or_scope": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_453": {
                "name_or_scope": {
                    "value": "bn2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_479": {
                "name_or_scope": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_485": {
                "input": {
                    "value": "input_x_relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[batch, height, width, depth]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_488": {
                "name_or_scope": {
                    "value": "bn2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_494": {
                "input": {
                    "value": "input_x_relu2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) / 2, int(input_x.get_shape()[3]) / 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), int(depth / 2)])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[batch, height, width, depth]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_511": {
                "name_or_scope": {
                    "value": "bn1",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_517": {
                "input": {
                    "value": "input_x_relu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) / 2)]",
                            "List"
                        ],
                        [
                            "[batch, 2 * height, 2 * width, int(depth / 2)]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "bn2",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ],
                        [
                            "reuse_var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_526": {
                "input": {
                    "value": "input_x_relu2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_x_bn2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) / 2, int(input_x.get_shape()[3]) / 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]) * 2, int(input_x.get_shape()[3]) * 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv2', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), int(depth / 2)])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) / 2)]",
                            "List"
                        ],
                        [
                            "[batch, 2 * height, 2 * width, int(depth / 2)]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_transpose_128": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), int(input_x.get_shape()[1]), int(input_x.get_shape()[2]), int(input_x.get_shape()[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_transpose_161": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) / 2)]",
                            "List"
                        ],
                        [
                            "[batch, 2 * height, 2 * width, int(depth / 2)]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_transpose_194": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 3 * int(input_x.get_shape()[1]), 3 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_transpose_231": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_transpose_270": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[int(input_x.get_shape()[0]), 2 * int(input_x.get_shape()[1]), 2 * int(input_x.get_shape()[2]), int(int(input_x.get_shape()[3]) * 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_304": {
                "a": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('f1', shape=[int(input_x.get_shape()[1]), int(input_x.get_shape()[1])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('f1', shape=[int(input_x.get_shape()[-1]), int(ouput_dim)])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_transpose_324": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "deconv_strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_371": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_402": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_424": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_transpose_321": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ],
                        [
                            "input_x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight_deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(input_x.get_shape()[3]), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) / 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3])), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(int(input_x.get_shape()[3]) * 2), int(input_x.get_shape()[3])])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=filter_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], depth, depth])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('deconv1', shape=[filter_h_w[0], filter_h_w[1], int(depth / 2), depth])",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "deconv_strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_372": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(inputs, [0], name='moments')",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(inputs, [0, 1, 2], name='moments')",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_403": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(inputs, [0], name='moments')",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(inputs, [0, 1, 2], name='moments')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}