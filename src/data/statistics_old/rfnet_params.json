{
    "example.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_53": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "cfg.PROJ.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hand_craft_repeatability.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "kp2_",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kp2c_",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "kp1w",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ptCltoCr(kp1c_, homo12_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "HpatchDataset(data_type='test', PPT=0.9, use_all=a, csv_file=csv_file, root_dir=root_dir, transform=transforms.Compose([Grayscale(), Normalize(mean=mean, std=std), Rescale((960, 1280)), Rescale((240, 320)), ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "cfg.PROJ.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hpatch_dataset.py": {
        "torch": {
            "from_numpy_294": {
                "variable": {
                    "value": "sample[im1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.imread(im1_path)",
                            "Call"
                        ],
                        [
                            "self.impair[idx][0]",
                            "Subscript"
                        ],
                        [
                            "transform.resize(im1, (new_h, new_w), mode='constant')",
                            "Call"
                        ],
                        [
                            "im1[top1:top1 + int(new_h), left1:left1 + int(new_w)]",
                            "Subscript"
                        ],
                        [
                            "im1.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_295": {
                "variable": {
                    "value": "sample[im2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.imread(im2_path)",
                            "Call"
                        ],
                        [
                            "self.impair[idx][1]",
                            "Subscript"
                        ],
                        [
                            "transform.resize(im2, (new_h, new_w), mode='constant')",
                            "Call"
                        ],
                        [
                            "im2[top2:top2 + int(new_h), left2:left2 + int(new_w)]",
                            "Subscript"
                        ],
                        [
                            "im2.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_296": {
                "variable": {
                    "value": "sample[im1_info]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im1_info",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_297": {
                "variable": {
                    "value": "sample[im2_info]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im2_info",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_298": {
                "variable": {
                    "value": "sample[homo12]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(homo12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_299": {
                "variable": {
                    "value": "sample[homo21]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(homo21)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_300": {
                "variable": {
                    "value": "sample[im1_raw]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im1_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "im1_raw.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_301": {
                "variable": {
                    "value": "sample[im2_raw]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im2_raw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "im2_raw.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/rf_des.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "mp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_69": {
                "variable": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "dist_matrix.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_90": {
                "variable": {
                    "value": "col_row_min",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "col_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist_without_min_on_diag.min(dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_93": {
                "variable": {
                    "value": "hard_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.MARGIN + pos - col_row_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "std_46": {
                "input": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_54": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_features.view(x_features.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/rf_det_module.py": {
        "torch": {
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_45": {
                "variable": {
                    "value": "self.insnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_49": {
                "variable": {
                    "value": "self.insnorm_s3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_59": {
                "variable": {
                    "value": "self.insnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv_s5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_63": {
                "variable": {
                    "value": "self.insnorm_s5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_73": {
                "variable": {
                    "value": "self.insnorm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv_s7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_77": {
                "variable": {
                    "value": "self.insnorm_s7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_87": {
                "variable": {
                    "value": "self.insnorm4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv_s9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_91": {
                "variable": {
                    "value": "self.insnorm_s9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_101": {
                "variable": {
                    "value": "self.insnorm5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv_s11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_105": {
                "variable": {
                    "value": "self.insnorm_s11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_115": {
                "variable": {
                    "value": "self.insnorm6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv_s13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_119": {
                "variable": {
                    "value": "self.insnorm_s13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_129": {
                "variable": {
                    "value": "self.insnorm7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv_s15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_133": {
                "variable": {
                    "value": "self.insnorm_s15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_143": {
                "variable": {
                    "value": "self.insnorm8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv_s17",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_147": {
                "variable": {
                    "value": "self.insnorm_s17",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_157": {
                "variable": {
                    "value": "self.insnorm9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.conv_s19",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_161": {
                "variable": {
                    "value": "self.insnorm_s19",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.conv10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_171": {
                "variable": {
                    "value": "self.insnorm10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv_s21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_175": {
                "variable": {
                    "value": "self.insnorm_s21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "self.scale_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scale_list",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_205": {
                "variable": {
                    "value": "im1w_score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "im1w_score.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "psf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "im1w_score.new_tensor(get_gauss_filter_weight(self.GAUSSIAN_KSIZE, self.GAUSSIAN_SIGMA)[None, None, :, :])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.GAUSSIAN_KSIZE // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_205": {
                "variable": {
                    "value": "im1w_score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_228": {
                "variable": {
                    "value": "Nvi",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "im1visible_mask.sum(dim=(3, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_230": {
                "input": {
                    "value": "l2_element_diff * im1visible_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(3, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "model/rf_det_so.py": {
        "torch": {
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv_o3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv_o5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv_o7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_o9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv_o11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv_o13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv_o15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv_o17",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv_o19",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv_o21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_77": {
                "variable": {
                    "value": "score_featmaps_s3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm1(self.conv1(photos))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_87": {
                "variable": {
                    "value": "score_featmaps_s5",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm2(self.conv2(score_featmaps_s3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_98": {
                "variable": {
                    "value": "score_featmaps_s7",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm3(self.conv3(score_featmaps_s5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_109": {
                "variable": {
                    "value": "score_featmaps_s9",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm4(self.conv4(score_featmaps_s7))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_120": {
                "variable": {
                    "value": "score_featmaps_s11",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm5(self.conv5(score_featmaps_s9))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_131": {
                "variable": {
                    "value": "score_featmaps_s13",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm6(self.conv6(score_featmaps_s11))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_142": {
                "variable": {
                    "value": "score_featmaps_s15",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm7(self.conv7(score_featmaps_s13))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_153": {
                "variable": {
                    "value": "score_featmaps_s17",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm8(self.conv8(score_featmaps_s15))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_164": {
                "variable": {
                    "value": "score_featmaps_s19",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm9(self.conv9(score_featmaps_s17))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_175": {
                "variable": {
                    "value": "score_featmaps_s21",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.insnorm10(self.conv10(score_featmaps_s19))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "score_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(score_map_s3, score_map_s5, score_map_s7, score_map_s9, score_map_s11, score_map_s13, score_map_s15, score_map_s17, score_map_s19, score_map_s21)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "orint_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(orint_map_s3, orint_map_s5, orint_map_s7, orint_map_s9, orint_map_s11, orint_map_s13, orint_map_s15, orint_map_s17, orint_map_s19, orint_map_s21)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/rf_net_module.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "centXYZ",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(centX, centY, centZ)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "upXYZ",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(centX, centY - half_scale, centZ)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "bottomXYZ",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(centX, centY + half_scale, centZ)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "rightXYZ",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(centX + half_scale, centY, centZ)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "leftXYZ",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(centX - half_scale, centY, centZ)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "offsetXYZ",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(centX + offset_x, centY + offset_y, centZ)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "im1w_orin",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im1w_cos[:, None], im1w_sin[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_94": {
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "arange_99": {
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "arange_102": {
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "model/rf_net_so.py": {
        "torch": {
            "cat_167": {
                "variable": {
                    "value": "im_orint",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos.unsqueeze(-1), sim.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "ndarray": {
                    "value": "img.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "ndarray": {
                    "value": "img_info",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([sh, sw])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_info)[None, :].to(device, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_211": {
                "ndarray": {
                    "value": "img_raw.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ms.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "HpatchDataset(data_type='test', PPT=PPT, use_all=use_all[args.data], csv_file=cfg[args.data]['csv'], root_dir=cfg[args.data]['root'], transform=transforms.Compose([Grayscale(), Normalize(mean=cfg[args.data]['MEAN'], std=cfg[args.data]['STD']), Rescale((960, 1280)), Rescale((240, 320)), ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "rand_112": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(256, 1024, block_mem)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_113": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_141": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if cfg.PROJ.USE_GPU else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "HpatchDataset(data_type='train', PPT=PPT, use_all=cfg.PROJ.TRAIN_ALL, csv_file=cfg[cfg.PROJ.TRAIN]['csv'], root_dir=cfg[cfg.PROJ.TRAIN]['root'], transform=transforms.Compose([Grayscale(), Normalize(mean=cfg[cfg.PROJ.TRAIN]['MEAN'], std=cfg[cfg.PROJ.TRAIN]['STD']), LargerRescale((960, 1280)), RandomCrop((720, 960)), Rescale((240, 320)), ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "val_data",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "HpatchDataset(data_type='eval', PPT=PPT, use_all=cfg.PROJ.EVAL_ALL, csv_file=cfg[cfg.PROJ.EVAL]['csv'], root_dir=cfg[cfg.PROJ.EVAL]['root'], transform=transforms.Compose([Grayscale(), Normalize(mean=cfg[cfg.PROJ.EVAL]['MEAN'], std=cfg[cfg.PROJ.EVAL]['STD']), Rescale((960, 1280)), Rescale((240, 320)), ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "HpatchDataset(data_type='test', PPT=PPT, use_all=cfg.PROJ.TEST_ALL, csv_file=cfg[cfg.PROJ.TEST]['csv'], root_dir=cfg[cfg.PROJ.TEST]['root'], transform=transforms.Compose([Grayscale(), Normalize(mean=cfg[cfg.PROJ.TEST]['MEAN'], std=cfg[cfg.PROJ.TEST]['STD']), Rescale((960, 1280)), Rescale((240, 320)), ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "dampening": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "manual_seed_151": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.PROJ.SEED",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_176": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RFNetSO(det, des, cfg.LOSS.SCORE, cfg.LOSS.PAIR, cfg.PATCH.SIZE, cfg.TRAIN.TOPK)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "manual_seed_all_146": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.PROJ.SEED",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_286": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_434": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'det_optim': det_optim.state_dict(), 'des_optim': des_optim.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{args.save}/model/e{epoch:03d}_{checkpoint}.pth.tar'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "device_count_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_448": {
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/common_utils.py": {
        "torch": {
            "meshgrid_47": {
                "variable": {
                    "value": "(gy, gx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[Ha, Wa]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gx, gy, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((gx, gy, ones), -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(grid, 0)",
                            "Call"
                        ],
                        [
                            "grid.repeat(B, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "batchXYZ.contiguous().view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "grid.contiguous().permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "grid.type_as(homo21).to(homo21.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "grid_w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "homo21",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((gx, gy, ones), -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(grid, 0)",
                            "Call"
                        ],
                        [
                            "grid.repeat(B, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "batchXYZ.contiguous().view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "grid.contiguous().permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "grid.type_as(homo21).to(homo21.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_70": {
                "variable": {
                    "value": "grid_w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(homo21, grid)",
                            "Call"
                        ],
                        [
                            "grid_w.contiguous().permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.div(grid_w, torch.unsqueeze(grid_w[:, :, 2], -1) + 1e-08)",
                            "Call"
                        ],
                        [
                            "grid_w.contiguous().view(B, H, W, -1)[:, :, :, :2]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(grid_w[:, :, 2], -1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_42": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_46": {
                "start": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "input": {
                    "value": "gy.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "input": {
                    "value": "grid_w[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/eval_utils.py": {
        "torch": {
            "from_numpy_72": {
                "variable": {
                    "value": "flagim",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack((fim, tim), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "im1_result",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(anchor, target, flagr, patches)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_29": {
                "start": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "row_minidx.size(0)",
                            "Call"
                        ],
                        [
                            "row_minidx.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_52": {
                "start": {
                    "value": "topk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "row_minidx.size(0)",
                            "Call"
                        ],
                        [
                            "row_minidx.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/image_utils.py": {
        "torch": {
            "meshgrid_29": {
                "variable": {
                    "value": "(y_t, x_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.linspace(-1, 1, out_height, dtype=torch.float, device=device), torch.linspace(-1, 1, out_width, dtype=torch.float, device=device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_t, y_t, one_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_51": {
                "variable": {
                    "value": "thetas",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kpts_byxc.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "ones",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kpts_byxc.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_62": {
                "variable": {
                    "value": "thetas",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(thetas, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "variable": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(2, 3, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "thetas.unsqueeze(0).repeat(num_kp, 1, 1)",
                            "Call"
                        ],
                        [
                            "thetas * kpts_scale[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.cat((thetas, ones), 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(thetas, R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((x_t, y_t, one_t))",
                            "Call"
                        ],
                        [
                            "grid.view(-1)",
                            "Call"
                        ],
                        [
                            "grid.repeat(num_kp)",
                            "Call"
                        ],
                        [
                            "grid.view(num_kp, 3, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((gx, gy, ones), -1)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "grid.repeat(B, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "grid.view(grid.size(0), -1, grid.size(-1))",
                            "Call"
                        ],
                        [
                            "grid.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "grid.type_as(homo21).to(homo21.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_172": {
                "variable": {
                    "value": "(gy, gx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(outH), torch.arange(outW)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gx, gy, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "grid_w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "homo21",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack((x_t, y_t, one_t))",
                            "Call"
                        ],
                        [
                            "grid.view(-1)",
                            "Call"
                        ],
                        [
                            "grid.repeat(num_kp)",
                            "Call"
                        ],
                        [
                            "grid.view(num_kp, 3, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((gx, gy, ones), -1)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "grid.repeat(B, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "grid.view(grid.size(0), -1, grid.size(-1))",
                            "Call"
                        ],
                        [
                            "grid.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "grid.type_as(homo21).to(homo21.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_190": {
                "variable": {
                    "value": "out_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "im1_data.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(homo21, grid)",
                            "Call"
                        ],
                        [
                            "grid_w.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "grid_w.div(grid_w[:, :, 2].unsqueeze(-1) + 1e-08)",
                            "Call"
                        ],
                        [
                            "grid_w.view(B, outH, outW, -1)[:, :, :, :2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_202": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "imscore.new_full((1, height - 2 * radius, width - 2 * radius, 1), fill_value=1)",
                            "Call"
                        ],
                        [
                            "F.pad(input=mask, pad=(0, 0, radius, radius, radius, radius, 0, 0), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.ge(center_map, max_slice)",
                            "Call"
                        ],
                        [
                            "mask[:, pad:height + pad, pad:width + pad, :]",
                            "Subscript"
                        ],
                        [
                            "topk_mask_flat.view(batch, height, width, -1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, radius, radius, radius, radius, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_227": {
                "variable": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(input < thresh, zeros, input)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_228": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "input < thresh",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cos.new_full(cos.size(), fill_value=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(input < thresh, zeros, input)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_229": {
                "variable": {
                    "value": "input_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(input < thresh, zeros, input)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 2 * pad, 2 * pad, 2 * pad, 2 * pad, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "slice_map",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_pad.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kpts_byxc.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ge_243": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "center_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slice_map[:, :, :, slice_map.size(-1) // 2].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "max_slice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slice_map.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_262": {
                "variable": {
                    "value": "batch_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "indices.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_262": {
                "variable": {
                    "value": "batch_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "topk_mask_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "maps_flat.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_308": {
                "variable": {
                    "value": "max_each_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_logits.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_308": {
                "variable": {
                    "value": "max_each_scale",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_319": {
                "variable": {
                    "value": "exp_maps",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "com_strength * (scale_logits - max_all_scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_320": {
                "variable": {
                    "value": "sum_exp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_maps.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "exp_maps.new_full([1, num_scales, ksize, ksize], fill_value=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_320": {
                "variable": {
                    "value": "sum_exp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_347": {
                "variable": {
                    "value": "inputs_exp1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "com_strength1 * (input - torch.max(input, dim=dim, keepdim=True)[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_354": {
                "variable": {
                    "value": "inputs_exp2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "com_strength2 * (input - torch.max(input, dim=dim, keepdim=True)[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_361": {
                "variable": {
                    "value": "score_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input * input_softmax1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_366": {
                "variable": {
                    "value": "scale_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_list * input_softmax2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos, -sin, zeros, sin, cos, zeros, zeros, zeros, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "thetas",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(2, 3, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "thetas.unsqueeze(0).repeat(num_kp, 1, 1)",
                            "Call"
                        ],
                        [
                            "thetas * kpts_scale[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.cat((thetas, ones), 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(thetas, R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((cos, -sin, zeros, sin, cos, zeros, zeros, zeros, ones), dim=-1)",
                            "Call"
                        ],
                        [
                            "R.view(-1, 3, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_286": {
                "variable": {
                    "value": "psf",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(ksize, ksize)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "sig",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "sig",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(sig).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_292": {
                "variable": {
                    "value": "psf",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-((x - mu_x) ** 2 / (2 * sig ** 2) + (y - mu_y) ** 2 / (2 * sig ** 2))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_369": {
                "variable": {
                    "value": "orint_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "orint_maps * input_softmax1.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_239": {
                "variable": {
                    "value": "slice_map",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(slice_map, slice)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_31": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "out_height",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kpts_byxc.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linspace_32": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "out_width",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kpts_byxc.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_172": {
                "start": {
                    "value": "outW",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "max_348": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(input < thresh, zeros, input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_355": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(input < thresh, zeros, input)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_290": {
                "start": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_291": {
                "start": {
                    "value": "ksize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/math_utils.py": {
        "torch": {
            "sqrt_18": {
                "variable": {
                    "value": "FeatSimi_Mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "FeatSimi_Mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 - 2 * torch.mm(anchor, positive.t())",
                            "BinOp"
                        ],
                        [
                            "FeatSimi_Mat.clamp(min=eps, max=4.0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(FeatSimi_Mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "rightC_homo",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "homolr",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "leftC_homo.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_75": {
                "variable": {
                    "value": "batch_v",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "rightC_homo.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "rightC_homo",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_v, rightC_homo)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "variable": {
                    "value": "sqr",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(sm + 1e-08).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "input": {
                    "value": "dist.clamp(min=eps, max=np.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "right_imO",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_cos.unsqueeze(-1), right_sin.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_110": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input / torch.norm(input, p=2, dim=dim, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_16": {
                "input": {
                    "value": "anchor",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "positive.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_38": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_67": {
                "input": {
                    "value": "rightC_homo[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/net_utils.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "left_impair",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left_imP, right_imP)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "left_imO",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left_cos.unsqueeze(-1), left_sim.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/train_utils.py": {
        "torch": {}
    }
}