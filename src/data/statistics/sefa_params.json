{
    "interface.py": {
        "torch": {
            "randn_30": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "model.z_space_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/pggan_discriminator.py": {
        "torch": {
            "mean_212": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_214": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(group_size, -1, x.shape[1], x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "y - torch.mean(y, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(y ** 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=[1, 2, 3], keepdim=True)",
                            "Call"
                        ],
                        [
                            "y.repeat(group_size, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_336": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image) * alpha + x * (1 - alpha)",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=self.bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_400": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image) * alpha + x * (1 - alpha)",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=self.bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.wscale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_233": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image) * alpha + x * (1 - alpha)",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=self.bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_290": {
                "variable": {
                    "value": "self.mbstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_295": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_310": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_313": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_317": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_322": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_333": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1, 0, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_378": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_381": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_385": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_390": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_211": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(group_size, -1, x.shape[1], x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "y - torch.mean(y, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(y ** 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=[1, 2, 3], keepdim=True)",
                            "Call"
                        ],
                        [
                            "y.repeat(group_size, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_324": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_392": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_310": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_378": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_385": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_313": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_381": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/pggan_generator.py": {
        "torch": {
            "sqrt_214": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_232": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.view(z.shape[0], self.z_space_dim + self.label_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Identity_283": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_299": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_302": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_306": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_311": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_323": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1, 0, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv_transpose2d_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.view(z.shape[0], self.z_space_dim + self.label_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_332": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.view(z.shape[0], self.z_space_dim + self.label_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_313": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_214": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_299": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_302": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/stylegan2_discriminator.py": {
        "torch": {
            "mean_248": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_249": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_250": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(ng, -1, nc, temp_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "y - torch.mean(y, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(y ** 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=[2, 3, 4], keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y.repeat(ng, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_251": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(ng, -1, nc, temp_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "y - torch.mean(y, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(y ** 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=[2, 3, 4], keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y.repeat(ng, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_290": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input0(image)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "x + self.__getattr__(f'input{block_idx}')(image)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x * label, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_291": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input0(image)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "x + self.__getattr__(f'input{block_idx}')(image)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x * label, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_396": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input0(image)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "x + self.__getattr__(f'input{block_idx}')(image)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x * label, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_466": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input0(image)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "x + self.__getattr__(f'input{block_idx}')(image)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x * label, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.wscale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * label",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_253": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_349": {
                "variable": {
                    "value": "self.mbstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_359": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_368": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_371": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_376": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_382": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_439": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_442": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_447": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_453": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_247": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(ng, -1, nc, temp_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "y - torch.mean(y, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(y ** 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=[2, 3, 4], keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y.repeat(ng, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "ndarray": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(scale_factor, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(kernel, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.outer(kernel, kernel)",
                            "Call"
                        ],
                        [
                            "kernel / np.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_385": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_456": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_368": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_439": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_372": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_443": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/stylegan2_generator.py": {
        "torch": {
            "sqrt_551": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(x ** 2, dim=self.dim, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_612": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.early_layer(wp[:, 0])",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], 1, x.shape[3], 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.upsample_padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2] * self.scale_factor, x.shape[4] * self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=bias, stride=self.scale_factor, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(1, batch * self.in_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "x * style.view(batch, self.in_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.out_c, self.res, self.res)",
                            "Call"
                        ],
                        [
                            "x / _weight_norm.view(batch, self.out_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x + noise * self.noise_strength.view(1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x + self.additional_bias) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_613": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.early_layer(wp[:, 0])",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], 1, x.shape[3], 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.upsample_padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2] * self.scale_factor, x.shape[4] * self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=bias, stride=self.scale_factor, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(1, batch * self.in_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "x * style.view(batch, self.in_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.out_c, self.res, self.res)",
                            "Call"
                        ],
                        [
                            "x / _weight_norm.view(batch, self.out_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x + noise * self.noise_strength.view(1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x + self.additional_bias) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_627": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channels, init_resolution, init_resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_994": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.early_layer(wp[:, 0])",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], 1, x.shape[3], 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.upsample_padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2] * self.scale_factor, x.shape[4] * self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=bias, stride=self.scale_factor, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(1, batch * self.in_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "x * style.view(batch, self.in_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.out_c, self.res, self.res)",
                            "Call"
                        ],
                        [
                            "x / _weight_norm.view(batch, self.out_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x + noise * self.noise_strength.view(1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x + self.additional_bias) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.wscale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_like_185": {
                "variable": {
                    "value": "new_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm(z)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, embedding), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_242": {
                "variable": {
                    "value": "self.label_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(label_size, input_space_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.label_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_330": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones_like(layer_idx, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(coefs).to(wp)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_608": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.early_layer(wp[:, 0])",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], 1, x.shape[3], 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.upsample_padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2] * self.scale_factor, x.shape[4] * self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=bias, stride=self.scale_factor, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(1, batch * self.in_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "x * style.view(batch, self.in_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.out_c, self.res, self.res)",
                            "Call"
                        ],
                        [
                            "x / _weight_norm.view(batch, self.out_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x + noise * self.noise_strength.view(1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x + self.additional_bias) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.upsample_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_698": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_701": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_706": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_712": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv_transpose2d_726": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.early_layer(wp[:, 0])",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], 1, x.shape[3], 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.upsample_padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2] * self.scale_factor, x.shape[4] * self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=bias, stride=self.scale_factor, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(1, batch * self.in_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "x * style.view(batch, self.in_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.out_c, self.res, self.res)",
                            "Call"
                        ],
                        [
                            "x / _weight_norm.view(batch, self.out_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x + noise * self.noise_strength.view(1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x + self.additional_bias) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "weight.permute(1, 0, 2, 3).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "weight.permute(2, 3, 1, 0)",
                            "Call"
                        ],
                        [
                            "_weight.permute(1, 2, 3, 0, 4).reshape(self.ksize, self.ksize, self.in_c, batch * self.out_c)",
                            "Call"
                        ],
                        [
                            "weight.flip(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.permute(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "weight.view(self.ksize, self.ksize, self.in_c, batch, self.out_c)",
                            "Call"
                        ],
                        [
                            "weight.permute(0, 1, 4, 3, 2)",
                            "Call"
                        ],
                        [
                            "weight.reshape(self.ksize, self.ksize, self.out_c, batch * self.in_c)",
                            "Call"
                        ],
                        [
                            "weight.permute(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "weight.permute(2, 3, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_733": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.early_layer(wp[:, 0])",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], 1, x.shape[3], 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.upsample_padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2] * self.scale_factor, x.shape[4] * self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=bias, stride=self.scale_factor, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(1, batch * self.in_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "x * style.view(batch, self.in_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.out_c, self.res, self.res)",
                            "Call"
                        ],
                        [
                            "x / _weight_norm.view(batch, self.out_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x + noise * self.noise_strength.view(1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x + self.additional_bias) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "weight.permute(1, 0, 2, 3).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "weight.permute(2, 3, 1, 0)",
                            "Call"
                        ],
                        [
                            "_weight.permute(1, 2, 3, 0, 4).reshape(self.ksize, self.ksize, self.in_c, batch * self.out_c)",
                            "Call"
                        ],
                        [
                            "weight.flip(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.permute(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "weight.view(self.ksize, self.ksize, self.in_c, batch, self.out_c)",
                            "Call"
                        ],
                        [
                            "weight.permute(0, 1, 4, 3, 2)",
                            "Call"
                        ],
                        [
                            "weight.reshape(self.ksize, self.ksize, self.out_c, batch * self.in_c)",
                            "Call"
                        ],
                        [
                            "weight.permute(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "weight.permute(2, 3, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_818": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_821": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_835": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_841": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_853": {
                "variable": {
                    "value": "self.noise_strength",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_868": {
                "variable": {
                    "value": "_weight_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(_weight ** 2, dim=[1, 2, 3]) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_890": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.early_layer(wp[:, 0])",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], 1, x.shape[3], 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.upsample_padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2] * self.scale_factor, x.shape[4] * self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=bias, stride=self.scale_factor, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(1, batch * self.in_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "x * style.view(batch, self.in_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.out_c, self.res, self.res)",
                            "Call"
                        ],
                        [
                            "x / _weight_norm.view(batch, self.out_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x + noise * self.noise_strength.view(1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x + self.additional_bias) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "weight.permute(1, 0, 2, 3).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "weight.permute(2, 3, 1, 0)",
                            "Call"
                        ],
                        [
                            "_weight.permute(1, 2, 3, 0, 4).reshape(self.ksize, self.ksize, self.in_c, batch * self.out_c)",
                            "Call"
                        ],
                        [
                            "weight.flip(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.permute(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "weight.view(self.ksize, self.ksize, self.in_c, batch, self.out_c)",
                            "Call"
                        ],
                        [
                            "weight.permute(0, 1, 4, 3, 2)",
                            "Call"
                        ],
                        [
                            "weight.reshape(self.ksize, self.ksize, self.out_c, batch * self.in_c)",
                            "Call"
                        ],
                        [
                            "weight.permute(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "weight.permute(2, 3, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch if self.fused_modulate else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "conv2d_899": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.early_layer(wp[:, 0])",
                            "Call"
                        ],
                        [
                            "(x + residual) / np.sqrt(2.0)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], 1, x.shape[3], 1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.upsample_padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2] * self.scale_factor, x.shape[4] * self.scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, self.padding, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.kernel, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, channels, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=bias, stride=self.scale_factor, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x.view(1, batch * self.in_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "x * style.view(batch, self.in_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding, groups=batch if self.fused_modulate else 1)",
                            "Call"
                        ],
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.out_c, self.res, self.res)",
                            "Call"
                        ],
                        [
                            "x / _weight_norm.view(batch, self.out_c, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x) * self.activate_scale",
                            "BinOp"
                        ],
                        [
                            "x + noise * self.noise_strength.view(1, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x + self.additional_bias) * self.activate_scale",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "weight.permute(1, 0, 2, 3).flip(2, 3)",
                            "Call"
                        ],
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "weight.permute(2, 3, 1, 0)",
                            "Call"
                        ],
                        [
                            "_weight.permute(1, 2, 3, 0, 4).reshape(self.ksize, self.ksize, self.in_c, batch * self.out_c)",
                            "Call"
                        ],
                        [
                            "weight.flip(0, 1)",
                            "Call"
                        ],
                        [
                            "weight.permute(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "weight.view(self.ksize, self.ksize, self.in_c, batch, self.out_c)",
                            "Call"
                        ],
                        [
                            "weight.permute(0, 1, 4, 3, 2)",
                            "Call"
                        ],
                        [
                            "weight.reshape(self.ksize, self.ksize, self.out_c, batch * self.in_c)",
                            "Call"
                        ],
                        [
                            "weight.permute(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "weight.permute(2, 3, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch if self.fused_modulate else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_966": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_969": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_974": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_981": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_589": {
                "ndarray": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(scale_factor, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(kernel, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.outer(kernel, kernel)",
                            "Call"
                        ],
                        [
                            "kernel / np.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel * scale_factor ** 2",
                            "BinOp"
                        ],
                        [
                            "kernel * kernel_gain ** 2",
                            "BinOp"
                        ],
                        [
                            "kernel[np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_628": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "init_resolution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "init_resolution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_715": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_844": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_913": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_984": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_243": {
                "*size": {
                    "value": "label_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_space_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_306": {
                "*size": {
                    "value": "w_space_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_308": {
                "*size": {
                    "value": "num_layers * w_space_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_552": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_706": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_space_dim if i == num_layers - 1 else hidden_space_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_835": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_space_dim if i == num_layers - 1 else hidden_space_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_852": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_853": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_974": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_space_dim if i == num_layers - 1 else hidden_space_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_698": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_818": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_869": {
                "input": {
                    "value": "_weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_966": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_702": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_822": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_970": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/stylegan_discriminator.py": {
        "torch": {
            "mean_249": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_250": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_251": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(ng, -1, nc, temp_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "y - torch.mean(y, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(y ** 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=[2, 3, 4], keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y.repeat(ng, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=kernel, bias=None, stride=1, padding=1, groups=x.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_252": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(ng, -1, nc, temp_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "y - torch.mean(y, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(y ** 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=[2, 3, 4], keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y.repeat(ng, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=kernel, bias=None, stride=1, padding=1, groups=x.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_283": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image)",
                            "Call"
                        ],
                        [
                            "torch.sum(x * label, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image) * alpha + x * (1 - alpha)",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(kernel, dtype=np.float32).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "kernel.T.dot(kernel)",
                            "Call"
                        ],
                        [
                            "kernel / np.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(kernel, [channels, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_307": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel.flip((2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "dy.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_318": {
                "variable": {
                    "value": "ddy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ddx",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(kernel, dtype=np.float32).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "kernel.T.dot(kernel)",
                            "Call"
                        ],
                        [
                            "kernel / np.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(kernel, [channels, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "ddx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_459": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image)",
                            "Call"
                        ],
                        [
                            "torch.sum(x * label, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image) * alpha + x * (1 - alpha)",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_528": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image)",
                            "Call"
                        ],
                        [
                            "torch.sum(x * label, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image) * alpha + x * (1 - alpha)",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.wscale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sum_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * label",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 2}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image)",
                            "Call"
                        ],
                        [
                            "torch.sum(x * label, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'input{block_idx}')(image) * alpha + x * (1 - alpha)",
                            "BinOp"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx}')(x)",
                            "Call"
                        ],
                        [
                            "self.__getattr__(f'layer{2 * block_idx + 1}')(x)",
                            "Call"
                        ],
                        [
                            "self.mbstd(x)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_404": {
                "variable": {
                    "value": "self.mbstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_409": {
                "variable": {
                    "value": "self.blur",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_414": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_429": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_432": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_437": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_443": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_456": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0.0)",
                            "Call"
                        ],
                        [
                            "(weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1, 0, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_503": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_506": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_511": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_517": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_248": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(ng, -1, nc, temp_c, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "y - torch.mean(y, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(y ** 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y + self.epsilon)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=[2, 3, 4], keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(y, dim=2)",
                            "Call"
                        ],
                        [
                            "y.repeat(ng, 1, x.shape[2], x.shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv2d(input=x, weight=kernel, bias=None, stride=1, padding=1, groups=x.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_341": {
                "ndarray": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(kernel, dtype=np.float32).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "kernel.T.dot(kernel)",
                            "Call"
                        ],
                        [
                            "kernel / np.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(kernel, [channels, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_445": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_519": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_511": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_429": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_503": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_433": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_507": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/stylegan_generator.py": {
        "torch": {
            "sqrt_522": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_539": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(x ** 2, dim=[2, 3], keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_567": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wp[:, 0].view(-1, self.w_space_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "x - torch.mean(x, dim=[2, 3], keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x * (style_split[:, 0] + 1) + style_split[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.apply_noise(x, randomize_noise)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(kernel, dtype=np.float32).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "kernel.T.dot(kernel)",
                            "Call"
                        ],
                        [
                            "kernel / np.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(kernel, [channels, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_578": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel.flip((2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "dy.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_614": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_648": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.out_channels * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_656": {
                "variable": {
                    "value": "style",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapping_results['w']",
                            "Subscript"
                        ],
                        [
                            "self.truncation(w)",
                            "Call"
                        ],
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "self.__getattr__(f'dense{i}')(w)",
                            "Call"
                        ],
                        [
                            "w.view(-1, 1, self.w_space_dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.wscale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_867": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wp[:, 0].view(-1, self.w_space_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "x - torch.mean(x, dim=[2, 3], keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x * (style_split[:, 0] + 1) + style_split[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.apply_noise(x, randomize_noise)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.wscale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "self.bias * self.bscale if self.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_like_176": {
                "variable": {
                    "value": "new_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm(z)",
                            "Call"
                        ],
                        [
                            "torch.cat((z, embedding), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_235": {
                "variable": {
                    "value": "self.label_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(label_size, input_space_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_257": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.label_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_323": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones_like(layer_idx, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(coefs).to(wp)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_558": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wp[:, 0].view(-1, self.w_space_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "x - torch.mean(x, dim=[2, 3], keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x * (style_split[:, 0] + 1) + style_split[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.apply_noise(x, randomize_noise)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_622": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_642": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_645": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_718": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_724": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_737": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, in_channels, resolution, resolution)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_746": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_761": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_764": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_842": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_845": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*weight_shape) * wscale / lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_850": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_856": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_364": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_538": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wp[:, 0].view(-1, self.w_space_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "x - torch.mean(x, dim=[2, 3], keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x * (style_split[:, 0] + 1) + style_split[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.apply_noise(x, randomize_noise)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_601": {
                "ndarray": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(kernel, dtype=np.float32).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "kernel.T.dot(kernel)",
                            "Call"
                        ],
                        [
                            "kernel / np.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel[np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(kernel, [channels, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_613": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_614": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_648": {
                "*size": {
                    "value": "self.out_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_726": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_741": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_773": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "weight.permute(1, 0, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1, 0, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose2d_777": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wp[:, 0].view(-1, self.w_space_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "x - torch.mean(x, dim=[2, 3], keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x * (style_split[:, 0] + 1) + style_split[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.apply_noise(x, randomize_noise)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "weight.permute(1, 0, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_783": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wp[:, 0].view(-1, self.w_space_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "x - torch.mean(x, dim=[2, 3], keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x * (style_split[:, 0] + 1) + style_split[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.const.repeat(w.shape[0], 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=weight, bias=None, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.blur(x)",
                            "Call"
                        ],
                        [
                            "self.apply_noise(x, randomize_noise)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ],
                        [
                            "self.normalize(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, weight=self.weight * self.wscale, bias=bias)",
                            "Call"
                        ],
                        [
                            "self.activate(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.wscale",
                            "BinOp"
                        ],
                        [
                            "F.pad(weight, (1, 1, 1, 1, 0, 0, 0, 0), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "weight[:, :, 1:, 1:] + weight[:, :, :-1, 1:] + weight[:, :, 1:, :-1] + weight[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "weight.permute(1, 0, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_858": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_236": {
                "*size": {
                    "value": "label_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_space_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_299": {
                "*size": {
                    "value": "w_space_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_301": {
                "*size": {
                    "value": "num_layers * w_space_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_522": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_540": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_642": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_718": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_space_dim if i == num_layers - 1 else hidden_space_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_738": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_space_dim * dim_mul if i == 0 else hidden_space_dim",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "resolution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "resolution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_850": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_space_dim if i == num_layers - 1 else hidden_space_dim",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_645": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_761": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_842": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_765": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_846": {
                "*size": {
                    "value": "*weight_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/sync_op.py": {
        "torch": {
            "mean_18": {
                "input": {
                    "value": "torch.stack(tensor_list, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_initialized_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_16": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_18": {
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sefa.py": {
        "torch": {
            "randn_79": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "generator.z_space_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_85": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(CHECKPOINT_DIR, model_name + '.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}