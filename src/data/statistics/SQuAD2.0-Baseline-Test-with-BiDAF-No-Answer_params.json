{
    "basic/cli.py": {
        "tensorflow": {
            "run_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "basic/evaluator.py": {
        "tensorflow": {
            "Summary_77": {
                "variable": {
                    "value": "loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/loss'.format(data_type), simple_value=self.loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_78": {
                "variable": {
                    "value": "acc_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/acc'.format(data_type), simple_value=self.acc)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_237": {
                "variable": {
                    "value": "f1_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/f1'.format(data_type), simple_value=self.f1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_370": {
                "variable": {
                    "value": "self.yp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[padded_reshape(model.yp, [N, M, JX]) for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_371": {
                "variable": {
                    "value": "self.yp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[padded_reshape(model.yp2, [N, M, JX]) for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_368": {
                "name": {
                    "value": "eval_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_372": {
                "inputs": {
                    "value": "[model.loss for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "basic/graph_handler.py": {
        "tensorflow": {
            "Saver_18": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_31": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_42": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{var.name.split(':')[0]: var for var in tf.all_variables()}",
                            "DictComp"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_50": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.save_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "all_variables_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "basic/main.py": {
        "tensorflow": {
            "Session_98": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_158": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_204": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_254": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_27": {
                "device_name": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_98": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_158": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_204": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_254": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "basic/model.py": {
        "tensorflow": {
            "get_variable_29": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None, W]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.cq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, W]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.new_emb_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.word_emb_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_emb_mat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.na",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "na",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_136": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.x_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "variable": {
                    "value": "q_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.q_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_221": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.q_mask, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.na",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_223": {
                "variable": {
                    "value": "concat_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[na, tf.reshape(self.y, [-1, M * JX])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_224": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.concat_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.cast(concat_y, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_mask * losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_228": {
                "variable": {
                    "value": "concat_y2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[na, tf.reshape(self.y2, [-1, M * JX])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_229": {
                "variable": {
                    "value": "ce_loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(self.concat_logits2, tf.cast(concat_y2, 'float'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_233": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses', scope=self.scope)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_238": {
                "variable": {
                    "value": "self.ema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.config.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_253": {
                "variable": {
                    "value": "self.var_ema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.config.var_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_414": {
                "variable": {
                    "value": "h_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, JQ, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_415": {
                "variable": {
                    "value": "u_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(u, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_427": {
                "variable": {
                    "value": "h_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_a, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_143": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_u, bw_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_168": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_g0, bw_g0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_g1, bw_g1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_175": {
                "variable": {
                    "value": "a1i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(a1i, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_179": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_g2, bw_g2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_184": {
                "variable": {
                    "value": "na_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "na_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_185": {
                "variable": {
                    "value": "na_bias_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(na_bias, [1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_186": {
                "variable": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g1, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_187": {
                "variable": {
                    "value": "concat_flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[na_bias_tiled, flat_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_188": {
                "variable": {
                    "value": "concat_flat_yp",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "concat_flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(1, [na_bias_tiled, flat_logits])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "na_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(concat_flat_yp, [0, 0], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_190": {
                "variable": {
                    "value": "flat_yp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_flat_yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(concat_flat_logits)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "yp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(concat_flat_yp, [0, 1], [-1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M, JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "flat_logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g2, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "concat_flat_logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[na_bias_tiled, flat_logits2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "variable": {
                    "value": "concat_flat_yp2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "concat_flat_logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(1, [na_bias_tiled, flat_logits2])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_196": {
                "variable": {
                    "value": "na_prob2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(concat_flat_yp2, [0, 0], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_197": {
                "variable": {
                    "value": "flat_yp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "concat_flat_yp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(concat_flat_logits2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "yp2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_yp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(concat_flat_yp2, [0, 1], [-1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M, JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_to_collection_227": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_mask * losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_231": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ce_loss2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(self.concat_logits2, tf.cast(concat_y2, 'float')))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_235": {
                "name": {
                    "value": "ema/scalar",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_242": {
                "key": {
                    "value": "ema/scalar",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_245": {
                "key": {
                    "value": "ema/vector",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_250": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_257": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_410": {
                "name_or_scope": {
                    "value": "scope or 'bi_attention'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "tile_419": {
                "variable": {
                    "value": "h_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_mask, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, JQ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_420": {
                "variable": {
                    "value": "u_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(u_mask, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_430": {
                "variable": {
                    "value": "a_u",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "u_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([h_aug, u_aug], None, True, wd=config.wd, mask=hu_mask, is_train=is_train, func=config.logit_func, scope='u_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_431": {
                "variable": {
                    "value": "a_h",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reduce_max(u_logits, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_434": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_442": {
                "name_or_scope": {
                    "value": "scope or 'attention_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "tile_449": {
                "variable": {
                    "value": "u_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(tf.reduce_mean(u, 1), 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_451": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h, u_a, h * u_a, h * h_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_453": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h, u_a, h * u_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_18": {
                "name": {
                    "value": "'model_{}'.format(gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_18": {
                "device_name": {
                    "value": "'/{}:{}'.format(config.device_type, gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_68": {
                "key": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_76": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_78": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_138": {
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "prepro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N * M, JQ, 2 * d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "q_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(self.q_mask, 1), [1, M, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N * M, JQ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_218": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_220": {
                "input": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_221": {
                "x": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_225": {
                "x": {
                    "value": "concat_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(1, [na, tf.reshape(self.y, [-1, M * JX])])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_229": {
                "labels": {
                    "value": "self.concat_logits2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.cast(concat_y2, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_233": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_240": {
                "key": {
                    "value": "ema/vector",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_249": {
                "control_inputs": {
                    "value": "[ema_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_256": {
                "control_inputs": {
                    "value": "[ema_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_411": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_412": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_413": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_414": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_415": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_426": {
                "input_tensor": {
                    "value": "u_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([h_aug, u_aug], None, True, wd=config.wd, mask=hu_mask, is_train=is_train, func=config.logit_func, scope='u_logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_427": {
                "input": {
                    "value": "h_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softsel(h, tf.reduce_max(u_logits, 3))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(h_a, 2), [1, 1, JX, 1])",
                            "Call"
                        ],
                        [
                            "bi_attention(config, is_train, h, u, h_mask=h_mask, u_mask=u_mask, tensor_dict=tensor_dict)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_443": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_444": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_445": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VC, dc]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_87": {
                "variable": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[VC, dc], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_88": {
                "variable": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[VC, dc], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.cq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acx, [-1, JX, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JX, W, dc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acq, [-1, JQ, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JQ, W, dc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_115": {
                "variable": {
                    "value": "Ax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype='float', shape=[VW, dw], initializer=get_initializer(config.emb_mat))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', shape=[VW, dw], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.concat(0, [word_emb_mat, self.new_emb_mat])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_116": {
                "variable": {
                    "value": "Aq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype='float', shape=[VW, dw], initializer=get_initializer(config.emb_mat))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', shape=[VW, dw], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.concat(0, [word_emb_mat, self.new_emb_mat])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[xx, Ax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[qq, Aq]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_174": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g1, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits1')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "input": {
                    "value": "a1i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softsel(tf.reshape(g1, [N, M * JX, 2 * d]), tf.reshape(logits, [N, M * JX]))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(a1i, 1), 1), [1, M, JX, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_177": {
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[p0, g1, a1i, g1 * a1i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "tensor": {
                    "value": "na_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('na_bias', shape=[1], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_189": {
                "input_": {
                    "value": "concat_flat_yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(concat_flat_logits)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_196": {
                "input_": {
                    "value": "concat_flat_yp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(concat_flat_logits2)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "tensor": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_230": {
                "x": {
                    "value": "concat_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(1, [na, tf.reshape(self.y2, [-1, M * JX])])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_419": {
                "input": {
                    "value": "h_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_420": {
                "input": {
                    "value": "u_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_431": {
                "input_tensor": {
                    "value": "u_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([h_aug, u_aug], None, True, wd=config.wd, mask=hu_mask, is_train=is_train, func=config.logit_func, scope='u_logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_449": {
                "input": {
                    "value": "tf.reduce_mean(u, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_83": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway_network(xx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "multi_conv1d(Acx, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='xx')",
                            "Call"
                        ],
                        [
                            "tf.reshape(xx, [-1, M, JX, dco])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [xx, Ax])",
                            "Call"
                        ],
                        [
                            "Ax",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M, JX, dco]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "highway_network(qq, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "multi_conv1d(Acq, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='xx')",
                            "Call"
                        ],
                        [
                            "multi_conv1d(Acq, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='qq')",
                            "Call"
                        ],
                        [
                            "tf.reshape(qq, [-1, JQ, dco])",
                            "Call"
                        ],
                        [
                            "tf.concat(2, [qq, Aq])",
                            "Call"
                        ],
                        [
                            "Aq",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JQ, dco]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_106": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VW, dw]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "get_initializer(config.emb_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VW, dw]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[word_emb_mat, self.new_emb_mat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_114": {
                "name": {
                    "value": "word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_159": {
                "input": {
                    "value": "tf.expand_dims(u, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_160": {
                "input": {
                    "value": "tf.expand_dims(self.q_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_159": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_160": {
                "input": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_449": {
                "input_tensor": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(u, 1), [1, M, 1, 1]), [N * M, JQ, 2 * d])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_scope_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "basic/trainer.py": {
        "tensorflow": {
            "AdadeltaOptimizer_12": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_42": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_56": {
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_50": {
                "name": {
                    "value": "'grads_{}'.format(gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_50": {
                "device_name": {
                    "value": "'/{}:{}'.format(config.device_type, gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "basic_cnn/cli.py": {
        "tensorflow": {
            "run_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "basic_cnn/evaluator.py": {
        "tensorflow": {
            "Summary_85": {
                "variable": {
                    "value": "loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/loss'.format(data_type), simple_value=self.loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_86": {
                "variable": {
                    "value": "acc_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/acc'.format(data_type), simple_value=self.acc)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_252": {
                "variable": {
                    "value": "f1_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/f1'.format(data_type), simple_value=self.f1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_369": {
                "variable": {
                    "value": "self.yp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[padded_reshape(model.yp, [N, M, JX]) for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_370": {
                "variable": {
                    "value": "self.yp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[padded_reshape(model.yp2, [N, M, JX]) for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_392": {
                "variable": {
                    "value": "self.yp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[padded_reshape(model.yp, [N, M, JX]) for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_367": {
                "name": {
                    "value": "eval_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_390": {
                "name": {
                    "value": "eval_concat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_371": {
                "inputs": {
                    "value": "[model.loss for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_393": {
                "inputs": {
                    "value": "[model.loss for model in models]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "basic_cnn/graph_handler.py": {
        "tensorflow": {
            "Saver_17": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_41": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.save_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "initialize_all_variables_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "basic_cnn/main.py": {
        "tensorflow": {
            "Session_73": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_135": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_182": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_23": {
                "device_name": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_73": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_135": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_182": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "basic_cnn/model.py": {
        "tensorflow": {
            "tile_39": {
                "variable": {
                    "value": "h_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, JQ, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_40": {
                "variable": {
                    "value": "u_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(u, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M, None, W]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, JQ]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.cq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, JQ, W]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, JQ]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M, JX]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.new_emb_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.word_emb_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_emb_mat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_171": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "batch.shared['word2idx']",
                            "Subscript"
                        ],
                        [
                            "batch.shared['char2idx']",
                            "Subscript"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_173": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.x_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_174": {
                "variable": {
                    "value": "q_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.q_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_234": {
                "variable": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.q_mask, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_236": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_mask * losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_239": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses', scope=self.scope)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_244": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.config.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "scope or 'bi_attention'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "tile_44": {
                "variable": {
                    "value": "h_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_mask, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, JQ]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_45": {
                "variable": {
                    "value": "u_mask_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(u_mask, 1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, M, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "a_u",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "u_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([h_aug, u_aug], None, True, wd=config.wd, mask=and_mask, is_train=is_train, func=config.logit_func, scope='u_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_58": {
                "variable": {
                    "value": "h_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_a, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, JX, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "scope or 'attention_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h, u_a, h * u_a, h * h_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h, u_a, h * u_a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_u, bw_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "g0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_g0, bw_g0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_g1, bw_g1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g1, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits1')",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : logy, lambda : logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : logits, lambda : hard_logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "flat_yp",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [-1, M * JX])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "yp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(flat_logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M, JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_to_collection_237": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_mask * losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_241": {
                "name": {
                    "value": "ema/scalar",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_246": {
                "key": {
                    "value": "ema/scalar",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_249": {
                "key": {
                    "value": "ema/histogram",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_254": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_38": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_39": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [fw_h, bw_h])",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(2, [fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "tf.concat(2, [fw_u, bw_u])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_112": {
                "key": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VC, dc]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_128": {
                "variable": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[VC, dc], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_129": {
                "variable": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[VC, dc], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.cq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acx, [-1, JX, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JX, W, dc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acq, [-1, JQ, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JQ, W, dc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_160": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[xx, Ax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_161": {
                "variable": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[qq, Aq]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "highway",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_173": {
                "x": {
                    "value": "self.x_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_174": {
                "x": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "prepro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_u, bw_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_192": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_212": {
                "variable": {
                    "value": "logy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(self.y, 'float') + VERY_SMALL_NUMBER",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_213": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : logy",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : logits",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "argmax_215": {
                "variable": {
                    "value": "hard_yp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(logits, [N, M * JX])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "hard_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.one_hot(hard_yp, M * JX)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M, JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_217": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : logits",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : hard_logits",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_233": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_234": {
                "x": {
                    "value": "self.q_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_235": {
                "x": {
                    "value": "tf.reduce_sum(self.yp * tf.cast(self.y, 'float'), [1, 2]) + VERY_SMALL_NUMBER",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_239": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_253": {
                "control_inputs": {
                    "value": "[ema_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_371": {
                "name": {
                    "value": "'model_{}'.format(gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_371": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "input": {
                    "value": "h_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "input": {
                    "value": "u_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_57": {
                "input_tensor": {
                    "value": "u_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([h_aug, u_aug], None, True, wd=config.wd, mask=and_mask, is_train=is_train, func=config.logit_func, scope='u_logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "input": {
                    "value": "h_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softsel(h, tf.reduce_max(u_logits, 3))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(h_a, 2), [1, 1, JX, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "bi_attention(config, is_train, h, u, h_mask=h_mask, u_mask=u_mask, tensor_dict=tensor_dict)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_79": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_124": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_conv1d(Acx, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='xx')",
                            "Call"
                        ],
                        [
                            "tf.reshape(xx, [-1, M, JX, dco])",
                            "Call"
                        ],
                        [
                            "highway_network(xx, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, [xx, Ax])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, M, JX, dco]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_conv1d(Acq, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='xx')",
                            "Call"
                        ],
                        [
                            "multi_conv1d(Acq, filter_sizes, heights, 'VALID', self.is_train, config.keep_prob, scope='qq')",
                            "Call"
                        ],
                        [
                            "tf.reshape(qq, [-1, JQ, dco])",
                            "Call"
                        ],
                        [
                            "highway_network(qq, config.highway_num_layers, True, wd=config.wd, is_train=self.is_train)",
                            "Call"
                        ],
                        [
                            "tf.concat(2, [qq, Aq])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JQ, dco]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_156": {
                "variable": {
                    "value": "Ax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype='float', shape=[VW, dw], initializer=get_initializer(config.emb_mat))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', shape=[VW, dw], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.concat(0, [word_emb_mat, self.new_emb_mat])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_157": {
                "variable": {
                    "value": "Aq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype='float', shape=[VW, dw], initializer=get_initializer(config.emb_mat))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', shape=[VW, dw], dtype='float')",
                            "Call"
                        ],
                        [
                            "tf.concat(0, [word_emb_mat, self.new_emb_mat])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_188": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[fw_h, bw_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_209": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g1, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits1')",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : logy, lambda : logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : logits, lambda : hard_logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_245": {
                "key": {
                    "value": "ema/histogram",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "emb_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_147": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_149": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VW, dw]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "get_initializer(config.emb_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_151": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VW, dw]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_153": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[word_emb_mat, self.new_emb_mat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits([g1, p0], d, True, wd=config.wd, input_keep_prob=config.input_keep_prob, mask=self.x_mask, is_train=self.is_train, func=config.answer_func, scope='logits1')",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : logy, lambda : logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.is_train, lambda : logits, lambda : hard_logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_216": {
                "indices": {
                    "value": "hard_yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(logits, [N, M * JX]), 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "M * JX",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_235": {
                "input_tensor": {
                    "value": "self.yp * tf.cast(self.y, 'float')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_235": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "basic_cnn/superhighway.py": {
        "tensorflow": {
            "split_28": {
                "variable": {
                    "value": "(h, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "scope or 'SHCell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "sigmoid_31": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(args, a_size, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(args, a_size, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(args, a_size, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_40": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(tf.tanh(linear(args, a_size, True)), self._state_size, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "x": {
                    "value": "linear(args, a_size, True)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "basic_cnn/trainer.py": {
        "tensorflow": {
            "AdadeltaOptimizer_12": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_42": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_56": {
                "inputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_50": {
                "name": {
                    "value": "'grads_{}'.format(gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_50": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "my/tensorflow/general.py": {
        "tensorflow": {
            "reshape_126": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left] + [fixed_shape[i] or tf.shape(tensor)[i] for i in range(start, len(fixed_shape))]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_shape + keep_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_146": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope or tf.get_variable_scope().name",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "str"
                        ],
                        [
                            "'exp_mask'",
                            "str"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_86": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(0, grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_118": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val",
                            "Method Argument"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "(1 - tf.cast(mask, 'float')) * VERY_NEGATIVE_NUMBER",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "str"
                        ],
                        [
                            "'exp_mask'",
                            "str"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_168": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, shape[i] - tf.shape(tensor)[i]] for i in range(len(shape))]",
                            "ListComp"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'CONSTANT'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mask'",
                            "str"
                        ],
                        [
                            "'exp_mask'",
                            "str"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_30": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_52": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stddev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_55": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mul(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.mul(tf.nn.l2_loss(var), wd, name='{}/wd'.format(var.op.name))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_80": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_147": {
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_54": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "variables",
                            "variable"
                        ]
                    ]
                }
            },
            "get_variable_scope_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_150": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mul(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.mul(tf.nn.l2_loss(var), wd, name='{}/wd'.format(var.op.name))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_118": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_135": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_136": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_149": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "variable_on_cpu(name, shape, tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "grad_and_vars",
                            "variable"
                        ],
                        [
                            "variables",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_124": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_125": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_167": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "my/tensorflow/nn.py": {
        "tensorflow": {
            "squeeze_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruct(flat_out, args[0], 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, [len(args[0].get_shape().as_list()) - 1])",
                            "Call"
                        ],
                        [
                            "tf.cond(is_train, lambda : d, lambda : x)",
                            "Call"
                        ],
                        [
                            "reconstruct(flat_out, logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.expand_dims(a, -1) * target, target_rank - 2)",
                            "Call"
                        ],
                        [
                            "gate * trans + (1 - gate) * arg",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(tf.nn.relu(xxc), 2)",
                            "Call"
                        ],
                        [
                            "conv1d(in_, filter_size, height, padding, is_train=is_train, keep_prob=keep_prob, scope='conv1d_{}'.format(height))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[len(args[0].get_shape().as_list()) - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "flat_out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(a, -1) * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "target_rank - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(args, size, bias, bias_start=bias_start, scope='first', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear([arg], d, bias, bias_start=bias_start, scope='trans', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(trans)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_140": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear([arg], d, bias, bias_start=bias_start, scope='gate', wd=wd, input_keep_prob=input_keep_prob, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, num_channels, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_160": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_165": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(xxc)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "concat_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_31": {
                "name": {
                    "value": "name or 'dropout'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "dropout_33": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : d",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_40": {
                "name": {
                    "value": "scope or 'Softmax'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "scope or 'Softsel'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "scope or 'Double_Linear_Logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "scope or 'Linear_Logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "name_scope_87": {
                "name": {
                    "value": "name or 'sum_logits'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "scope or 'highway_layer'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "scope or 'highway_network'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "scope or 'conv1d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "scope or 'multi_conv1d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cond_18": {
                "pred": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(arg, input_keep_prob)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : arg",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "conv2d_164": {
                "input": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout(in_, keep_prob, is_train)",
                            "Call"
                        ],
                        [
                            "in_",
                            "Method Argument"
                        ],
                        [
                            "in_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[1, height, num_channels, filter_size], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_165": {
                "features": {
                    "value": "xxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(in_, filter_, strides, padding) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_62": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(logits, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "arg",
                            "Method Argument"
                        ],
                        [
                            "arg",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "rank - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_18": {
                "x": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "args[0] * args[1]",
                            "BinOp"
                        ],
                        [
                            "arg",
                            "Method Argument"
                        ],
                        [
                            "arg",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "input_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "my/tensorflow/rnn.py": {
        "tensorflow": {
            "cast_14": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_31": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reverse_33": {
                "tensor": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_inputs, 1) if sequence_length is None else tf.reverse_sequence(flat_inputs, sequence_length, 1)",
                            "IfExp"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_34": {
                "input": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_inputs, 1) if sequence_length is None else tf.reverse_sequence(flat_inputs, sequence_length, 1)",
                            "IfExp"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ],
                        [
                            "flatten(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_39": {
                "tensor": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_dynamic_rnn(cell, flat_inputs, sequence_length=flat_len, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=scope)",
                            "Call"
                        ],
                        [
                            "_dynamic_rnn(cell, flat_inputs, sequence_length=flat_len, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=scope)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_outputs, 1) if sequence_length is None else tf.reverse_sequence(flat_outputs, sequence_length, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_sequence_40": {
                "input": {
                    "value": "flat_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_dynamic_rnn(cell, flat_inputs, sequence_length=flat_len, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=scope)",
                            "Call"
                        ],
                        [
                            "_dynamic_rnn(cell, flat_inputs, sequence_length=flat_len, initial_state=initial_state, dtype=dtype, parallel_iterations=parallel_iterations, swap_memory=swap_memory, time_major=time_major, scope=scope)",
                            "Call"
                        ],
                        [
                            "tf.reverse(flat_outputs, 1) if sequence_length is None else tf.reverse_sequence(flat_outputs, sequence_length, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "seq_lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seq_axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_53": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "flatten(sequence_length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "my/tensorflow/rnn_cell.py": {
        "tensorflow": {
            "cond_19": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : outputs_do",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : outputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_scope_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_24": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : new_state_do",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : new_state",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "slice_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(state, [-1, B, d])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_47": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reshape(state, [-1, B, d]), 1)",
                            "Call"
                        ],
                        [
                            "self._reduce_func(exp_mask(prev_state, mask), 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prev_state, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_104": {
                "variable": {
                    "value": "q_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._q_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_105": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._input_size + self._q_len]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size + self._q_len], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qs, [-1, self._q_len, self._input_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._q_len, self._input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "x_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._q_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_108": {
                "variable": {
                    "value": "h_prev_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(h_prev, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._q_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "linear([qs, x_tiled, h_prev_tiled], self._input_size, True, scope='f')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "exp_mask(linear(f, 1, True, squeeze=True, scope='a'), q_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "qs * tf.expand_dims(a, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[x, q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_167": {
                "variable": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tiled_inputs] + tiled_states + [memory]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_186": {
                "variable": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(inputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tiled_inputs] + tiled_states + [memory]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "scope or self.__class__.__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope or self.__class__.__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope or 'AttentionCell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1), [1, 1, 1, d])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, B, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "input": {
                    "value": "tf.reshape(mask, [-1, B, B])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, 0], [-1, self._input_size])",
                            "Call"
                        ],
                        [
                            "tf.slice(inputs, [0, 0], [-1, self._input_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_108": {
                "input": {
                    "value": "h_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_166": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_167": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_185": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_186": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_209": {
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[inputs, sel_mem]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_222": {
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[inputs, sel_mem, inputs * sel_mem, tf.abs(inputs - sel_mem)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, self._input_size], [-1, -1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.reshape(mask, [-1, B, B]), -1), [1, 1, 1, d])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, B, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(exp_mask(linear(f, 1, True, squeeze=True, scope='a'), q_mask))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_169": {
                "input": {
                    "value": "tf.expand_dims(each, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_172": {
                "input": {
                    "value": "tf.expand_dims(state, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_188": {
                "input": {
                    "value": "tf.expand_dims(each, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_191": {
                "input": {
                    "value": "tf.expand_dims(state, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, _memory_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_21": {
                "pred": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : new_state_do_i",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : new_state_i",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "each",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "input": {
                    "value": "each",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_222": {
                "x": {
                    "value": "inputs - sel_mem",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tree/cli.py": {
        "tensorflow": {
            "run_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tree/evaluator.py": {
        "tensorflow": {
            "Summary_64": {
                "variable": {
                    "value": "loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='dev/loss', simple_value=self.loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_65": {
                "variable": {
                    "value": "acc_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='dev/acc', simple_value=self.acc)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_150": {
                "variable": {
                    "value": "f1_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='dev/f1', simple_value=self.f1)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tree/graph_handler.py": {
        "tensorflow": {
            "Saver_14": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_25": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.save_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "initialize_all_variables_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tree/main.py": {
        "tensorflow": {
            "Session_68": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_117": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_140": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tree/model.py": {
        "tensorflow": {
            "get_variable_17": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, M, JX]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, M, JX, W]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, JQ]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.cq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, JQ, W]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.tx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, M, H, JX]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.tx_edge_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, M, H, JX, JX]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tx_edge_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, M, H, JX]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[xxc, Ax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "qq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[qqc, Aq]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_94": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d + config.word_emb_size",
                            "BinOp"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(x_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "q_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(q_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_117": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(fw_u + bw_u) / 2.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(u, 1), 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "exp_mask(dot, tx_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M * H * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "self.yp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax(self.logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M, H, JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(self.logits, tf.cast(tf.reshape(self.y, [N, M * H * JX]), 'float'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_132": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_137": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.config.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VC, dc]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_63": {
                "variable": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[VC, dc], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_64": {
                "variable": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('char_emb_mat', shape=[VC, dc], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.cq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, config.char_filter_height, dc, d]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[d]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acx, [-1, JX, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JX, W, dc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acq, [-1, JQ, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, JQ, W, dc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "xxc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_max(tf.nn.relu(xxc), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, M, JX, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "qqc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_max(tf.nn.relu(qqc), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, JQ, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_81": {
                "variable": {
                    "value": "Ax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype='float', shape=[VW, config.word_emb_size], initializer=get_initializer(config.emb_mat))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', shape=[VW, config.word_emb_size], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_82": {
                "variable": {
                    "value": "Aq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('word_emb_mat', dtype='float', shape=[VW, config.word_emb_size], initializer=get_initializer(config.emb_mat))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_emb_mat', shape=[VW, config.word_emb_size], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "pos_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pos_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.pos_vocab_size, d]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_92": {
                "variable": {
                    "value": "Atx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pos_emb_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('pos_emb_mat', shape=[config.pos_vocab_size, d], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.tx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(fw_h + bw_h) / 2.0",
                            "BinOp"
                        ],
                        [
                            "dynamic_rnn(tree_rnn_cell, inputs, length, initial_state=initial_state)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(h, [N, M, JX, H, D]), [0, 1, 3, 2, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * M * JX, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_110": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[Atx, tf.cast(self.tx_edge_mask, 'float')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(inputs, [0, 1, 3, 2, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N * M * JX, H, d + JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_sum(tf.cast(tx_mask, 'int32'), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N * M * JX]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(h, [N, M, JX, H, D])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 3, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_to_collection_131": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(self.logits, tf.cast(tf.reshape(self.y, [N, M * H * JX]), 'float')))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_134": {
                "name": {
                    "value": "ema/scalar",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_139": {
                "key": {
                    "value": "ema/scalar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_142": {
                "key": {
                    "value": "ema/histogram",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "char_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "word_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VW, config.word_emb_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "get_initializer(config.emb_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "word_emb_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_emb_mat",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[VW, config.word_emb_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "pos_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x > 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "q_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q > 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_129": {
                "labels": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.cast(tf.reshape(self.y, [N, M * H * JX]), 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_132": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_18": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "input": {
                    "value": "Acx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acx, [-1, JX, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[1, config.char_filter_height, dc, d], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "input": {
                    "value": "Acq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(char_emb_mat, self.cq)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Acq, [-1, JQ, W, dc])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[1, config.char_filter_height, dc, d], dtype='float')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_73": {
                "input_tensor": {
                    "value": "tf.nn.relu(xxc)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_74": {
                "input_tensor": {
                    "value": "tf.nn.relu(qqc)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_111": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(4, [Atx, tf.cast(self.tx_edge_mask, 'float')])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(inputs, [0, 1, 3, 2, 4]), [N * M * JX, H, d + JX])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "tf.cast(tx_mask, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(fw_h + bw_h) / 2.0",
                            "BinOp"
                        ],
                        [
                            "dynamic_rnn(tree_rnn_cell, inputs, length, initial_state=initial_state)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(h, [N, M, JX, H, D]), [0, 1, 3, 2, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, M, JX, H, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_130": {
                "x": {
                    "value": "tf.reshape(self.y, [N, M * H * JX])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_138": {
                "key": {
                    "value": "ema/histogram",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_73": {
                "features": {
                    "value": "xxc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(Acx, filter, strides, 'VALID') + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.reduce_max(tf.nn.relu(xxc), 2), [-1, M, JX, d])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_74": {
                "features": {
                    "value": "qqc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(Acq, filter, strides, 'VALID') + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.reduce_max(tf.nn.relu(qqc), 2), [-1, JQ, d])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_110": {
                "x": {
                    "value": "self.tx_edge_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "tx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tx > 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "tensor": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M * H * JX]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tree/trainer.py": {
        "tensorflow": {
            "AdagradOptimizer_11": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_22": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.ema_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_21": {
                "control_inputs": {
                    "value": "[opt_op]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}