{
    "MLRNN.py": {
        "sklearn": {
            "check_random_state_253": {
                "variable": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_298": {
                "variable": {
                    "value": "shuffled_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(n_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_119": {
                "variable": {
                    "value": "(X, X_valid, y, y_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.validation_fraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stratify": {
                    "value": "stratify",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "self._stratify_continuous_target(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_classifier_370": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_110": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probas[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_classifier_111": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_classifier_112": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_classifier_115": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_313": {
                "*arrays_0": {
                    "value": "y_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t2n(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_254": {
                "variable": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_254": {
                "variable": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "int(self._random_state.uniform(0, 2 ** 31))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_382": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(activation.shape[1], device=device) * torch.exp(ridge_coef)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_383": {
                "variable": {
                    "value": "inversed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation.transpose(1, 0) @ activation + diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, fan_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_229": {
                "variable": {
                    "value": "self.ridge_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "n2t(np.log(ridge_coef))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_363": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "self.target_rotation_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_391": {
                "input": {
                    "value": "self.intercept - self._reduce_loss(self.loss_func(pred, target))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_278": {
                "input": {
                    "value": "point_wise_loss.mean(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_357": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "self.label_noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_382": {
                "*size": {
                    "value": "activation.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_382": {
                "input": {
                    "value": "ridge_coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ridge_init",
                            "Attribute"
                        ],
                        [
                            "self._grid_search_ridge_coef(datas)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_418": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_190": {
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_193": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_248": {
                "*size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_419": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_188": {
                "*size": {
                    "value": "(fan_in, fan_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/MLR.py": {
        "sklearn": {
            "check_random_state_247": {
                "variable": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_292": {
                "variable": {
                    "value": "shuffled_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(n_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_113": {
                "variable": {
                    "value": "(X, X_valid, y, y_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.validation_fraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stratify": {
                    "value": "stratify",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "self._stratify_continuous_target(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_classifier_364": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_104": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probas[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_classifier_105": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_classifier_106": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_classifier_109": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_307": {
                "*arrays_0": {
                    "value": "y_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t2n(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_248": {
                "variable": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_248": {
                "variable": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "int(self._random_state.uniform(0, 2 ** 31))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_376": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(activation.shape[1], device=device) * torch.exp(ridge_coef)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_377": {
                "variable": {
                    "value": "inversed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation.transpose(1, 0) @ activation + diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, fan_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.ridge_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "n2t(np.log(ridge_coef))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_357": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "self.target_rotation_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_385": {
                "input": {
                    "value": "self.intercept - self._reduce_loss(self.loss_func(pred, target))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_272": {
                "input": {
                    "value": "point_wise_loss.mean(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_351": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "self.label_noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_376": {
                "*size": {
                    "value": "activation.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_376": {
                "input": {
                    "value": "ridge_coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ridge_init",
                            "Attribute"
                        ],
                        [
                            "self._grid_search_ridge_coef(datas)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_412": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_184": {
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_242": {
                "*size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_413": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_182": {
                "*size": {
                    "value": "(fan_in, fan_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/get_dataset.py": {
        "sklearn": {
            "normalize_12": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/run_ensemble.py": {
        "sklearn": {
            "r2_score_30": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(X_test).reshape(-1) if regression else model.predict_proba(X_test)[:, 1]",
                            "IfExp"
                        ],
                        [
                            "np.mean([np.mean(predictions[method_name], axis=0) for method_name in ensemble_components], axis=0)",
                            "Call"
                        ],
                        [
                            "predictions[top_valid_performances[-1]]",
                            "Subscript"
                        ],
                        [
                            "np.mean([predictions[index] for index in top_valid_performances], axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(predictions[method_name], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_31": {
                "x": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(X_test).reshape(-1) if regression else model.predict_proba(X_test)[:, 1]",
                            "IfExp"
                        ],
                        [
                            "np.mean([np.mean(predictions[method_name], axis=0) for method_name in ensemble_components], axis=0)",
                            "Call"
                        ],
                        [
                            "predictions[top_valid_performances[-1]]",
                            "Subscript"
                        ],
                        [
                            "np.mean([predictions[index] for index in top_valid_performances], axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(predictions[method_name], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_65": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "auc_71": {
                "x": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_cache_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/run_fastai.py": {
        "sklearn": {
            "r2_score_23": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "learn.get_preds(dl=learn.dls.test_dl(pd.DataFrame(X_test)))[0].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_32": {
                "x": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "logistic_func(decision)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/run_mlr.py": {
        "sklearn": {
            "auc_11": {
                "x": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "model.predict_proba(X_test)[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "empty_cache_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/run_sklearn.py": {
        "sklearn": {
            "auc_71": {
                "variable": {
                    "value": "roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "model.predict_proba(X_test)[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/run_xgb.py": {
        "sklearn": {
            "auc_31": {
                "variable": {
                    "value": "roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "model.predict_proba(X_test)[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_37": {
                "variable": {
                    "value": "roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "model.predict_proba(X_test)[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "r2_score_21": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "model.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "auc_43": {
                "variable": {
                    "value": "roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "model.predict_proba(X_test)[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "notebook_version/MLRNN.py": {
        "sklearn": {
            "check_random_state_253": {
                "variable": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_298": {
                "variable": {
                    "value": "shuffled_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(n_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_119": {
                "variable": {
                    "value": "(X, X_valid, y, y_valid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.validation_fraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stratify": {
                    "value": "stratify",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "self._stratify_continuous_target(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_classifier_370": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_110": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probas[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_classifier_111": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_classifier_112": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_classifier_115": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_313": {
                "*arrays_0": {
                    "value": "y_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t2n(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_254": {
                "variable": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_254": {
                "variable": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "int(self._random_state.uniform(0, 2 ** 31))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_382": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(activation.shape[1], device=device) * torch.exp(ridge_coef)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_383": {
                "variable": {
                    "value": "inversed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activation.transpose(1, 0) @ activation + diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, fan_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_229": {
                "variable": {
                    "value": "self.ridge_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "n2t(np.log(ridge_coef))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_363": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "self.target_rotation_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_391": {
                "input": {
                    "value": "self.intercept - self._reduce_loss(self.loss_func(pred, target))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_278": {
                "input": {
                    "value": "point_wise_loss.mean(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_357": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "self.label_noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_382": {
                "*size": {
                    "value": "activation.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_382": {
                "input": {
                    "value": "ridge_coef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ridge_init",
                            "Attribute"
                        ],
                        [
                            "self._grid_search_ridge_coef(datas)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_418": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_190": {
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_193": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_248": {
                "*size": {
                    "value": "target.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_419": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_188": {
                "*size": {
                    "value": "(fan_in, fan_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.torch_random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device(dev)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/run_dependance_mlr.py": {
        "torch": {
            "empty_cache_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}