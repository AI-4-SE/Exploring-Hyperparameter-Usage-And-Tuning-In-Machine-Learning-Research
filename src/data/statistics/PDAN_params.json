{
    "PDAN.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(SSPDAN(num_layers, num_f_maps, num_classes, num_classes)) for s in range(num_stages - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_26": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(PDAN_Block(2 ** i, num_f_maps, num_f_maps)) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_f_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "157",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_42": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_attention(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.rel_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channels, 1, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_62": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_63": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_64": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_70": {
                "variable": {
                    "value": "padded_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "k_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(k_out[:, :, :, 0].unsqueeze(3), k_out[:, :, :, 0 + self.dilated].unsqueeze(3), k_out[:, :, :, 0 + 2 * self.dilated].unsqueeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "v_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v_out[:, :, :, 0].unsqueeze(3), v_out[:, :, :, 0 + self.dilated].unsqueeze(3), v_out[:, :, :, 0 + 2 * self.dilated].unsqueeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stage1(x, mask)",
                            "Call"
                        ],
                        [
                            "s(out * mask[:, 0:1, :], mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(x)",
                            "Call"
                        ],
                        [
                            "layer(out, mask)",
                            "Call"
                        ],
                        [
                            "self.conv_out(out) * mask[:, 0:1, :]",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.conv_attention(x))",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "q_out * k_out",
                            "BinOp"
                        ],
                        [
                            "F.softmax(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bnctk,bnctk -> bnct', out, v_out).view(batch, -1, time)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnctk,bnctk -> bnct",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stage1(x, mask)",
                            "Call"
                        ],
                        [
                            "s(out * mask[:, 0:1, :], mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(x)",
                            "Call"
                        ],
                        [
                            "layer(out, mask)",
                            "Call"
                        ],
                        [
                            "self.conv_out(out) * mask[:, 0:1, :]",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.conv_attention(x))",
                            "Call"
                        ],
                        [
                            "self.conv_1x1(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ],
                        [
                            "q_out * k_out",
                            "BinOp"
                        ],
                        [
                            "F.softmax(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bnctk,bnctk -> bnct', out, v_out).view(batch, -1, time)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_20": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs, out.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_92": {
                "mean": {
                    "value": "self.rel_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "generator": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_61": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "apmeter.py": {
        "torch": {
            "zeros_107": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.scores.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_108": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_71": {
                "input": {
                    "value": "target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_119": {
                "variable": {
                    "value": "(_, sortind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scores[:, k]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FloatStorage_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LongStorage_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FloatStorage_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_45": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_47": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_51": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_70": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "charades_i3d_per_video.py": {
        "torch": {
            "from_numpy_25": {
                "ndarray": {
                    "value": "pic.transpose([3, 0, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "ndarray": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((max_len, b[1].shape[1]), np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_PDAN.py": {
        "torch": {
            "manual_seed_61": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "random.randint(1, 100000)",
                            "Call"
                        ],
                        [
                            "int(args.randomseed)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "random.randint(1, 100000)",
                            "Call"
                        ],
                        [
                            "int(args.randomseed)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "random.randint(1, 100000)",
                            "Call"
                        ],
                        [
                            "int(args.randomseed)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_65": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "random.randint(1, 100000)",
                            "Call"
                        ],
                        [
                            "int(args.randomseed)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(val_split, 'testing', root, batch_size, classes, int(args.pool_step))",
                            "Call"
                        ],
                        [
                            "Dataset(val_split, 'testing', root, batch_size, classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "mask_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(mask.cuda(gpu))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "mask_new",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((mask.size()[0], classes, mask.size()[1]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_new).float()",
                            "Call"
                        ],
                        [
                            "Variable(mask_new.cuda(gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_185": {
                "variable": {
                    "value": "loss_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation",
                            "variable"
                        ],
                        [
                            "outputs_final[-1]",
                            "Subscript"
                        ],
                        [
                            "outputs_final.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(labels.cuda(gpu))",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_190": {
                "variable": {
                    "value": "corr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(mask.cuda(gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_191": {
                "variable": {
                    "value": "tot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(mask.cuda(gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Dataset(train_split, 'training', root, batch_size, classes, int(args.pool_step))",
                            "Call"
                        ],
                        [
                            "Dataset(train_split, 'training', root, batch_size, classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_304": {
                "variable": {
                    "value": "rgb_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "rgb_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PDAN(stage, block, num_channel, input_channnel, num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(rgb_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_315": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_318": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rgb_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(args.lr)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_319": {
                "variable": {
                    "value": "lr_sched",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(rgb_model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_184": {
                "input": {
                    "value": "outputs_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation",
                            "variable"
                        ],
                        [
                            "outputs_final[-1]",
                            "Subscript"
                        ],
                        [
                            "outputs_final.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_186": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(mask.cuda(gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_254": {
                "input": {
                    "value": "100 * apm.value()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_254": {
                "input": {
                    "value": "100 * apm.value()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_307": {
                "f": {
                    "value": "str(args.load_model)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}