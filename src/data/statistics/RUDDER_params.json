{
    "codebase/model/metric.py": {
        "sklearn": {
            "average_precision_score_517": {
                "y_true": {
                    "value": "gt_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.where(query_masks[ii, :])[0]",
                            "Subscript"
                        ],
                        [
                            "np.squeeze(target_np[ii, :])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.squeeze(scores_np[ii, :])",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_452": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.scores.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_393": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_395": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_418": {
                "input": {
                    "value": "target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_454": {
                "variable": {
                    "value": "rg",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_456": {
                "variable": {
                    "value": "rg",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_466": {
                "variable": {
                    "value": "(_, sortind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.scores[:, k]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_519": {
                "ndarray": {
                    "value": "np.asarray(ap)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_534": {
                "obj": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_536": {
                "obj": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ]
                    ]
                }
            },
            "FloatStorage_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LongStorage_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FloatStorage_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_392": {
                "obj": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_394": {
                "obj": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_399": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_398": {
                "obj": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_417": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_553": {
                "ndarray": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "topk_553": {
                "input": {
                    "value": "maxk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(topk[-1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/base/base_dataset.py": {
        "torch": {
            "from_numpy_368": {
                "variable": {
                    "value": "minibatch[text]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "text_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, self.captions_per_video, self.max_tokens['text'], self.text_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_369": {
                "variable": {
                    "value": "minibatch[text_token_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "text_token_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, self.captions_per_video))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_370": {
                "variable": {
                    "value": "minibatch[text_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(text_tensor_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "num_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self.partition_lists['val'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_364": {
                "variable": {
                    "value": "experts[expert][replace]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "experts[expert][replace]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_373": {
                "variable": {
                    "value": "minibatch[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, self.num_classes))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_358": {
                "ndarray": {
                    "value": "tensors[expert]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_363": {
                "input": {
                    "value": "experts[expert][:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_475": {
                "ndarray": {
                    "value": "self.retrieval[expert]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/base/base_dataset_old.py": {
        "torch": {
            "from_numpy_362": {
                "variable": {
                    "value": "minibatch[text]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "text_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, self.captions_per_video, self.max_tokens['text'], self.text_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_363": {
                "variable": {
                    "value": "minibatch[text_token_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "text_token_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, self.captions_per_video))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_176": {
                "*size": {
                    "value": "num_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self.partition_lists['val'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_358": {
                "variable": {
                    "value": "experts[expert][replace]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "experts[expert][replace]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_366": {
                "variable": {
                    "value": "minibatch[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size)",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, self.num_classes))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_352": {
                "ndarray": {
                    "value": "tensors[expert]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_357": {
                "input": {
                    "value": "experts[expert][:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_465": {
                "ndarray": {
                    "value": "self.retrieval[expert]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/base/base_model.py": {
        "torch": {}
    },
    "codebase/base/base_trainer.py": {
        "torch": {
            "device_count_224": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_234": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if n_gpu_use > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_275": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(resume_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_27": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'arch': arch, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(self.checkpoint_dir / 'checkpoint-epoch{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_265": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'arch': arch, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "best_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(self.checkpoint_dir / 'trained_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/data_loader/data_loaders.py": {
        "torch": {
            "empty_cache_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MSRVTT(**kwargs)",
                            "Call"
                        ],
                        [
                            "DiDeMo(**kwargs)",
                            "Call"
                        ],
                        [
                            "ActivityNet(**kwargs)",
                            "Call"
                        ],
                        [
                            "YouCook2(**kwargs)",
                            "Call"
                        ],
                        [
                            "MALTA(**kwargs)",
                            "Call"
                        ],
                        [
                            "Charades(**kwargs)",
                            "Call"
                        ],
                        [
                            "dataset_loader(cls_partition='train', **common_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cls_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_loader(cls_partition=cls_partition, **common_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "cls_dataset.collate_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/model/loss.py": {
        "torch": {
            "randn_381": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_382": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dist.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_52": {
                "variable": {
                    "value": "part",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "labels == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(-self.p - scores).clamp(min=0) + scores.clamp(min=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_52": {
                "variable": {
                    "value": "part",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "part1",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(labels == 1) | (labels == 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "(self.margin1 + scores).clamp(min=0) + (-scores - self.margin2).clamp(min=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_53": {
                "variable": {
                    "value": "part1",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_54": {
                "variable": {
                    "value": "part2",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "labels == 3",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.margin2 + scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_54": {
                "variable": {
                    "value": "part2",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dist.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "groundMetric1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin1 + scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "groundMetric2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.margin2 - scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "groundMetric3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin2 + scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_94": {
                "variable": {
                    "value": "expGM",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.gamma * GM",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ot.sinkhorn(uuu, vvv, expGM_numpy, reg, numItermax=50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_119": {
                "variable": {
                    "value": "target_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "hinge_groundMetric",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin2 + scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "Pos_groundMetric",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 - scores",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_130": {
                "variable": {
                    "value": "expGM",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.gamma * GM",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ot.sinkhorn(uuu, vvv, expGM_numpy, reg, numItermax=50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "maxelement_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dist.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "hinge_groundMetric",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin + dist - d1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "Pos_groundMetric",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 - dist + d1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_199": {
                "variable": {
                    "value": "expGM",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.gamma * GM",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ot.sinkhorn(uuu, vvv, expGM_numpy, reg, numItermax=50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_221": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.view(-1).mul(T_Flatten)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_233": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.09",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "diag_242": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.randn(3, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x[:, self.caption_count:]",
                            "Subscript"
                        ],
                        [
                            "x[:, self.caption_count:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_246": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_251": {
                "variable": {
                    "value": "max_margin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - (x1 - x2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_283": {
                "variable": {
                    "value": "ones_helper",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_286": {
                "variable": {
                    "value": "scores_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "distance - gt.view(scores.size(0), 1).expand_as(scores) < self.cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros_helper + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores.cuda()",
                            "Call"
                        ],
                        [
                            "scores.t().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_288": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_weights - torch.max(log_weights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_292": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_305": {
                "variable": {
                    "value": "scores_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "distance - gt.view(scores.size(0), 1).expand_as(scores) < self.cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros_helper + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores.cuda()",
                            "Call"
                        ],
                        [
                            "scores.t().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_307": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_weights - torch.max(log_weights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_311": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dist.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_342": {
                "variable": {
                    "value": "temp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.where(labels == 0, score_temp[:, :self.caption_count], zeros_helper[:, :self.caption_count])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_351": {
                "variable": {
                    "value": "temp4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.where(labels == 1 or labels == 2, scores, zeros_helper)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_363": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_373": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_167": {
                "variable": {
                    "value": "diagonal_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dist.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_172": {
                "variable": {
                    "value": "diagonal_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dist.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_258": {
                "variable": {
                    "value": "keep_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.cat((keep1, keep2), 0).flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_261": {
                "variable": {
                    "value": "x1_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.diag(x)",
                            "Call"
                        ],
                        [
                            "x1.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x1.expand(n, n)",
                            "Call"
                        ],
                        [
                            "x1.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "th.cat((x1, x1), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "keep_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.nonzero(th.cat((keep1, keep2), 0).flatten()).flatten()",
                            "Call"
                        ],
                        [
                            "keep_idx.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_262": {
                "variable": {
                    "value": "x2_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "th.cat((x2, x3), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "keep_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.nonzero(th.cat((keep1, keep2), 0).flatten()).flatten()",
                            "Call"
                        ],
                        [
                            "keep_idx.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_263": {
                "variable": {
                    "value": "max_margin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - (x1_ - x2_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_63": {
                "n": {
                    "value": "scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist.cuda()",
                            "Call"
                        ],
                        [
                            "scores - scores[:, 0].view(scores.size(0), 1).expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "dist[:, self.caption_count:].cuda()",
                            "Call"
                        ],
                        [
                            "scores - d",
                            "BinOp"
                        ],
                        [
                            "dist.cuda()",
                            "Call"
                        ],
                        [
                            "scores - scores[:, 0].view(scores.size(0), 1).expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "dist[:, self.caption_count:].cuda()",
                            "Call"
                        ],
                        [
                            "scores - d",
                            "BinOp"
                        ],
                        [
                            "target_train.mul((-0.5 - scores).clamp(min=0)) + (1 - target_train).mul((self.margin2 + scores).clamp(min=0))",
                            "BinOp"
                        ],
                        [
                            "-x.cuda() + 1",
                            "BinOp"
                        ],
                        [
                            "dist.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_290": {
                "condition": {
                    "value": "distance - gt.view(scores.size(0), 1).expand_as(scores) > self.nonzero_loss_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones_helper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(x.shape).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_helper + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_309": {
                "condition": {
                    "value": "distance - gt.view(scores.size(0), 1).expand_as(scores) > self.nonzero_loss_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones_helper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(x.shape).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_helper + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_339": {
                "input": {
                    "value": "torch.where(labels == 1 or labels == 2, scores, zeros_helper)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_342": {
                "condition": {
                    "value": "labels == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "score_temp[:, :self.caption_count]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros_helper[:, :self.caption_count]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_343": {
                "condition": {
                    "value": "temp1 == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "temp1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(torch.where(labels == 0, score_temp[:, :self.caption_count], zeros_helper[:, :self.caption_count]))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_349": {
                "input": {
                    "value": "torch.where(labels == 3, scores, zeros_helper)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_351": {
                "condition": {
                    "value": "labels == 1 or labels == 2",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist.cuda()",
                            "Call"
                        ],
                        [
                            "scores - scores[:, 0].view(scores.size(0), 1).expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "dist[:, self.caption_count:].cuda()",
                            "Call"
                        ],
                        [
                            "scores - d",
                            "BinOp"
                        ],
                        [
                            "dist.cuda()",
                            "Call"
                        ],
                        [
                            "scores - scores[:, 0].view(scores.size(0), 1).expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "dist[:, self.caption_count:].cuda()",
                            "Call"
                        ],
                        [
                            "scores - d",
                            "BinOp"
                        ],
                        [
                            "target_train.mul((-0.5 - scores).clamp(min=0)) + (1 - target_train).mul((self.margin2 + scores).clamp(min=0))",
                            "BinOp"
                        ],
                        [
                            "-x.cuda() + 1",
                            "BinOp"
                        ],
                        [
                            "dist.cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_352": {
                "condition": {
                    "value": "temp4 == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "temp4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(torch.where(labels == 1 or labels == 2, scores, zeros_helper))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_182": {
                "start": {
                    "value": "dist.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_255": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_255": {
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_287": {
                "input": {
                    "value": "1.0 - 0.25 * scores_temp ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_288": {
                "input": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2.0 - float(d)) * torch.log(scores_temp) - float(d - 3) / 2 * torch.log(1.0 - 0.25 * scores_temp ** 2.0)",
                            "BinOp"
                        ],
                        [
                            "(2.0 - float(d)) * torch.log(scores_temp) - float(d - 3) / 2 * torch.log(1.0 - 0.25 * scores_temp ** 2.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_291": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(log_weights - torch.max(log_weights))",
                            "Call"
                        ],
                        [
                            "weights * mask * torch.where(distance - gt.view(scores.size(0), 1).expand_as(scores) > self.nonzero_loss_cutoff, ones_helper, zeros_helper + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "weights / (torch.sum(weights, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(log_weights - torch.max(log_weights))",
                            "Call"
                        ],
                        [
                            "weights * mask * torch.where(distance - gt.view(scores.size(0), 1).expand_as(scores) > self.nonzero_loss_cutoff, ones_helper, zeros_helper + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "weights / (torch.sum(weights, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_306": {
                "input": {
                    "value": "1.0 - 0.25 * scores_temp ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_307": {
                "input": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2.0 - float(d)) * torch.log(scores_temp) - float(d - 3) / 2 * torch.log(1.0 - 0.25 * scores_temp ** 2.0)",
                            "BinOp"
                        ],
                        [
                            "(2.0 - float(d)) * torch.log(scores_temp) - float(d - 3) / 2 * torch.log(1.0 - 0.25 * scores_temp ** 2.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_310": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(log_weights - torch.max(log_weights))",
                            "Call"
                        ],
                        [
                            "weights * mask * torch.where(distance - gt.view(scores.size(0), 1).expand_as(scores) > self.nonzero_loss_cutoff, ones_helper, zeros_helper + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "weights / (torch.sum(weights, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(log_weights - torch.max(log_weights))",
                            "Call"
                        ],
                        [
                            "weights * mask * torch.where(distance - gt.view(scores.size(0), 1).expand_as(scores) > self.nonzero_loss_cutoff, ones_helper, zeros_helper + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "weights / (torch.sum(weights, dim=1, keepdim=True) + 1e-10)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_339": {
                "condition": {
                    "value": "labels == 1 or labels == 2",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist.cuda()",
                            "Call"
                        ],
                        [
                            "scores - scores[:, 0].view(scores.size(0), 1).expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "dist[:, self.caption_count:].cuda()",
                            "Call"
                        ],
                        [
                            "scores - d",
                            "BinOp"
                        ],
                        [
                            "dist.cuda()",
                            "Call"
                        ],
                        [
                            "scores - scores[:, 0].view(scores.size(0), 1).expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "dist[:, self.caption_count:].cuda()",
                            "Call"
                        ],
                        [
                            "scores - d",
                            "BinOp"
                        ],
                        [
                            "target_train.mul((-0.5 - scores).clamp(min=0)) + (1 - target_train).mul((self.margin2 + scores).clamp(min=0))",
                            "BinOp"
                        ],
                        [
                            "-x.cuda() + 1",
                            "BinOp"
                        ],
                        [
                            "dist.cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_349": {
                "condition": {
                    "value": "labels == 3",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist.cuda()",
                            "Call"
                        ],
                        [
                            "scores - scores[:, 0].view(scores.size(0), 1).expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "dist[:, self.caption_count:].cuda()",
                            "Call"
                        ],
                        [
                            "scores - d",
                            "BinOp"
                        ],
                        [
                            "dist.cuda()",
                            "Call"
                        ],
                        [
                            "scores - scores[:, 0].view(scores.size(0), 1).expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "dist[:, self.caption_count:].cuda()",
                            "Call"
                        ],
                        [
                            "scores - d",
                            "BinOp"
                        ],
                        [
                            "target_train.mul((-0.5 - scores).clamp(min=0)) + (1 - target_train).mul((self.margin2 + scores).clamp(min=0))",
                            "BinOp"
                        ],
                        [
                            "-x.cuda() + 1",
                            "BinOp"
                        ],
                        [
                            "dist.cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_helper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(x.shape).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(dist.shape).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_289": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_308": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "(keep1, keep2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/model/model.py": {
        "torch": {
            "bmm_50": {
                "variable": {
                    "value": "kron",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1.view(-1, t1.size(-1), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "t2.contiguous().view(-1, 1, t2.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_67": {
                "variable": {
                    "value": "missing",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ind == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flatten_67": {
                "variable": {
                    "value": "missing",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1058": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T * num_caps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vid_embds[subspaces[0]].size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vid_embds[subspaces[0]].device",
                            "Attribute"
                        ],
                        [
                            "embds[subspaces[0]].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_1190": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_embds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "B * K",
                            "BinOp"
                        ],
                        [
                            "B",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "num_embds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "B * K",
                            "BinOp"
                        ],
                        [
                            "B",
                            "Name"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vid_embds[subspaces[0]].device",
                            "Attribute"
                        ],
                        [
                            "embds[subspaces[0]].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_1240": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "featdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_1244": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "featdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleDict_177": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_347": {
                "variable": {
                    "value": "input_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_348": {
                "variable": {
                    "value": "input_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_351": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_352": {
                "variable": {
                    "value": "attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "act_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_384": {
                "variable": {
                    "value": "self.fc_fusion_scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_442": {
                "variable": {
                    "value": "self.fc_fusion_scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_479": {
                "variable": {
                    "value": "act_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_548": {
                "variable": {
                    "value": "self.trn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_648": {
                "variable": {
                    "value": "self.video_GU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "gated_vid_embds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[MimicCEGatedEmbeddingUnit(same_dim, same_dim, use_bn=True) for _ in modalities]",
                            "ListComp"
                        ],
                        [
                            "[GatedEmbeddingUnit(in_dim, out_dim, use_bn=True)]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[GatedEmbeddingUnit(in_dim, dim, use_bn) for (in_dim, dim, use_bn) in zip(in_dims, agg_dims, use_bns)]",
                            "ListComp"
                        ],
                        [
                            "[GatedEmbeddingUnitReasoning(same_dim) for _ in in_dims]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_913": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_919": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "box_feats.view(-1, box_feats.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.geometric_mlp_model(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, x1), 1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg1(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, t), 1)",
                            "Call"
                        ],
                        [
                            "self.g_reason_1_specific(x)",
                            "Call"
                        ],
                        [
                            "self.non_lin(x)",
                            "Call"
                        ],
                        [
                            "self.g_reason_2_specific(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_930": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "box_feats.view(-1, box_feats.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.geometric_mlp_model(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, x1), 1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg1(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, t), 1)",
                            "Call"
                        ],
                        [
                            "self.g_reason_1_specific(x)",
                            "Call"
                        ],
                        [
                            "self.non_lin(x)",
                            "Call"
                        ],
                        [
                            "self.g_reason_2_specific(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_937": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_945": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "box_feats.view(-1, box_feats.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.geometric_mlp_model(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, x1), 1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg1(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, t), 1)",
                            "Call"
                        ],
                        [
                            "self.g_reason_1_specific(x)",
                            "Call"
                        ],
                        [
                            "self.non_lin(x)",
                            "Call"
                        ],
                        [
                            "self.g_reason_2_specific(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_952": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_954": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_960": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_971": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "box_feats.view(-1, box_feats.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.geometric_mlp_model(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, x1), 1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg1(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, t), 1)",
                            "Call"
                        ],
                        [
                            "self.g_reason_1_specific(x)",
                            "Call"
                        ],
                        [
                            "self.non_lin(x)",
                            "Call"
                        ],
                        [
                            "self.g_reason_2_specific(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_989": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_991": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_992": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_1014": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1021": {
                "variable": {
                    "value": "self.g_reason_1_specific",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "same_dim * num_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1022": {
                "variable": {
                    "value": "self.g_reason_2_specific",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_1071": {
                "variable": {
                    "value": "text_weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T * num_caps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vid_embds[subspaces[0]].size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "text_weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "text_weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1076": {
                "variable": {
                    "value": "available",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vid_embds[subspaces[0]].size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "text_weights.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_1087": {
                "variable": {
                    "value": "text_weight_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_weight_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.ones(T * num_caps, B, len(subspaces), dtype=text_weights.dtype, device=text_weights.device)",
                            "Call"
                        ],
                        [
                            "text_weights.view(T * num_caps, 1, len(subspaces)) * available",
                            "BinOp"
                        ],
                        [
                            "th.div(text_weight_tensor, normalising_weights)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "normalising_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "text_weight_tensor.sum(2).view(T * num_caps, B, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1101": {
                "variable": {
                    "value": "l2_mass_vid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_mass_vid.clamp(min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_1101": {
                "variable": {
                    "value": "l2_mass_vid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_1102": {
                "variable": {
                    "value": "l2_mass_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_mass_text.clamp(min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_1102": {
                "variable": {
                    "value": "l2_mass_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_1121": {
                "input": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.zeros(T * num_caps, B, device=device)",
                            "Call"
                        ],
                        [
                            "sims + th.matmul(embd_, embd_.t())",
                            "BinOp"
                        ],
                        [
                            "sims.view(B, num_caps, B)",
                            "Call"
                        ],
                        [
                            "newsims",
                            "Name"
                        ],
                        [
                            "th.zeros(num_embds, num_embds, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_1200": {
                "variable": {
                    "value": "l2_mass",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l2_mass.clamp(min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_1200": {
                "variable": {
                    "value": "l2_mass",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_1210": {
                "input": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.zeros(T * num_caps, B, device=device)",
                            "Call"
                        ],
                        [
                            "sims + th.matmul(embd_, embd_.t())",
                            "BinOp"
                        ],
                        [
                            "sims.view(B, num_caps, B)",
                            "Call"
                        ],
                        [
                            "newsims",
                            "Name"
                        ],
                        [
                            "th.zeros(num_embds, num_embds, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_1239": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1250": {
                "variable": {
                    "value": "src_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "src.repeat(1, captions_per_vid, 1) + noise",
                            "BinOp"
                        ],
                        [
                            "F.normalize(src_a, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1251": {
                "variable": {
                    "value": "src_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "src.repeat(1, captions_per_vid, 1) + noise",
                            "BinOp"
                        ],
                        [
                            "F.normalize(src_b, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_80": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "box_feats.view(-1, box_feats.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.geometric_mlp_model(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, x1), 1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg1(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, t), 1)",
                            "Call"
                        ],
                        [
                            "self.g_reason_1_specific(x)",
                            "Call"
                        ],
                        [
                            "self.non_lin(x)",
                            "Call"
                        ],
                        [
                            "self.g_reason_2_specific(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_244": {
                "variable": {
                    "value": "nan_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "experts[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_like_245": {
                "variable": {
                    "value": "experts[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "experts[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_355": {
                "variable": {
                    "value": "temp_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp.unsqueeze(2) * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "variable": {
                    "value": "fc_fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_445": {
                "variable": {
                    "value": "fc_fusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_528": {
                "variable": {
                    "value": "self.non_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_532": {
                "variable": {
                    "value": "self.moe_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "text_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.text_pooling.out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(expert_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_593": {
                "variable": {
                    "value": "self.video_dim_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dim_reducers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[ReduceDim(in_dim, same_dim) for in_dim in in_dims]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_619": {
                "variable": {
                    "value": "self.g_reason_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*g_reason_shared",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_627": {
                "variable": {
                    "value": "self.h_reason",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*h_reason",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_661": {
                "variable": {
                    "value": "self.text_GU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "gated_text_embds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[nn.Sequential()]",
                            "List"
                        ],
                        [
                            "[GatedEmbeddingUnit(text_dim, sum(agg_dims), use_bn=True)]",
                            "List"
                        ],
                        [
                            "[GatedEmbeddingUnit(text_dim, dim, use_bn=True) for dim in text_out_dims]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_668": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "total_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total_dim + self.expert_dims[mod][1] * self.repeat_temporal[mod]",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_693": {
                "variable": {
                    "value": "moe_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "moe_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.moe_weights.repeat(B, K, 1)",
                            "Call"
                        ],
                        [
                            "self.moe_fc(text)",
                            "Call"
                        ],
                        [
                            "F.softmax(moe_weights, dim=1)",
                            "Call"
                        ],
                        [
                            "moe_weights.view(B, K, M)",
                            "Call"
                        ],
                        [
                            "moe_weights.cuda()",
                            "Call"
                        ],
                        [
                            "self.compute_moe_weights(text, ind=ind)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_865": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(experts.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_961": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "box_feats.view(-1, box_feats.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.geometric_mlp_model(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, x1), 1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg1(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, t), 1)",
                            "Call"
                        ],
                        [
                            "self.g_reason_1_specific(x)",
                            "Call"
                        ],
                        [
                            "self.non_lin(x)",
                            "Call"
                        ],
                        [
                            "self.g_reason_2_specific(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_1015": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_",
                            "Name"
                        ],
                        [
                            "box_feats.view(-1, box_feats.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.geometric_mlp_model(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, x1), 1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "self.cg1(x)",
                            "Call"
                        ],
                        [
                            "th.cat((x, t), 1)",
                            "Call"
                        ],
                        [
                            "self.g_reason_1_specific(x)",
                            "Call"
                        ],
                        [
                            "self.non_lin(x)",
                            "Call"
                        ],
                        [
                            "self.g_reason_2_specific(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1146": {
                "variable": {
                    "value": "newsims",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vid_embds[subspaces[0]].size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_caps + B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_1209": {
                "input": {
                    "value": "embd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embds[modality]",
                            "Subscript"
                        ],
                        [
                            "embds[modality]",
                            "Subscript"
                        ],
                        [
                            "text_weights[:, :, idx:idx + 1] * embd_",
                            "BinOp"
                        ],
                        [
                            "embds[modality].reshape(num_embds, -1)",
                            "Call"
                        ],
                        [
                            "text_weights[:, :, idx:idx + 1] * embd_",
                            "BinOp"
                        ],
                        [
                            "embd_.reshape(num_embds, -1) / l2_mass",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "embd_.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_1241": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "captions_per_vid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "featdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_1245": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "captions_per_vid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "featdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_1254": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "captions_per_vid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "len(sample_modalities)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "input": {
                    "value": "F.softplus(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.text_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "nans",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_600": {
                "variable": {
                    "value": "self.g_reason_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "same_dim * num_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_843": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(experts.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_887": {
                "variable": {
                    "value": "cross_view_conf_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_embd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "text_embds[modality].view(T * num_caps, -1)",
                            "Call"
                        ],
                        [
                            "text_embd_ / l2_mass_text",
                            "BinOp"
                        ],
                        [
                            "text_embd[self.modalities[0]]",
                            "Subscript"
                        ],
                        [
                            "text_embd_.view(-1, text_embd_.shape[-1])",
                            "Call"
                        ],
                        [
                            "text_embd[self.modalities[0]]",
                            "Subscript"
                        ],
                        [
                            "text_embd_.view(-1, text_embd_.shape[-1])",
                            "Call"
                        ],
                        [
                            "text_embd_padded",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "vid_embd_.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1113": {
                "input": {
                    "value": "text_embd_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "text_embds[modality].view(T * num_caps, -1)",
                            "Call"
                        ],
                        [
                            "text_embd_ / l2_mass_text",
                            "BinOp"
                        ],
                        [
                            "text_embd[self.modalities[0]]",
                            "Subscript"
                        ],
                        [
                            "text_embd_.view(-1, text_embd_.shape[-1])",
                            "Call"
                        ],
                        [
                            "text_embd[self.modalities[0]]",
                            "Subscript"
                        ],
                        [
                            "text_embd_.view(-1, text_embd_.shape[-1])",
                            "Call"
                        ],
                        [
                            "text_embd_padded",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "vid_embd_.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_45": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isnan_71": {
                "input": {
                    "value": "vals.view(-1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "spatial_feat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_389": {
                "in_features": {
                    "value": "scale * self.img_feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_bottleneck",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_391": {
                "in_features": {
                    "value": "num_bottleneck",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_447": {
                "in_features": {
                    "value": "scale * self.img_feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_bottleneck",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_449": {
                "in_features": {
                    "value": "num_bottleneck",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ],
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_536": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_mods",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(expert_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_605": {
                "variable": {
                    "value": "self.g_reason_unshared_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "g_reason_unshared_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[G_reason(same_dim, num_inputs, self.non_lin) for mod in modalities]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "rand_like_734": {
                "variable": {
                    "value": "text_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer(text)",
                            "Call"
                        ],
                        [
                            "text_.view(B, captions_per_video, -1)",
                            "Call"
                        ],
                        [
                            "th.rand_like(text_)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_786": {
                "variable": {
                    "value": "fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(experts[curr_modality], avg_modality)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_849": {
                "variable": {
                    "value": "vid_embd_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(experts.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_875": {
                "variable": {
                    "value": "vid_embd_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(vid_embd_.shape[0], text_embd_.shape[1])",
                            "Tuple"
                        ],
                        [
                            "(text_embd_.shape[0], vid_embd_.shape[1])",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vid_embds[subspaces[0]].device",
                            "Attribute"
                        ],
                        [
                            "embds[subspaces[0]].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_884": {
                "variable": {
                    "value": "text_embd_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(vid_embd_.shape[0], text_embd_.shape[1])",
                            "Tuple"
                        ],
                        [
                            "(text_embd_.shape[0], vid_embd_.shape[1])",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vid_embds[subspaces[0]].device",
                            "Attribute"
                        ],
                        [
                            "embds[subspaces[0]].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_269": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(projected, sem_feats.contiguous())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_feats, sem_feats.contiguous())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_339": {
                "*size": {
                    "value": "img_feature_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expert_dims[mod][0]",
                            "Subscript"
                        ],
                        [
                            "expert_dims[mod][0]",
                            "Subscript"
                        ],
                        [
                            "expert_dims[mod][0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_attention",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_608": {
                "variable": {
                    "value": "self.dim_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "reduce_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reduce_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_609": {
                "variable": {
                    "value": "self.g_reason_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reduce_dim * reduce_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_618": {
                "in_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "in_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_652": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_792": {
                "variable": {
                    "value": "fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(experts[curr_modality], avg_modality)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_1081": {
                "input": {
                    "value": "available",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.ones(1, B, len(subspaces), dtype=text_weights.dtype)",
                            "Call"
                        ],
                        [
                            "available.to(text_weights.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_616": {
                "num_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_624": {
                "num_features": {
                    "value": "same_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_803": {
                "variable": {
                    "value": "fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mod0_reduce",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim_reduce(experts[curr_modality])",
                            "Call"
                        ],
                        [
                            "mod0_reduce.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mod1_reduce",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim_reduce(avg_modality)",
                            "Call"
                        ],
                        [
                            "mod1_reduce.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_836": {
                "variable": {
                    "value": "curr_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "temp * ind[curr_modality].float().to(dev).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "self.h_reason(curr_mask)",
                            "Call"
                        ],
                        [
                            "temp * ind[curr_modality].float().to(dev).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "temp * ind[curr_modality].float().to(dev).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "curr_mask + temp_dict[mm] * avai_dict[mm].unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "th.div(curr_mask, (mask_num + 1e-11).unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(mask_num + 1e-11).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_814": {
                "variable": {
                    "value": "fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(experts[mod0], experts[mod1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_823": {
                "variable": {
                    "value": "fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(experts[curr_modality], experts[mod0], experts[mod1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/model/net_vlad.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_sc * th.randn(feature_size, clusters)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.clusters2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_sc * th.randn(1, feature_size, cluster_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "assignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.feature_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, max_sample, self.feature_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "assignment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.matmul(x, self.clusters)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(assignment)",
                            "Call"
                        ],
                        [
                            "F.softmax(assignment, dim=1)",
                            "Call"
                        ],
                        [
                            "assignment[:, :self.cluster_size]",
                            "Subscript"
                        ],
                        [
                            "assignment.view(-1, max_sample, self.cluster_size)",
                            "Call"
                        ],
                        [
                            "assignment.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "a_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.matmul(x, self.clusters)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(assignment)",
                            "Call"
                        ],
                        [
                            "F.softmax(assignment, dim=1)",
                            "Call"
                        ],
                        [
                            "assignment[:, :self.cluster_size]",
                            "Subscript"
                        ],
                        [
                            "assignment.view(-1, max_sample, self.cluster_size)",
                            "Call"
                        ],
                        [
                            "assignment.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.matmul(x, self.clusters)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(assignment)",
                            "Call"
                        ],
                        [
                            "F.softmax(assignment, dim=1)",
                            "Call"
                        ],
                        [
                            "assignment[:, :self.cluster_size]",
                            "Subscript"
                        ],
                        [
                            "assignment.view(-1, max_sample, self.cluster_size)",
                            "Call"
                        ],
                        [
                            "assignment.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.feature_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, max_sample, self.feature_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_82": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.matmul(assignment, x)",
                            "Call"
                        ],
                        [
                            "vlad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "vlad - a",
                            "BinOp"
                        ],
                        [
                            "F.normalize(vlad)",
                            "Call"
                        ],
                        [
                            "vlad.reshape(-1, self.cluster_size * self.feature_size)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_86": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "th.matmul(assignment, x)",
                            "Call"
                        ],
                        [
                            "vlad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "vlad - a",
                            "BinOp"
                        ],
                        [
                            "F.normalize(vlad)",
                            "Call"
                        ],
                        [
                            "vlad.reshape(-1, self.cluster_size * self.feature_size)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_91": {
                "input": {
                    "value": "th.sum(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_94": {
                "input": {
                    "value": "self.clusters[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_39": {
                "num_features": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_size + ghost_clusters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_91": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.feature_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, max_sample, self.feature_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_38": {
                "*size": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cluster_size + ghost_clusters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_41": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cluster_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/sent_feat_demo.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[indexed_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codebase/test.py": {
        "torch": {
            "load_87": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config._args.resume",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_90": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.init(name='arch', module=module_arch, trn_config=trn_config, expert_dims=expert_dims, text_dim=config['experts']['text_dim'], disable_nan_checks=config['disable_nan_checks'], task=config.get('task', 'retrieval'), ce_shared_dim=config['experts'].get('ce_shared_dim', None), feat_aggregation=config['data_loader']['args']['feat_aggregation'], trn_cat=config['data_loader']['args'].get('trn_cat', 0))",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codebase/train.py": {
        "torch": {}
    },
    "codebase/trainer/trainer.py": {
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "text_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(text_labels, temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_221": {
                "variable": {
                    "value": "sims_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(sim_chunks, dim=0).data.cpu().float().numpy()",
                            "Call"
                        ],
                        [
                            "output['cross_view_conf_matrix'].data.cpu().float().numpy()",
                            "Call"
                        ],
                        [
                            "output['cross_view_conf_matrix'].data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_113": {
                "n": {
                    "value": "text_labels.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "cached_preds[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_212": {
                "tensors": {
                    "value": "sim_chunks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cos_restart.py": {
        "torch": {}
    },
    "codebase/utils/radam.py": {
        "torch": {
            "zeros_like_36": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_37": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_111": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_112": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_175": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_176": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/utils/ranger.py": {
        "torch": {
            "zeros_like_109": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_113": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/util.py": {
        "torch": {
            "manual_seed_46": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "x.flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}