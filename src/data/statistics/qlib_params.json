{
    "examples/benchmarks/TFT/data_formatters/qlib_Alpha158.py": {
        "sklearn": {}
    },
    "qlib/contrib/model/linear.py": {
        "sklearn": {
            "LinearRegression_75": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "self.fit_intercept",
                    "type": "Attribute",
                    "possible_values": []
                },
                "copy_X": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_nn.py": {
        "sklearn": {},
        "torch": {
            "Dropout_426": {
                "variable": {
                    "value": "drop_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_440": {
                "variable": {
                    "value": "drop_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_442": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_445": {
                "variable": {
                    "value": "self.dnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dnn_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_101": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "GPU",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_103": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_152": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.dnn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_160": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_339": {
                "variable": {
                    "value": "sqr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_340": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqr_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(pred - target, pred - target)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_340": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_361": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dnn_model(x_batch_auto)",
                            "Call"
                        ],
                        [
                            "self._nn_predict(all_t['x']['valid'], return_cpu=False)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate([pr.cpu().numpy() for pr in preds])",
                            "Call"
                        ],
                        [
                            "torch.cat(preds, axis=0)",
                            "Call"
                        ],
                        [
                            "self._nn_predict(x_test_pd)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_430": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "_input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_437": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_438": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_134": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_144": {
                "variable": {
                    "value": "self.dnn_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.dnn_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_154": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.dnn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_182": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_343": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_387": {
                "obj": {
                    "value": "self.dnn_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, os.path.split(model_dir)[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_432": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_214": {
                "variable": {
                    "value": "all_t[v][seg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_df[v][seg].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_328": {
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_397": {
                "f": {
                    "value": "_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, _model_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SiLU_434": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_315": {
                "obj": {
                    "value": "self.dnn_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/workflow/record_temp.py": {
        "sklearn": {
            "mean_squared_error_78": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "pred.values[masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "label[masks]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/model/riskmodel/structured.py": {
        "sklearn": {}
    },
    "examples/benchmarks/TFT/libs/tft_model.py": {
        "tensorflow": {
            "Dense_64": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TimeDistributed_66": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "layer": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(size, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.TimeDistributed(linear)",
                            "Call"
                        ],
                        [
                            "Dense(output_size)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.TimeDistributed(linear)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_231": {
                "variable": {
                    "value": "temper",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.shape(k)[-1], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_517": {
                "variable": {
                    "value": "obs_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convert_real_to_embedding(regular_inputs[Ellipsis, i:i + 1]) for i in self._input_obs_loc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_551": {
                "variable": {
                    "value": "known_combined_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "known_regular_inputs + known_categorical_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Input_724": {
                "variable": {
                    "value": "all_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(time_steps, combined_input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TimeDistributed_171": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "layer": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(size, activation=activation, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.TimeDistributed(linear)",
                            "Call"
                        ],
                        [
                            "Dense(output_size)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.TimeDistributed(linear)",
                            "Call"
                        ]
                    ]
                }
            },
            "Activation_180": {
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_200": {
                "input": {
                    "value": "self_attn_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_201": {
                "input": {
                    "value": "self_attn_inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_202": {
                "num_rows": {
                    "value": "len_s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(self_attn_inputs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_shape": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(self_attn_inputs)[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_479": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer([time_steps]), tf.keras.layers.Embedding(self.category_counts[i], embedding_sizes[i], input_length=time_steps, dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_507": {
                "variable": {
                    "value": "static_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "static_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.keras.layers.Dense(self.hidden_layer_size)(regular_inputs[:, 0, i:i + 1]) for i in range(num_regular_variables) if i in self._static_input_loc] + [embedded_inputs[i][:, 0, :] for i in range(num_categorical_variables) if i + num_regular_variables in self._static_input_loc]",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.stack(static_inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_535": {
                "variable": {
                    "value": "unknown_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "unknown_inputs + wired_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_841": {
                "variable": {
                    "value": "sparse_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Activation('softmax')(mlp_outputs)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(sparse_weights, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Activation('softmax')(mlp_outputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sparse_weights, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_966": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipnorm": {
                    "value": "self.max_gradient_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_968": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "all_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=(time_steps, combined_input_size))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "K.mean(head, axis=0) if n_head > 1 else head",
                            "IfExp"
                        ],
                        [
                            "self.w_o(outputs)",
                            "Call"
                        ],
                        [
                            "Dropout(self.dropout)(outputs)",
                            "Call"
                        ],
                        [
                            "np.zeros((max_samples, self.time_steps, self.output_size))",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(self.output_size * len(self.quantiles)))(transformer_layer[Ellipsis, self.num_encoder_steps:, :])",
                            "Call"
                        ],
                        [
                            "raw_data['outputs']",
                            "Subscript"
                        ],
                        [
                            "data['outputs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TimeDistributed_87": {
                "layer": {
                    "value": "tf.keras.layers.Dense(hidden_size, activation=hidden_activation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_90": {
                "layer": {
                    "value": "tf.keras.layers.Dense(output_size, activation=output_activation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_92": {
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_93": {
                "units": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_layer_size",
                            "Name"
                        ],
                        [
                            "self.output_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_112": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TimeDistributed_115": {
                "layer": {
                    "value": "tf.keras.layers.Dense(hidden_layer_size, activation=activation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_118": {
                "layer": {
                    "value": "tf.keras.layers.Dense(hidden_layer_size, activation='sigmoid')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_120": {
                "units": {
                    "value": "hidden_layer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_121": {
                "units": {
                    "value": "hidden_layer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Multiply_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_231": {
                "x": {
                    "value": "tf.shape(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CuDNNLSTM_868": {
                "variable": {
                    "value": "lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_layer_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "return_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_875": {
                "variable": {
                    "value": "lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_layer_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "return_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "recurrent_activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "recurrent_dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "unroll": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_956": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EarlyStopping_1029": {
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.early_stopping_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_1030": {
                "filepath": {
                    "value": "self.get_keras_saved_path(self._temp_folder)",
                    "type": "Call",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TerminateOnNaN_1036": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_session_1188": {
                "variable": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_1188": {
                "variable": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "main": {
                    "value": "self._attention_components[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "argv": {
                    "value": "{input_placeholder: input_batch.astype(np.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_session_1248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_87": {
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_90": {
                "units": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_layer_size",
                            "Name"
                        ],
                        [
                            "self.output_size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "output_activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_116": {
                "units": {
                    "value": "hidden_layer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_118": {
                "units": {
                    "value": "hidden_layer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TimeDistributed_514": {
                "layer": {
                    "value": "tf.keras.layers.Dense(self.hidden_layer_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Flatten_764": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_776": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Multiply_791": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_840": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Multiply_856": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TimeDistributed_960": {
                "layer": {
                    "value": "tf.keras.layers.Dense(self.output_size * len(self.quantiles))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_session_1267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_231": {
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ],
                        [
                            "data_map",
                            "Name"
                        ],
                        [
                            "col_mappings",
                            "Name"
                        ],
                        [
                            "self._attention_components",
                            "Attribute"
                        ],
                        [
                            "self._attention_components",
                            "Attribute"
                        ]
                    ]
                }
            },
            "InputLayer_481": {
                "input_shape": {
                    "value": "[time_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_482": {
                "input_dim": {
                    "value": "self.category_counts[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "embedding_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_length": {
                    "value": "time_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.time_steps",
                            "Attribute"
                        ],
                        [
                            "len(input_data)",
                            "Call"
                        ],
                        [
                            "self.time_steps",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_514": {
                "units": {
                    "value": "self.hidden_layer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_960": {
                "units": {
                    "value": "self.output_size * len(self.quantiles)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_499": {
                "units": {
                    "value": "self.hidden_layer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/benchmarks/TFT/libs/utils.py": {
        "tensorflow": {
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "q_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quantile * tf.maximum(prediction_underflow, 0.0) + (1.0 - quantile) * tf.maximum(-prediction_underflow, 0.0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConfigProto_139": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ConfigProto_147": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_166": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_168": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_196": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_198": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=scope)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_79": {
                "x": {
                    "value": "-prediction_underflow",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/benchmarks/TFT/tft.py": {
        "tensorflow": {
            "get_session_199": {
                "variable": {
                    "value": "default_keras_session",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_223": {
                "variable": {
                    "value": "self.tf_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_session_260": {
                "variable": {
                    "value": "default_keras_session",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_225": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "self.tf_config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_226": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_session_246": {
                "session": {
                    "value": "default_keras_session",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.get_session()",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.get_session()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_271": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_session_276": {
                "session": {
                    "value": "default_keras_session",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.get_session()",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.get_session()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/benchmarks/TRA/src/dataset.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[slc.stop - 1 for slc in self.batch_slices]",
                            "ListComp"
                        ],
                        [
                            "index.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "index.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(index, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_253": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(data)",
                            "Call"
                        ],
                        [
                            "_to_tensor(np.stack(data))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_254": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(label)",
                            "Call"
                        ],
                        [
                            "_to_tensor(np.stack(label))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_242": {
                "variable": {
                    "value": "_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.zeros[:self.seq_len - len(_data)], _data]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/benchmarks/TRA/src/model.py": {
        "torch": {
            "isinf_578": {
                "variable": {
                    "value": "mask_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_579": {
                "variable": {
                    "value": "ind_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_inf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.isinf(inp_tensor)",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.parameters()) + list(self.tra.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_365": {
                "variable": {
                    "value": "self.input_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_367": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_406": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_408": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_409": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_409": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_410": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_411": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_412": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_454": {
                "variable": {
                    "value": "self.input_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_456": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoderLayer_459": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "d_model": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim_feedforward": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TransformerEncoder_462": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(nhead=num_heads, dropout=dropout, d_model=hidden_size, dim_feedforward=hidden_size * 4)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_514": {
                "variable": {
                    "value": "self.predictors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gumbel_softmax_535": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.fc(torch.cat([temporal_pred_error, latent_representation], dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_586": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_599": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_376": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_377": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_387": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input_drop(x)",
                            "Call"
                        ],
                        [
                            "x + noise * self.noise_level",
                            "BinOp"
                        ],
                        [
                            "x + self.pe[:x.size(0), :]",
                            "BinOp"
                        ],
                        [
                            "self.input_drop(x)",
                            "Call"
                        ],
                        [
                            "x + noise * self.noise_level",
                            "BinOp"
                        ],
                        [
                            "x.permute(1, 0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.pe(x)",
                            "Call"
                        ],
                        [
                            "self.input_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_397": {
                "variable": {
                    "value": "last_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_out, att_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_471": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input_drop(x)",
                            "Call"
                        ],
                        [
                            "x + noise * self.noise_level",
                            "BinOp"
                        ],
                        [
                            "x + self.pe[:x.size(0), :]",
                            "BinOp"
                        ],
                        [
                            "self.input_drop(x)",
                            "Call"
                        ],
                        [
                            "x + noise * self.noise_level",
                            "BinOp"
                        ],
                        [
                            "x.permute(1, 0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.pe(x)",
                            "Call"
                        ],
                        [
                            "self.input_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_506": {
                "variable": {
                    "value": "self.router",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "num_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_512": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_528": {
                "variable": {
                    "value": "latent_representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hidden.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_532": {
                "variable": {
                    "value": "temporal_pred_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "router_out[:, -1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "best_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model': copy.deepcopy(self.model.state_dict()), 'tra': copy.deepcopy(self.tra.state_dict())}",
                            "Dict"
                        ],
                        [
                            "{'model': copy.deepcopy(self.model.state_dict()), 'tra': copy.deepcopy(self.tra.state_dict())}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.logdir + '/model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_534": {
                "tensors": {
                    "value": "[temporal_pred_error, latent_representation]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_410": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "model_init_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/data/dataset.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([zeros[:seq_len - len(x), :x.shape[1]], x], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/meta/data_selection/model.py": {
        "torch": {
            "Adam_150": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.tn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "43",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_grad_enabled_69": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_72": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_86": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/meta/data_selection/net.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hist_step_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([8.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "time_perf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "time_perf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "time_perf.reshape(hist_step_n, time_perf.shape[0] // hist_step_n, *time_perf.shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.mean(time_perf, dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds)",
                            "Call"
                        ],
                        [
                            "preds - torch.mean(preds)",
                            "BinOp"
                        ],
                        [
                            "preds * self.k",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ones(X.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_28": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds)",
                            "Call"
                        ],
                        [
                            "preds - torch.mean(preds)",
                            "BinOp"
                        ],
                        [
                            "preds * self.k",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_62": {
                "input": {
                    "value": "X_w @ X",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/meta/data_selection/utils.py": {
        "torch": {
            "exp_76": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dot_37": {
                "variable": {
                    "value": "ic_day",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred_focus - pred_focus.mean()) / np.sqrt(pred_focus.shape[0]) / pred_focus.std()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(y_focus - y_focus.mean()) / np.sqrt(y_focus.shape[0]) / y_focus.std()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_64": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(preds) * np.log(clip_weight)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_68": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_70": {
                "variable": {
                    "value": "sm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_64": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(preds)",
                            "Call"
                        ],
                        [
                            "torch.exp(preds)",
                            "Call"
                        ],
                        [
                            "weights.clamp(1.0 / clip_weight, clip_weight)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.tanh(preds) * np.log(clip_weight))",
                            "Call"
                        ],
                        [
                            "torch.ones_like(preds)",
                            "Call"
                        ],
                        [
                            "sm(preds) * clip_weight",
                            "BinOp"
                        ],
                        [
                            "weights / torch.sum(weights) * weights.numel()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_adarnn.py": {
        "torch": {
            "DataLoader_364": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_loader(df)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(source.size()[0])",
                            "Call"
                        ],
                        [
                            "2000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CosineSimilarity_604": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_637": {
                "variable": {
                    "value": "domain_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_640": {
                "variable": {
                    "value": "domain_src",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_641": {
                "variable": {
                    "value": "domain_tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_778": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_155": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "dist_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.len_seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_338": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.len_seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_350": {
                "variable": {
                    "value": "self.df_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.df_feature.values.reshape(-1, 6, 60).transpose(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_353": {
                "variable": {
                    "value": "self.df_label_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.df_label_reg.values.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_403": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_406": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_411": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_460": {
                "variable": {
                    "value": "loss_transfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "x_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_s, x_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_497": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_lst[index](self.gate[index](x_all.float()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_498": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(self.num_layers, self.len_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "out_weight_list[i][j] if self.model_type == 'AdaRNN' else 1 / (self.len_seq - h_start) * (2 * len_win + 1)",
                            "IfExp"
                        ],
                        [
                            "torch.sigmoid(self.bn_lst[index](self.gate[index](x_all.float())))",
                            "Call"
                        ],
                        [
                            "torch.mean(weight, dim=0)",
                            "Call"
                        ],
                        [
                            "(1.0 / self.len_seq * torch.ones(self.num_layers, self.len_seq)).to(self.device)",
                            "Call"
                        ],
                        [
                            "weight_mat",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_521": {
                "variable": {
                    "value": "loss_transfer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_526": {
                "variable": {
                    "value": "dist_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.len_seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_542": {
                "variable": {
                    "value": "weight_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transform_type(out_weight_list)",
                            "Call"
                        ],
                        [
                            "self.model.update_weight_Boosting(weight_mat, dist_old, dist_mat)",
                            "Call"
                        ],
                        [
                            "weight_mat / weight_norm.t().unsqueeze(1).repeat(1, self.len_seq)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_564": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.dis1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_627": {
                "variable": {
                    "value": "self.dis2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_630": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dis1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_632": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.dis1(x))",
                            "Call"
                        ],
                        [
                            "self.dis2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_681": {
                "variable": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_733": {
                "variable": {
                    "value": "self.fc1_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_734": {
                "variable": {
                    "value": "self.fc1_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_735": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_738": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_x(x) + self.fc1_y(y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_749": {
                "input": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_749": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_301": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_408": {
                "variable": {
                    "value": "rnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.n_input",
                            "Attribute"
                        ],
                        [
                            "hidden",
                            "Name"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_hiddens",
                            "Name"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_414": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_hiddens[-1], bottleneck_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_425": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_428": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hiddens[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_431": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_437": {
                "variable": {
                    "value": "bnlst",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_441": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_657": {
                "*size": {
                    "value": "(1, ns)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_661": {
                "*size": {
                    "value": "(1, nt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_142": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_151": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "feature_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_s, feature_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_value__206": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "gate_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len_seq * self.hiddens[i] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ],
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_691": {
                "input": {
                    "value": "-L2_distance / bandwidth_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_722": {
                "n": {
                    "value": "len(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_725": {
                "input": {
                    "value": "torch.exp(loss_marginal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_725": {
                "input": {
                    "value": "torch.mean(torch.exp(loss_marginal))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_415": {
                "in_features": {
                    "value": "n_hiddens[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_416": {
                "in_features": {
                    "value": "bottleneck_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "bottleneck_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_417": {
                "num_features": {
                    "value": "bottleneck_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_541": {
                "input": {
                    "value": "dist_new[ind] - dist_old[ind]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_688": {
                "input": {
                    "value": "L2_distance.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_708": {
                "variable": {
                    "value": "XX",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernels[:batch_size, :batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_709": {
                "variable": {
                    "value": "YY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernels[batch_size:, batch_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_710": {
                "variable": {
                    "value": "XY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernels[:batch_size, batch_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_711": {
                "variable": {
                    "value": "YX",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernels[batch_size:, :batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_712": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX + YY - XY - YX",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_439": {
                "num_features": {
                    "value": "len_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ],
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_564": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_707": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_725": {
                "input": {
                    "value": "loss_marginal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mine_model(X, Y_shffle)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_523": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.len_seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_597": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_dist(X, Y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_add.py": {
        "torch": {
            "device_86": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "mse_loss_169": {
                "variable": {
                    "value": "pre_excess_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_excess[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "label_excess[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_175": {
                "variable": {
                    "value": "pre_market_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_market",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label_market",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m_values[batch]).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(m_train_values[batch]).long().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_190": {
                "variable": {
                    "value": "adv_excess_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_excess.squeeze()[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "label_excess[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_196": {
                "variable": {
                    "value": "adv_market_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_market",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label_market",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(m_values[batch]).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(m_train_values[batch]).long().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_222": {
                "variable": {
                    "value": "rec_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(len(x), self.d_feat, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(len(x), self.d_feat, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x[:, 1, :])",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rec_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_517": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_522": {
                "variable": {
                    "value": "reconstructed_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reconstructed_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(reconstructed_feature, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_586": {
                "variable": {
                    "value": "self.gamma_clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "float(gamma_clip)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_587": {
                "variable": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_154": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ADD_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_261": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "variable": {
                    "value": "label_excess",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "label_market",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_291": {
                "variable": {
                    "value": "label_excess",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_292": {
                "variable": {
                    "value": "label_market",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_415": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.ADD_model.state_dict())",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.ADD_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_430": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_excess, hidden_market]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GRU_532": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_138": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_156": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ADD_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_165": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_168": {
                "input": {
                    "value": "label_excess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_values[batch]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_train_values[batch]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_189": {
                "input": {
                    "value": "label_excess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_values[batch]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_train_values[batch]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_241": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pd.Series(pred.cpu().detach().numpy())",
                            "Call"
                        ],
                        [
                            "self.ADD_model(x_batch)",
                            "Call"
                        ],
                        [
                            "pred['excess'].detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.fc(output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pd.Series(label.cpu().detach().numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__300": {
                "parameters": {
                    "value": "self.ADD_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_485": {
                "*args": {
                    "value": "nn.Linear(ctx_size, ctx_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_489": {
                "*args": {
                    "value": "nn.Linear(ctx_size, ctx_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_540": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_593": {
                "data": {
                    "value": "2 / (1 + math.exp(-self.gamma * self._p)) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_399": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_459": {
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_485": {
                "in_features": {
                    "value": "ctx_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size * num_layers",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_485": {
                "num_features": {
                    "value": "ctx_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size * num_layers",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tanh_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_489": {
                "in_features": {
                    "value": "ctx_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size * num_layers",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_489": {
                "num_features": {
                    "value": "ctx_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_size * num_layers",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tanh_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_514": {
                "tensors": {
                    "value": "[hidden_excess[i], hidden_market[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_470": {
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_alstm.py": {
        "torch": {
            "device_73": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_150": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_316": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_327": {
                "variable": {
                    "value": "self.att_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_346": {
                "variable": {
                    "value": "out_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "attention_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.att_net(rnn_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_347": {
                "variable": {
                    "value": "out_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(rnn_out, attention_score)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_att, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ALSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_138": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_268": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.ALSTM_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_291": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_125": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ALSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_134": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_141": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__180": {
                "parameters": {
                    "value": "self.ALSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_317": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_330": {
                "in_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.hid_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_332": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_336": {
                "in_features": {
                    "value": "int(self.hid_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_338": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_349": {
                "tensors": {
                    "value": "(rnn_out[:, -1, :], out_att)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_alstm_ts.py": {
        "torch": {
            "device_77": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_160": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_230": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ConcatDataset(dl_train, wl_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ConcatDataset(dl_valid, wl_valid)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare(segment, col_set=['feature', 'label'], data_key=DataHandlerLP.DK_I)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.att_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_351": {
                "variable": {
                    "value": "out_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "attention_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.att_net(rnn_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_352": {
                "variable": {
                    "value": "out_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(rnn_out, attention_score)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_att, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ALSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_145": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight * (pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label, weight.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label, weight.to(self.device))",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_151": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_282": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.ALSTM_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_118": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_132": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.ALSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_141": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_148": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__180": {
                "parameters": {
                    "value": "self.ALSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_325": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_338": {
                "in_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.hid_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_340": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_344": {
                "in_features": {
                    "value": "int(self.hid_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_346": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "(rnn_out[:, -1, :], out_att)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_gats.py": {
        "torch": {
            "device_78": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_158": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[batch]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[batch]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_355": {
                "variable": {
                    "value": "self.transformation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_356": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.hidden_size * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_358": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_359": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_360": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_361": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_370": {
                "variable": {
                    "value": "e_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.expand(sample_num, sample_num, dim)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "attention_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_x, e_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_372": {
                "variable": {
                    "value": "self.a_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.GAT_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_146": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_215": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_300": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.GAT_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_320": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_335": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_118": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_133": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.GAT_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_142": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_149": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[batch]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[batch]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__196": {
                "parameters": {
                    "value": "self.GAT_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_343": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_356": {
                "*size": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_262": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_373": {
                "input": {
                    "value": "attention_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((e_x, e_y), 2).view(-1, dim * 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_gats_ts.py": {
        "torch": {
            "device_96": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_177": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('train', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_L)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DailyBatchSampler(dl_train)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_256": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('valid', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_L)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DailyBatchSampler(dl_valid)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_327": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('test', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_I)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DailyBatchSampler(dl_test)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.transformation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_370": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.hidden_size * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_372": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_373": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_374": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_375": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_384": {
                "variable": {
                    "value": "e_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.expand(sample_num, sample_num, dim)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "attention_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e_x, e_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_386": {
                "variable": {
                    "value": "self.a_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.GAT_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_165": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_315": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.GAT_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_349": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_152": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.GAT_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_161": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_168": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__211": {
                "parameters": {
                    "value": "self.GAT_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_357": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_370": {
                "*size": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_277": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_387": {
                "input": {
                    "value": "attention_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((e_x, e_y), 2).view(-1, dim * 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_gru.py": {
        "torch": {
            "device_73": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_150": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_305": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_312": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gru_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_138": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_268": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.gru_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_291": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_125": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gru_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_134": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_141": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__180": {
                "parameters": {
                    "value": "self.gru_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_gru_ts.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_158": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_228": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ConcatDataset(dl_train, wl_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_235": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ConcatDataset(dl_valid, wl_valid)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_291": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('test', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_I)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_311": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_318": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.GRU_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_143": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight * (pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label, weight.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label, weight.to(self.device))",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_149": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_280": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.GRU_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_116": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_130": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.GRU_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_139": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_146": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__178": {
                "parameters": {
                    "value": "self.GRU_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_hist.py": {
        "torch": {
            "device_83": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_164": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[batch]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[batch]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_394": {
                "variable": {
                    "value": "self.fc_es",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.fc_is",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_399": {
                "variable": {
                    "value": "self.fc_es_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_401": {
                "variable": {
                    "value": "self.fc_is_middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_404": {
                "variable": {
                    "value": "self.fc_es_fore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.fc_is_fore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_408": {
                "variable": {
                    "value": "self.fc_indi_fore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_411": {
                "variable": {
                    "value": "self.fc_es_back",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_413": {
                "variable": {
                    "value": "self.fc_is_back",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_415": {
                "variable": {
                    "value": "self.fc_indi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_418": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_419": {
                "variable": {
                    "value": "self.softmax_s2t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_420": {
                "variable": {
                    "value": "self.softmax_t2s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_422": {
                "variable": {
                    "value": "self.fc_out_es",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_423": {
                "variable": {
                    "value": "self.fc_out_is",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_424": {
                "variable": {
                    "value": "self.fc_out_indi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_425": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_429": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(x * x, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_430": {
                "variable": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(y * y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_430": {
                "variable": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_435": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "torch.get_device(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_446": {
                "variable": {
                    "value": "stock_to_concept_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stock_to_concept",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concept_matrix",
                            "Name"
                        ],
                        [
                            "stock_to_concept / stock_to_concept_sum",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_446": {
                "variable": {
                    "value": "stock_to_concept_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_453": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stock_to_concept",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concept_matrix",
                            "Name"
                        ],
                        [
                            "stock_to_concept / stock_to_concept_sum",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_453": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(len(x), self.d_feat, -1)",
                            "Call"
                        ],
                        [
                            "x_hidden.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x_hidden[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linspace_474": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i_stock_to_concept.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_481": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_481": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_stock_to_concept",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.cal_cos_similarity(i_shared_info, hidden)",
                            "Call"
                        ],
                        [
                            "i_stock_to_concept * (torch.ones(dim, dim) - torch.eye(dim)).to(device)",
                            "BinOp"
                        ],
                        [
                            "i_stock_to_concept + torch.diag_embed((i_stock_to_concept.sum(0) != 0).float() * diag)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.HIST_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_152": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_206": {
                "variable": {
                    "value": "concept_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stock2concept_matrix[stock_index[batch]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_234": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "concept_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stock2concept_matrix[stock_index[batch]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.HIST_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_357": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_358": {
                "variable": {
                    "value": "concept_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "stock2concept_matrix[stock_index_test[batch]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_376": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_125": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_139": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.HIST_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_148": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_155": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[batch]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[batch]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__213": {
                "parameters": {
                    "value": "self.HIST_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTM_384": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "t_428": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_450": {
                "*size": {
                    "value": "stock_to_concept.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "stock_to_concept.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_embed_480": {
                "input": {
                    "value": "(i_stock_to_concept.sum(0) != 0).float() * diag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_170": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_171": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_172": {
                "input": {
                    "value": "vy ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_292": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_172": {
                "input": {
                    "value": "torch.sum(vy ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_429": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_430": {
                "input": {
                    "value": "y * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_431": {
                "input": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum(y * y, dim=1)).reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_473": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i_stock_to_concept.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i_stock_to_concept.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_473": {
                "n": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i_stock_to_concept.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_igmtf.py": {
        "torch": {
            "device_77": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_157": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[batch]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[batch]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_199": {
                "variable": {
                    "value": "train_hidden_day",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_hidden_day",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_383": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_387": {
                "variable": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_388": {
                "variable": {
                    "value": "self.project1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_389": {
                "variable": {
                    "value": "self.project2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_390": {
                "variable": {
                    "value": "self.fc_out_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_392": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_397": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(x * x, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_397": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_398": {
                "variable": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(y * y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_398": {
                "variable": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_420": {
                "variable": {
                    "value": "mini_batch_out_day",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_420": {
                "variable": {
                    "value": "mini_batch_out_day",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "sample_train_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(sample_train_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_429": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "x.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_435": {
                "variable": {
                    "value": "column",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_436": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "torch.cat([row, column])",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "torch.ones([row.shape[1]]).to(device) / n_neighbor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.shape[0], sample_train_hidden.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_443": {
                "variable": {
                    "value": "agg_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xy / (x_norm.mm(torch.t(y_norm)) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "self.cal_cos_similarity(self.project1(mini_batch_out), self.project2(sample_train_hidden))",
                            "Call"
                        ],
                        [
                            "self.sparse_dense_mul(mask, cos_similarity)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.project2(sample_train_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.igmtf_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_145": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_214": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_215": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_239": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_240": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_326": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.igmtf_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_366": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_117": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_132": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.igmtf_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_141": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_148": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[batch]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[batch]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__221": {
                "parameters": {
                    "value": "self.igmtf_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_374": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "t_396": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "topk_422": {
                "input": {
                    "value": "day_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.cal_cos_similarity(mini_batch_out_day, train_hidden_day.to(device))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k_day",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_437": {
                "tensors": {
                    "value": "[row, column]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_163": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(len(x), self.d_feat, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_164": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_165": {
                "input": {
                    "value": "vy ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_287": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_385": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_438": {
                "*size": {
                    "value": "[row.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_165": {
                "input": {
                    "value": "torch.sum(vy ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_397": {
                "input": {
                    "value": "x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_398": {
                "input": {
                    "value": "y * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_399": {
                "input": {
                    "value": "y_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.sum(y * y, dim=1)).reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_435": {
                "input": {
                    "value": "cos_similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xy / (x_norm.mm(torch.t(y_norm)) + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "self.cal_cos_similarity(self.project1(mini_batch_out), self.project2(sample_train_hidden))",
                            "Call"
                        ],
                        [
                            "self.sparse_dense_mul(mask, cos_similarity)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "n_neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_445": {
                "tensors": {
                    "value": "[mini_batch_out, agg_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_localformer.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_100": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_254": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_255": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_255": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_256": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_257": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_258": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_297": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_304": {
                "variable": {
                    "value": "self.feature_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoderLayer_306": {
                "variable": {
                    "value": "self.encoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "nhead",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.decoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_88": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred.float() - label.float()) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_75": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_84": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_91": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__130": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_277": {
                "in_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_256": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_localformer_ts.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_100": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_160": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('train', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_L)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('valid', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_L)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('test', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_I)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_234": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_234": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_235": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_236": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_237": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_247": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GRU_276": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_283": {
                "variable": {
                    "value": "self.feature_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoderLayer_285": {
                "variable": {
                    "value": "self.encoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "nhead",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_287": {
                "variable": {
                    "value": "self.decoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_88": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred.float() - label.float()) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_204": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_75": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_84": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_91": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__120": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_256": {
                "in_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_235": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_lstm.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_146": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_296": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_303": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lstm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_134": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.lstm_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_284": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_121": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lstm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_130": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_137": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__176": {
                "parameters": {
                    "value": "self.lstm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_lstm_ts.py": {
        "torch": {
            "device_74": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_154": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ConcatDataset(dl_train, wl_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_230": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ConcatDataset(dl_valid, wl_valid)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('test', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_I)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_306": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_313": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.LSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_139": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight * (pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label, weight.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label, weight.to(self.device))",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_145": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_275": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.LSTM_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_115": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_126": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.LSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_135": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_142": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__174": {
                "parameters": {
                    "value": "self.LSTM_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_sfm.py": {
        "torch": {
            "Parameter_44": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_uniform_(torch.empty((self.input_dim, self.hidden_dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.orthogonal_(torch.empty(self.hidden_dim, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.b_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.W_ste",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_uniform_(torch.empty(self.input_dim, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.U_ste",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.orthogonal_(torch.empty(self.hidden_dim, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.b_ste",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.W_fre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_uniform_(torch.empty(self.input_dim, self.freq_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.U_fre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.orthogonal_(torch.empty(self.hidden_dim, self.freq_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.b_fre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.freq_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_uniform_(torch.empty(self.input_dim, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.U_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.orthogonal_(torch.empty(self.hidden_dim, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.b_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_uniform_(torch.empty(self.input_dim, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.orthogonal_(torch.empty(self.hidden_dim, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.b_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.U_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.orthogonal_(torch.empty(self.freq_dim, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.b_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.W_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init.xavier_uniform_(torch.empty(self.hidden_dim, self.output_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.b_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_70": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardsigmoid_71": {
                "variable": {
                    "value": "self.inner_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "reducer_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.hidden_dim, self.freq_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "reducer_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.hidden_dim, self.output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "init_state_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "init_state_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_state_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.hidden_dim).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "reducer_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.hidden_dim, self.output_dim)).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_148": {
                "variable": {
                    "value": "init_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_state_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.hidden_dim).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "init_freq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_state_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.hidden_dim).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "reducer_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.hidden_dim, self.freq_dim)).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "init_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(init_state_h).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.reshape(init_state, (-1, self.hidden_dim, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.hidden_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "init_freq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_freq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(init_state_h, reducer_f)",
                            "Call"
                        ],
                        [
                            "torch.reshape(init_freq, (-1, 1, self.freq_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, self.freq_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "init_state_time",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_236": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_435": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "ste",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ste",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inner_activation(x_ste + torch.matmul(h_tm1 * B_U[0], self.U_ste))",
                            "Call"
                        ],
                        [
                            "torch.reshape(ste, (-1, self.hidden_dim, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.hidden_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "fre",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inner_activation(x_fre + torch.matmul(h_tm1 * B_U[0], self.U_fre))",
                            "Call"
                        ],
                        [
                            "torch.reshape(fre, (-1, 1, self.freq_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, self.freq_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_117": {
                "variable": {
                    "value": "re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(2 * np.pi) * time * frequency",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_118": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(2 * np.pi) * time * frequency",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i * self.activation(x_c + torch.matmul(h_tm1 * B_U[0], self.U_c))",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(c, (-1, self.hidden_dim, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.hidden_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.square(S_re) + torch.square(S_im)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(A, (-1, self.freq_dim)).float()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.freq_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "A_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A * B_U[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U_a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "A_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(A * B_U[0], self.U_a)",
                            "Call"
                        ],
                        [
                            "torch.reshape(A_a, (-1, self.hidden_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_295": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.sfm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_326": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_327": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_353": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_354": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_417": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.sfm_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_423": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_459": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_50": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "self.freq_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([float(ii) / self.freq_dim for ii in range(self.freq_dim)])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_280": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_297": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.sfm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_306": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_value__361": {
                "parameters": {
                    "value": "self.sfm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_426": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_44": {
                "*size": {
                    "value": "(self.input_dim, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_45": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_48": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_49": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_52": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.freq_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_53": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.freq_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_56": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_57": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_60": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_61": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_64": {
                "*size": {
                    "value": "self.freq_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_67": {
                "*size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "input": {
                    "value": "x * B_W[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "input": {
                    "value": "x * B_W[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_ste",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "input": {
                    "value": "x * B_W[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_fre",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "input": {
                    "value": "x * B_W[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "input": {
                    "value": "x * B_W[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_125": {
                "input": {
                    "value": "S_im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f * S_im_tm1 + c * im",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_135": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "o * a",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_102": {
                "input": {
                    "value": "h_tm1 * B_U[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "input": {
                    "value": "h_tm1 * B_U[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U_ste",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "input": {
                    "value": "h_tm1 * B_U[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U_fre",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "input": {
                    "value": "h_tm1 * B_U[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_111": {
                "input": {
                    "value": "h_tm1 * B_U[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.U_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_tabnet.py": {
        "torch": {
            "arange_604": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "x_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_test.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "x_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data_x.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "variable": {
                    "value": "y_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.squeeze(data_y.values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "x_train_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_277": {
                "variable": {
                    "value": "y_train_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.squeeze(y_train.values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_302": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_367": {
                "variable": {
                    "value": "down_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tabnet_decoder(vec)",
                            "Call"
                        ],
                        [
                            "self.tabnet_decoder(vec)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_368": {
                "variable": {
                    "value": "down",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.square(f - down_mean), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_379": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_values[indices[i:i + self.batch_size]].float().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_train_values[indices[i:i + self.batch_size]].float().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_train_values.float().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_train_values.float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_397": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_429": {
                "variable": {
                    "value": "self.steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_434": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_466": {
                "variable": {
                    "value": "self.steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_469": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_470": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_498": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_542": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_558": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_566": {
                "variable": {
                    "value": "self.independ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_621": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_634": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_input - v_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_output.clone()",
                            "Call"
                        ],
                        [
                            "torch.where(output != 0, grad_input - v_hat, grad_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_639": {
                "variable": {
                    "value": "(input_srt, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input - max_val",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.dim",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "self.pretrain_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.tabnet_model.parameters()) + list(self.tabnet_decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.tabnet_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.tabnet_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_236": {
                "variable": {
                    "value": "priors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "end - begin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_264": {
                "variable": {
                    "value": "priors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_292": {
                "variable": {
                    "value": "priors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_315": {
                "variable": {
                    "value": "S_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty(self.batch_size, self.d_feat).fill_(self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_346": {
                "variable": {
                    "value": "S_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty(self.batch_size, self.d_feat).fill_(self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_370": {
                "input": {
                    "value": "torch.square(up / down)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_386": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.pretrain_loss_fn(label, f, S_mask)",
                            "Call"
                        ],
                        [
                            "self.pretrain_loss_fn(label, f, S_mask)",
                            "Call"
                        ],
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_422": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_458": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_505": {
                "variable": {
                    "value": "chunk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fea_tran(x)",
                            "Call"
                        ],
                        [
                            "range(n_shared - 1)",
                            "Call"
                        ],
                        [
                            "range(n_steps)",
                            "Call"
                        ],
                        [
                            "range(n_shared - 1)",
                            "Call"
                        ],
                        [
                            "range(n_steps - 1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.bn(self.fc(x))",
                            "Call"
                        ],
                        [
                            "range(first, n_ind)",
                            "Call"
                        ],
                        [
                            "self.shared[0](x)",
                            "Call"
                        ],
                        [
                            "torch.add(x, glu(x))",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.add(x, glu(x))",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.fea_tran(x * mask)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "x.size(0) // self.vbs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_523": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_529": {
                "input": {
                    "value": "x[:, :self.od]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(x[:, self.od:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_580": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fea_tran(x)",
                            "Call"
                        ],
                        [
                            "range(n_shared - 1)",
                            "Call"
                        ],
                        [
                            "range(n_steps)",
                            "Call"
                        ],
                        [
                            "range(n_shared - 1)",
                            "Call"
                        ],
                        [
                            "range(n_steps - 1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.bn(self.fc(x))",
                            "Call"
                        ],
                        [
                            "range(first, n_ind)",
                            "Call"
                        ],
                        [
                            "self.shared[0](x)",
                            "Call"
                        ],
                        [
                            "torch.add(x, glu(x))",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.add(x, glu(x))",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.fea_tran(x * mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "glu(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_101": {
                "variable": {
                    "value": "self.pretrain_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.tabnet_model.parameters()) + list(self.tabnet_decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_104": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.tabnet_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_225": {
                "input": {
                    "value": "x_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x_test.values)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data_x.values)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_249": {
                "input": {
                    "value": "x_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x_test.values)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data_x.values)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_250": {
                "input": {
                    "value": "y_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.squeeze(data_y.values))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_278": {
                "input": {
                    "value": "x_train_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x_train.values)",
                            "Call"
                        ],
                        [
                            "train_set[indices[i:i + self.batch_size]] * (1 - S_mask)",
                            "BinOp"
                        ],
                        [
                            "train_set[indices[i:i + self.batch_size]] * (1 - S_mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_279": {
                "input": {
                    "value": "y_train_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.squeeze(y_train.values))",
                            "Call"
                        ],
                        [
                            "train_set[indices[i:i + self.batch_size]] * S_mask",
                            "BinOp"
                        ],
                        [
                            "train_set[indices[i:i + self.batch_size]] * S_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_value__298": {
                "parameters": {
                    "value": "self.tabnet_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "isnan_303": {
                "input": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x_train.values)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x_train.values)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_333": {
                "input": {
                    "value": "train_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x_train.values)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x_train.values)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_368": {
                "input": {
                    "value": "torch.square(f - down_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_370": {
                "input": {
                    "value": "up / down",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_373": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_values[indices[i:i + self.batch_size]].float().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_train_values[indices[i:i + self.batch_size]].float().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_train_values.float().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_train_values.float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_474": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fea_tran(x)",
                            "Call"
                        ],
                        [
                            "range(n_shared - 1)",
                            "Call"
                        ],
                        [
                            "range(n_steps)",
                            "Call"
                        ],
                        [
                            "range(n_shared - 1)",
                            "Call"
                        ],
                        [
                            "range(n_steps - 1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.bn(self.fc(x))",
                            "Call"
                        ],
                        [
                            "range(first, n_ind)",
                            "Call"
                        ],
                        [
                            "self.shared[0](x)",
                            "Call"
                        ],
                        [
                            "torch.add(x, glu(x))",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.add(x, glu(x))",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.fea_tran(x * mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_481": {
                "input": {
                    "value": "x_te[:, :self.n_d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_507": {
                "tensors": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.bn(y) for y in chunk]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_529": {
                "input": {
                    "value": "x[:, self.od:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_577": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fea_tran(x)",
                            "Call"
                        ],
                        [
                            "range(n_shared - 1)",
                            "Call"
                        ],
                        [
                            "range(n_steps)",
                            "Call"
                        ],
                        [
                            "range(n_shared - 1)",
                            "Call"
                        ],
                        [
                            "range(n_steps - 1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.bn(self.fc(x))",
                            "Call"
                        ],
                        [
                            "range(first, n_ind)",
                            "Call"
                        ],
                        [
                            "self.shared[0](x)",
                            "Call"
                        ],
                        [
                            "torch.add(x, glu(x))",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.add(x, glu(x))",
                            "Call"
                        ],
                        [
                            "x * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.fea_tran(x * mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "glu(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "self.tabnet_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrain_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'./pretrain/best.model'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_162": {
                "f": {
                    "value": "self.pretrain_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_315": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_346": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_368": {
                "input": {
                    "value": "f - down_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_423": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_459": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * (n_d + n_a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_425": {
                "in_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_461": {
                "in_features": {
                    "value": "n_d + n_a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * (n_d + n_a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_597": {
                "input": {
                    "value": "mask + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_tcn.py": {
        "torch": {
            "device_78": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_158": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.tcn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_146": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_208": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_272": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.tcn_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_295": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_118": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_133": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.tcn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_142": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_149": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__188": {
                "parameters": {
                    "value": "self.tcn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_tcn_ts.py": {
        "torch": {
            "device_76": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_159": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('train', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_L)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_222": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('valid', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_L)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('test', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_I)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.TCN_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_147": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_263": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.TCN_model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_119": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.TCN_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_143": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_150": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__179": {
                "parameters": {
                    "value": "self.TCN_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_tcts.py": {
        "torch": {
            "device_76": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "variable": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "task_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_346": {
                "variable": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '_fore_model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_348": {
                "variable": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '_weight_model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_393": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_415": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_422": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_124": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight_model(weight_feature)",
                            "Call"
                        ],
                        [
                            "self.weight_model(weight_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_valid_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_valid_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "weight_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, dis.transpose(0, 1), label, pred.view(-1, 1), task_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_205": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight_model(weight_feature)",
                            "Call"
                        ],
                        [
                            "self.weight_model(weight_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_206": {
                "variable": {
                    "value": "valid_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred - label[:, abs(self.target_label)]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_207": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_loss * torch.log(weight[np.arange(weight.shape[0]), loc])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_231": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_235": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred - label[:, abs(self.target_label)]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_300": {
                "variable": {
                    "value": "self.fore_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.fore_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.fore_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_306": {
                "variable": {
                    "value": "self.weight_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.weight_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.weight_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_375": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_126": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred - label[np.arange(weight.shape[0]), loc]) ** 2",
                            "BinOp"
                        ],
                        [
                            "(pred - label.transpose(0, 1)) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label, weight)",
                            "Call"
                        ],
                        [
                            "torch.mean(valid_loss * torch.log(weight[np.arange(weight.shape[0]), loc]))",
                            "Call"
                        ],
                        [
                            "torch.mean((pred - label[:, abs(self.target_label)]) ** 2)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "weight_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, dis.transpose(0, 1), label, init_pred.view(-1, 1), task_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_value__211": {
                "parameters": {
                    "value": "self.weight_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_302": {
                "variable": {
                    "value": "self.fore_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.fore_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.fore_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_308": {
                "variable": {
                    "value": "self.weight_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.weight_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.weight_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_401": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "loss * weight.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_value__179": {
                "parameters": {
                    "value": "self.fore_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_268": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_336": {
                "obj": {
                    "value": "copy.deepcopy(self.fore_model.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '_fore_model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_337": {
                "obj": {
                    "value": "copy.deepcopy(self.weight_model.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + '_weight_model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_398": {
                "in_features": {
                    "value": "d_feat if i == 0 else hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "weight[np.arange(weight.shape[0]), loc]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_397": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_tra.py": {
        "torch": {
            "isinf_753": {
                "variable": {
                    "value": "mask_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_754": {
                "variable": {
                    "value": "ind_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_inf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.isinf(inp_tensor)",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_816": {
                "variable": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_868": {
                "variable": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(all_preds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_loss, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_889": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.rank(pct=True)",
                            "Call"
                        ],
                        [
                            "(all_preds * P).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "(all_preds * choice).sum(dim=1)",
                            "Call"
                        ],
                        [
                            "all_preds[range(len(all_preds)), prob.argmax(dim=-1)]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred, dim=0)",
                            "Call"
                        ],
                        [
                            "all_preds.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "all_preds.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "pd.DataFrame(X, index=batch['index'], columns=columns)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.parameters()) + list(self.tra.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_596": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_598": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_599": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_599": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_600": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_601": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_602": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_639": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoderLayer_642": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "nhead": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "d_model": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim_feedforward": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TransformerEncoder_645": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(nhead=num_heads, dropout=dropout, d_model=hidden_size, dim_feedforward=hidden_size * 4)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_696": {
                "variable": {
                    "value": "self.predictors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gumbel_softmax_734": {
                "variable": {
                    "value": "choice",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.router(hist_loss)[1]",
                            "Subscript"
                        ],
                        [
                            "hidden",
                            "Name"
                        ],
                        [
                            "out[0]",
                            "Subscript"
                        ],
                        [
                            "out.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden, out], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_735": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_761": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_773": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q / epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_150": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.init_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_436": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.parameters()) + list(self.tra.predictors.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_442": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.parameters()) + list(self.tra.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_554": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_567": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_587": {
                "variable": {
                    "value": "last_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_out, att_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_772": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_782": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.label",
                            "Attribute"
                        ],
                        [
                            "label[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isnan_817": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.label",
                            "Attribute"
                        ],
                        [
                            "label[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_102": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SummaryWriter_134": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_464": {
                "obj": {
                    "value": "{'model': self.model.state_dict(), 'tra': self.tra.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.logdir + '/model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_707": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size if 'LR' in src_info else hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_709": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_728": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_208": {
                "mode": {
                    "value": "not self.freeze_model",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_600": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_408": {
                "obj": {
                    "value": "best_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model': copy.deepcopy(self.model.state_dict()), 'tra': copy.deepcopy(self.tra.state_dict())}",
                            "Dict"
                        ],
                        [
                            "{'model': copy.deepcopy(self.model.state_dict()), 'tra': copy.deepcopy(self.tra.state_dict())}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.logdir + '/model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_transformer.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_99": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_253": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_254": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_255": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_256": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_257": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "variable": {
                    "value": "self.feature_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoderLayer_271": {
                "variable": {
                    "value": "self.encoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "nhead",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_272": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "self.encoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.decoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_87": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred.float() - label.float()) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_values[indices[i:i + self.batch_size]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_240": {
                "variable": {
                    "value": "x_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_values[begin:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_74": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_83": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_90": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y_train_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_values[indices[i:i + self.batch_size]]).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__129": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_255": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_transformer_ts.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % GPU if torch.cuda.is_available() and GPU >= 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "isfinite_97": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('train', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_L)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('valid', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_L)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_213": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dl_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.prepare('test', col_set=['feature', 'label'], data_key=DataHandlerLP.DK_I)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_232": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_232": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_233": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_234": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_235": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.feature_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoderLayer_249": {
                "variable": {
                    "value": "self.encoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "nhead",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_250": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "self.encoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.decoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_85": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(pred.float() - label.float()) ** 2",
                            "BinOp"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(pred, label)",
                            "Call"
                        ],
                        [
                            "'mse'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_202": {
                "obj": {
                    "value": "best_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_or_create_path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_72": {
                "variable": {
                    "value": "self.train_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_81": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isnan_88": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ],
                        [
                            "data[:, -1, -1].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_value__117": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_233": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/model/pytorch_utils.py": {
        "torch": {}
    },
    "qlib/contrib/model/tcn.py": {
        "torch": {
            "weight_norm_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(n_inputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "weight_norm_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(n_outputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_27": {
                "in_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_36": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/contrib/torch.py": {
        "torch": {
            "from_numpy_20": {
                "ndarray": {
                    "value": "data.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/model/utils.py": {
        "torch": {}
    },
    "qlib/rl/order_execution/network.py": {
        "torch": {
            "Sequential_53": {
                "variable": {
                    "value": "self.raw_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(obs_space['data_processed'].shape[-1], hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.pri_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.dire_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim * self.num_sources, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(bs, 1, data_dim, device=device), obs['data_processed'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_74": {
                "variable": {
                    "value": "bs_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp['data_processed'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_81": {
                "variable": {
                    "value": "priv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(position.float(), steps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sources",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data_out_slice, priv_out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "obs_space['data_processed'].shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "hidden_dim * self.num_sources",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_78": {
                "start": {
                    "value": "position.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp['data_processed'].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_78": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_94": {
                "tensors": {
                    "value": "(obs['acquiring'], 1 - obs['acquiring'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp['data_processed'].device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "qlib/rl/order_execution/policy.py": {
        "torch": {
            "load_164": {
                "variable": {
                    "value": "loaded_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.layer_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(cast(int, extractor.output_dim), action_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.value_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cast(int, extractor.output_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "chain_dedup(actor.parameters(), critic.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_159": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "cast(int, extractor.output_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_65": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/rl/trainer/callbacks.py": {
        "torch": {
            "save_251": {
                "obj": {
                    "value": "trainer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dirpath / self._last_checkpoint_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/rl/trainer/trainer.py": {
        "torch": {
            "load_194": {
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "qlib/rl/utils/data_queue.py": {
        "torch": {
            "DataLoader_169": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cast(Dataset[T], self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.producer_num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda t: t",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "tests/rl/test_data_queue.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DummyDataset(100)",
                            "Call"
                        ],
                        [
                            "DummyDataset(100)",
                            "Call"
                        ],
                        [
                            "DummyDataset(100)",
                            "Call"
                        ],
                        [
                            "DummyDataset(100)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/rl/test_finite_env.py": {
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "self.loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "DistributedSampler(dataset, num_replicas, rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "self.loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "DistributedSampler(dataset, num_replicas, rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DistributedSampler_55": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_replicas",
                    "type": "Variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_87": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ],
                        [
                            "DummyDataset(length)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "num_replicas",
                    "type": "Variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/rl/test_logger.py": {
        "torch": {
            "tensor_102": {
                "data": {
                    "value": "233.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/rl/test_saoe_simple.py": {
        "torch": {
            "load_289": {
                "f": {
                    "value": "CN_POLICY_WEIGHTS_DIR / 'ppo_recurrent_30min.pth'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/rl/test_trainer.py": {
        "torch": {
            "Linear_73": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_90": {
                "params": {
                    "value": "tuple(actor.parameters()) + tuple(critic.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_197": {
                "f": {
                    "value": "output_dir / '001.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "obs['acc'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(torch.randn(obs['acc'].shape[0], 32))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_dataset.py": {
        "torch": {
            "DataLoader_92": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "s_w_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IndexSampler(tsds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}