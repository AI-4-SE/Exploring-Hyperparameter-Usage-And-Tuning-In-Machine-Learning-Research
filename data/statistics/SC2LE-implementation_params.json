{
    "agents/a3c_agent.py": {
        "tensorflow": {
            "global_variables_initializer_35": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_311": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.minimap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, U.minimap_channel(), self.msize, self.msize]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "minimap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.screen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, U.screen_channel(), self.ssize, self.ssize]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "screen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.isize]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.valid_non_spatial_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, len(actions.FUNCTIONS)]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "valid_non_spatial_action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.non_spatial_action_selected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, len(actions.FUNCTIONS)]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "non_spatial_action_selected",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.value_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "value_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.valid_args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, len(actions.TYPES)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.valid_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, actions.TYPES[9].sizes[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.valid_queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, actions.TYPES[11].sizes[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.valid_unload",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, actions.TYPES[12].sizes[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "args_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(prob, axis=1) for prob in args_prob]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_102": {
                "variable": {
                    "value": "args_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(args_prob, 1e-10, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "non_spatial_action_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.non_spatial_action * self.non_spatial_action_selected",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "variable": {
                    "value": "valid_non_spatial_action_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.non_spatial_action * self.valid_non_spatial_action",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "valid_non_spatial_action_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "valid_non_spatial_action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.non_spatial_action * self.valid_non_spatial_action, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(valid_non_spatial_action_prob, 1e-10, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_110": {
                "variable": {
                    "value": "non_spatial_action_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(non_spatial_action_prob, 1e-10, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "final_arg_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.valid_args * args_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_120": {
                "variable": {
                    "value": "advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.value_target - self.value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_139": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_148": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_150": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_128": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_norm_145": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "tf.clip_by_norm(grad, 10.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_44": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "args_dict[act_type.id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.ssize ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "args_dict[act_type.id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, act_type.sizes[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "sel_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.args_selected[i] * self.outputs[translations[i]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_87": {
                "variable": {
                    "value": "valid_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.reduce_sum(self.valid_units * self.outputs[translations[i]], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_102": {
                "t": {
                    "value": "args_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat([tf.expand_dims(prob, axis=1) for prob in args_prob], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_110": {
                "t": {
                    "value": "non_spatial_action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.non_spatial_action * self.non_spatial_action_selected, axis=1)",
                            "Call"
                        ],
                        [
                            "non_spatial_action_prob / valid_non_spatial_action_prob",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "histogram_112": {
                "name": {
                    "value": "non_spatial_action_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "non_spatial_action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.non_spatial_action * self.non_spatial_action_selected, axis=1)",
                            "Call"
                        ],
                        [
                            "non_spatial_action_prob / valid_non_spatial_action_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "input_tensor": {
                    "value": "action_log_prob * advantage",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "input_tensor": {
                    "value": "self.value * advantage",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_129": {
                "input_tensor": {
                    "value": "pred * tf.log(pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_131": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_mean(action_log_prob * advantage)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "scalar_132": {
                "name": {
                    "value": "value_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "value_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_mean(self.value * advantage)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "get_variable_scope_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "variable": {
                    "value": "sel_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.args_selected[i] * self.outputs[translations[i]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_91": {
                "variable": {
                    "value": "valid_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.reduce_sum(self.valid_queue * self.outputs[translations[i]], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_101": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_143": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ]
                    ]
                }
            },
            "histogram_144": {
                "name": {
                    "value": "var.op.name + '/grad'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads",
                            "variable"
                        ],
                        [
                            "tf.clip_by_norm(grad, 10.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "self.valid_units * self.outputs[translations[i]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "sel_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.args_selected[i] * self.outputs[translations[i]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_95": {
                "variable": {
                    "value": "valid_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.reduce_sum(self.valid_unload * self.outputs[translations[i]], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_129": {
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(self.outputs[key], 1e-10, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "input_tensor": {
                    "value": "self.valid_queue * self.outputs[translations[i]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "input_tensor": {
                    "value": "self.valid_unload * self.outputs[translations[i]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "self.args_selected[i] * self.outputs[translations[i]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/network.py": {
        "tensorflow": {
            "conv2d_81": {
                "variable": {
                    "value": "mconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(minimap, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_outputs": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "mconv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "mconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(tf.transpose(minimap, [0, 2, 3, 1]), num_outputs=16, kernel_size=5, stride=1, scope='mconv1')",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "mconv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "variable": {
                    "value": "sconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(screen, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_outputs": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "sconv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "sconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(tf.transpose(screen, [0, 2, 3, 1]), num_outputs=16, kernel_size=5, stride=1, scope='sconv1')",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "sconv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "feat_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mconv2, sconv2, tf.reshape(info_projection, [-1, 64, 64, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_115": {
                "variable": {
                    "value": "spatial_choice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mconv2, sconv2, tf.reshape(info_projection, [-1, 64, 64, 1])], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "spatial_choice",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "outputs[spatial_choice]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "layers.flatten(spatial_choice)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "feat_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layers.flatten(mconv2), layers.flatten(sconv2), info_fc]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "variable": {
                    "value": "outputs[value]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "layers.fully_connected(feat_fc, num_outputs=1, activation_fn=None, scope='value')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "a": {
                    "value": "minimap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minimap",
                            "Method Argument"
                        ],
                        [
                            "minimap",
                            "Method Argument"
                        ],
                        [
                            "minimap",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "a": {
                    "value": "screen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "screen",
                            "Method Argument"
                        ],
                        [
                            "screen",
                            "Method Argument"
                        ],
                        [
                            "screen",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_101": {
                "structure": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "info",
                            "Method Argument"
                        ],
                        [
                            "info",
                            "Method Argument"
                        ],
                        [
                            "info",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_107": {
                "structure": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "info",
                            "Method Argument"
                        ],
                        [
                            "info",
                            "Method Argument"
                        ],
                        [
                            "info",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_122": {
                "structure": {
                    "value": "spatial_choice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(feat_conv, num_outputs=1, kernel_size=1, stride=1, activation_fn=None, scope='spatial_choice')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_113": {
                "tensor": {
                    "value": "info_projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(layers.flatten(info), num_outputs=ssize ** 2, activation_fn=tf.tanh, scope='info_projection')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 64, 64, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_125": {
                "structure": {
                    "value": "sconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(sconv1, num_outputs=32, kernel_size=3, stride=1, scope='sconv2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "ConfigProto_147": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_149": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_151": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "LOG",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.log_path + FLAGS.map + '/' + FLAGS.net",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tf_testing.py": {
        "tensorflow": {}
    }
}