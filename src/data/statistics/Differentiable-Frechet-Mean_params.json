{
    "frechet_agg.py": {
        "torch": {
            "stack_27": {
                "variable": {
                    "value": "batched_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batched_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_28": {
                "variable": {
                    "value": "weight_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weight_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(weight_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_25": {
                "input": {
                    "value": "x[si]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, B - len(si))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_26": {
                "input": {
                    "value": "torch.ones_like(si)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, B - len(si))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_26": {
                "input": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[indices[:, 0] == i, -1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "frechetmean/backward/ball_backward.py": {
        "torch": {
            "inverse_89": {
                "variable": {
                    "value": "inv_hess",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hessian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((first_term + sec_term) * w.unsqueeze(-1).unsqueeze(-1)).sum(dim=-3) / -K",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(K).to(X)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(K)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(K).to(X)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(K)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_122": {
                "variable": {
                    "value": "(dx, dw, dK)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "-gradf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(X, w, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(inv_hess @ grad.unsqueeze(-1)).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_71": {
                "n": {
                    "value": "y.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "input": {
                    "value": "(1,) * len(third_const.shape) + (y.shape[-1], y.shape[-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_107": {
                "obj": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(K).to(X)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(K)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "frechetmean/backward/hyperboloid_backward.py": {
        "torch": {
            "diag_26": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([-1.0] + [1 for i in range(term1.shape[-1] - 1)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_35": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hessian(X.clone(), y, w, K)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.clone()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(X.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(K).to(X)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(K)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(K).to(X)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(K)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_98": {
                "variable": {
                    "value": "(dx, dw, dK)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "gradf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradu(X, y, w, K)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(X, w, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(hess_t @ grad.unsqueeze(-1)).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_60": {
                "input": {
                    "value": "X[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_83": {
                "obj": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(K).to(X)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(K)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[-1.0] + [1 for i in range(term1.shape[-1] - 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "frechetmean/forward/ball_forward.py": {
        "torch": {
            "where_9": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y < 1e-12",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * torch.ones_like(y)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2 * arcosh(1 + 2 * y) / (y.pow(2) + y).sqrt()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_8": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "frechetmean/forward/hyperboloid_forward.py": {
        "torch": {}
    },
    "frechetmean/frechet.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "manifold_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "manifold_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(manifold_id)",
                            "Call"
                        ],
                        [
                            "manifold_id.item()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_40": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "frechetmean/manifolds/__init__.py": {
        "torch": {
            "cat_25": {
                "tensors": {
                    "value": "(first_part, sec_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "frechetmean/manifolds/ball.py": {
        "torch": {
            "is_tensor_12": {
                "obj": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_39": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_55": {
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm > maxnorm",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / norm * maxnorm",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "frechetmean/manifolds/hyperboloid.py": {
        "torch": {
            "zeros_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(*shape)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(*shape)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_76": {
                "variable": {
                    "value": "scaling[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_14": {
                "obj": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(*shape)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(torch.zeros_like(x[..., 0]).unsqueeze(-1), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u * v",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u * v",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_111": {
                "input": {
                    "value": "x[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "frechetmean/manifolds/manifold.py": {
        "torch": {
            "triu_indices_70": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "frechetmean/utils.py": {
        "torch": {
            "where_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x < 1 + 1e-07",
                            "Compare"
                        ],
                        [
                            "x < 1 + 1e-07",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "2 * torch.ones_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "~cond",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * arcosh(x) / torch.sqrt(x ** 2 - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x < 1 + 1e-07",
                            "Compare"
                        ],
                        [
                            "x < 1 + 1e-07",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "-2 / 3 * torch.ones_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "~cond",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_14": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sub_14": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(1 - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_14": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 + EPS[x.dtype]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * x - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cosh_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "sinh_73": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_81": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_89": {
                "variable": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_109": {
                "variable": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_29": {
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "positive_case",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + torch.sqrt(1 + x.pow(2))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "negative_case",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (torch.sqrt(1 + x.pow(2)) - x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "x + z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_91": {
                "condition": {
                    "value": "x < EPS[x.dtype]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "2 * torch.ones_like(x)",
                            "BinOp"
                        ],
                        [
                            "-2 / 3 * torch.ones_like(x)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinh(x) / x",
                            "BinOp"
                        ],
                        [
                            "(x * cosh(x) - sinh(x)) / x.pow(2)",
                            "BinOp"
                        ],
                        [
                            "x / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "(1 - x * cosh(x) / sinh(x)) / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "2 * arcosh(x) / (x.pow(2) - 1).sqrt()",
                            "BinOp"
                        ],
                        [
                            "2 / (x.pow(2) - 1) - 2 * x * arcosh(x) / (x.pow(2) - 1).pow(3 / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_111": {
                "condition": {
                    "value": "x < EPS[x.dtype]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "2 * torch.ones_like(x)",
                            "BinOp"
                        ],
                        [
                            "-2 / 3 * torch.ones_like(x)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinh(x) / x",
                            "BinOp"
                        ],
                        [
                            "(x * cosh(x) - sinh(x)) / x.pow(2)",
                            "BinOp"
                        ],
                        [
                            "x / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "(1 - x * cosh(x) / sinh(x)) / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "2 * arcosh(x) / (x.pow(2) - 1).sqrt()",
                            "BinOp"
                        ],
                        [
                            "2 / (x.pow(2) - 1) - 2 * x * arcosh(x) / (x.pow(2) - 1).pow(3 / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_144": {
                "condition": {
                    "value": "x < 1 + EPS[x.dtype]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "2 * torch.ones_like(x)",
                            "BinOp"
                        ],
                        [
                            "-2 / 3 * torch.ones_like(x)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinh(x) / x",
                            "BinOp"
                        ],
                        [
                            "(x * cosh(x) - sinh(x)) / x.pow(2)",
                            "BinOp"
                        ],
                        [
                            "x / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "(1 - x * cosh(x) / sinh(x)) / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "2 * arcosh(x) / (x.pow(2) - 1).sqrt()",
                            "BinOp"
                        ],
                        [
                            "2 / (x.pow(2) - 1) - 2 * x * arcosh(x) / (x.pow(2) - 1).pow(3 / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_27": {
                "input": {
                    "value": "1 + x.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_98": {
                "condition": {
                    "value": "x < EPS[x.dtype]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "2 * torch.ones_like(x)",
                            "BinOp"
                        ],
                        [
                            "-2 / 3 * torch.ones_like(x)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinh(x) / x",
                            "BinOp"
                        ],
                        [
                            "(x * cosh(x) - sinh(x)) / x.pow(2)",
                            "BinOp"
                        ],
                        [
                            "x / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "(1 - x * cosh(x) / sinh(x)) / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "2 * arcosh(x) / (x.pow(2) - 1).sqrt()",
                            "BinOp"
                        ],
                        [
                            "2 / (x.pow(2) - 1) - 2 * x * arcosh(x) / (x.pow(2) - 1).pow(3 / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_118": {
                "condition": {
                    "value": "x < EPS[x.dtype]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "2 * torch.ones_like(x)",
                            "BinOp"
                        ],
                        [
                            "-2 / 3 * torch.ones_like(x)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinh(x) / x",
                            "BinOp"
                        ],
                        [
                            "(x * cosh(x) - sinh(x)) / x.pow(2)",
                            "BinOp"
                        ],
                        [
                            "x / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "(1 - x * cosh(x) / sinh(x)) / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "2 * arcosh(x) / (x.pow(2) - 1).sqrt()",
                            "BinOp"
                        ],
                        [
                            "2 / (x.pow(2) - 1) - 2 * x * arcosh(x) / (x.pow(2) - 1).pow(3 / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_126": {
                "input": {
                    "value": "x ** 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_142": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(cond, 2 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 * arcosh(x) / torch.sqrt(x ** 2 - 1), x)",
                            "Call"
                        ],
                        [
                            "torch.where(cond, -2 / 3 * torch.ones_like(x), x)",
                            "Call"
                        ],
                        [
                            "torch.where(~cond, 2 / (x ** 2 - 1) - 2 * x * arcosh(x) / (x ** 2 - 1) ** (3 / 2), x)",
                            "Call"
                        ],
                        [
                            "x.clamp(-1 + EPS[x.dtype], 1 - EPS[x.dtype])",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, min=1 + EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_151": {
                "condition": {
                    "value": "x < 1 + EPS[x.dtype]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y_stable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "2 * torch.ones_like(x)",
                            "BinOp"
                        ],
                        [
                            "-2 / 3 * torch.ones_like(x)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sinh(x) / x",
                            "BinOp"
                        ],
                        [
                            "(x * cosh(x) - sinh(x)) / x.pow(2)",
                            "BinOp"
                        ],
                        [
                            "x / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "(1 - x * cosh(x) / sinh(x)) / sinh(x)",
                            "BinOp"
                        ],
                        [
                            "2 * arcosh(x) / (x.pow(2) - 1).sqrt()",
                            "BinOp"
                        ],
                        [
                            "2 / (x.pow(2) - 1) - 2 * x * arcosh(x) / (x.pow(2) - 1).pow(3 / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_28": {
                "input": {
                    "value": "1 + x.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "riemannian_batch_norm.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.man.zero_tan(self.man.dim_to_sh(dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "any_69": {
                "input": {
                    "value": "torch.isnan(input_logm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_69": {
                "input": {
                    "value": "input_logm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.man.transp(input_mean, on_manifold, self.man.log(input_mean, x))",
                            "Call"
                        ],
                        [
                            "(self.var / (input_var + 1e-06)).sqrt() * input_logm",
                            "BinOp"
                        ],
                        [
                            "self.man.transp(input_mean, self.running_mean, self.man.log(input_mean, x))",
                            "Call"
                        ],
                        [
                            "(self.running_var / (x.shape[0] / (x.shape[0] - 1) * input_var + 1e-06)).sqrt() * input_logm",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}