{
    "data_util.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "FixedAugmentDataset(hparams['dataset'], hparams['data_dir'], hparams['prop_augment'], train=True, transforms=transform_train, more_transforms=m_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hparams['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "val_augment_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "FixedAugmentDataset(hparams['dataset'], hparams['data_dir'], hparams['prop_augment'], train=False, transforms=transform_test, more_transforms=m_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hparams['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "val_clean_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.__dict__[hparams['dataset'].upper()](hparams['data_dir'], train=False, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hparams['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TransformOnlyDataset(length, n_classes, m_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_213": {
                "variable": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "small_patterns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes, num_patterns, 3, patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_18": {
                "input": {
                    "value": "x.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/wideresnet.py": {
        "torch": {
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_110": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x) + noise_level * torch.randn(x.size(2), x.size(3)).view(1, 1, x.size(2), x.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "self.relu2(bn2 + noise_level * torch.randn(bn2.size(2), bn2.size(3)).view(1, 1, bn2.size(2), bn2.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block2.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block3.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.relu(bn1 + noise_level * torch.randn(bn1.size(2), bn1.size(3)).view(1, 1, bn1.size(2), bn1.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_123": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x) + noise_level * torch.randn(x.size(2), x.size(3)).view(1, 1, x.size(2), x.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "self.relu2(bn2 + noise_level * torch.randn(bn2.size(2), bn2.size(3)).view(1, 1, bn2.size(2), bn2.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block2.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block3.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.relu(bn1 + noise_level * torch.randn(bn1.size(2), bn1.size(3)).view(1, 1, bn1.size(2), bn1.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x) + noise_level * torch.randn(x.size(2), x.size(3)).view(1, 1, x.size(2), x.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "self.relu2(bn2 + noise_level * torch.randn(bn2.size(2), bn2.size(3)).view(1, 1, bn2.size(2), bn2.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block2.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block3.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.relu(bn1 + noise_level * torch.randn(bn1.size(2), bn1.size(3)).view(1, 1, bn1.size(2), bn1.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_32": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x) + noise_level * torch.randn(x.size(2), x.size(3)).view(1, 1, x.size(2), x.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "self.relu2(bn2 + noise_level * torch.randn(bn2.size(2), bn2.size(3)).view(1, 1, bn2.size(2), bn2.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block2.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block3.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.relu(bn1 + noise_level * torch.randn(bn1.size(2), bn1.size(3)).view(1, 1, bn1.size(2), bn1.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x) + noise_level * torch.randn(x.size(2), x.size(3)).view(1, 1, x.size(2), x.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "self.relu2(bn2 + noise_level * torch.randn(bn2.size(2), bn2.size(3)).view(1, 1, bn2.size(2), bn2.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block2.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block3.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.relu(bn1 + noise_level * torch.randn(bn1.size(2), bn1.size(3)).view(1, 1, bn1.size(2), bn1.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_50": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x) + noise_level * torch.randn(x.size(2), x.size(3)).view(1, 1, x.size(2), x.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "self.relu2(bn2 + noise_level * torch.randn(bn2.size(2), bn2.size(3)).view(1, 1, bn2.size(2), bn2.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block2.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.block3.forward_noise(out, noise_level)",
                            "Call"
                        ],
                        [
                            "self.relu(bn1 + noise_level * torch.randn(bn1.size(2), bn1.size(3)).view(1, 1, bn1.size(2), bn1.size(3)).cuda())",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "bn2.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "bn2.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_121": {
                "*size": {
                    "value": "bn1.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "bn1.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_37": {
                "*size": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "save_util.py": {
        "torch": {
            "load_22": {
                "f": {
                    "value": "data_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'scalar_dict.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'scalar_dict.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_48": {
                "obj": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_53": {
                "obj": {
                    "value": "data_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'scalar_dict.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'scalar_dict.pkl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_cifar.py": {
        "torch": {
            "CrossEntropyLoss_107": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_patches.py": {
        "torch": {
            "CrossEntropyLoss_42": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_util.py": {
        "torch": {}
    },
    "update_loss_util.py": {
        "torch": {}
    }
}