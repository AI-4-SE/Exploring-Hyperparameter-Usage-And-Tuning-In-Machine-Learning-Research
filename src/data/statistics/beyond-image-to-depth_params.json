{
    "data_loader/audio_visual_dataset.py": {
        "torch": {}
    },
    "data_loader/custom_dataset_data_loader.py": {
        "torch": {}
    },
    "models/audioVisual_model.py": {
        "torch": {}
    },
    "models/criterion.py": {
        "torch": {
            "mean_18": {
                "variable": {
                    "value": "err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(errs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "weight * torch.abs(pred - target)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_41": {
                "input": {
                    "value": "weight * torch.pow(pred - target, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_49": {
                "input": {
                    "value": "torch.log(torch.abs(pred - target) + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_56": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_63": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[0].new_ones(1)",
                            "Call"
                        ],
                        [
                            "preds.new_ones(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_70": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds[0].new_ones(1)",
                            "Call"
                        ],
                        [
                            "preds.new_ones(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_49": {
                "input": {
                    "value": "torch.abs(pred - target) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_18": {
                "tensors": {
                    "value": "errs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self._forward(preds[n], targets[n], weight[n]) for n in range(N)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "abs_33": {
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_41": {
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_49": {
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/models.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_15": {
                "f": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_26": {
                "f": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_36": {
                "f": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_43": {
                "f": {
                    "value": "init_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_61": {
                "f": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "downconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_9": {
                "variable": {
                    "value": "downrelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_14": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "uprelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "*args": {
                    "value": "*[downconv, downnorm, downrelu]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.feature_extraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Bilinear_130": {
                "variable": {
                    "value": "self.attention_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_out_nc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Bilinear_131": {
                "variable": {
                    "value": "self.attention_material",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_out_nc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "audioVisual_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attentionImg, attentionMat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_193": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "*args": {
                    "value": "*[upconv, upnorm, uprelu]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "*args": {
                    "value": "*[upconv, nn.Sigmoid()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "(rgbdepth_upconv1feature, rgbdepth_conv4feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "(rgbdepth_upconv2feature, rgbdepth_conv3feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "(rgbdepth_upconv3feature, rgbdepth_conv2feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "(rgbdepth_upconv4feature, rgbdepth_conv1feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {}
    },
    "test.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_30": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AudioVisualModel(nets, opt)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=opt.gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "opt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_84": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AudioVisualModel(nets, opt)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=opt.gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "opt.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_20": {
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': net_rgbdepth.parameters(), 'lr': opt.lr_visual}, {'params': net_audiodepth.parameters(), 'lr': opt.lr_audio}, {'params': net_attention.parameters(), 'lr': opt.lr_attention}, {'params': net_material.parameters(), 'lr': opt.lr_material}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "opt.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "net_rgbdepth.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.expr_dir, 'rgbdepth_' + opt.dataset + '_epoch_' + str(epoch) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "net_audiodepth.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.expr_dir, 'audiodepth_' + opt.dataset + '_epoch_' + str(epoch) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "net_attention.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.expr_dir, 'attention_' + opt.dataset + '_epoch_' + str(epoch) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "net_material.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.expr_dir, 'material_' + opt.dataset + '_epoch_' + str(epoch) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_22": {
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': net_rgbdepth.parameters(), 'lr': opt.lr_visual}, {'params': net_audiodepth.parameters(), 'lr': opt.lr_audio}, {'params': net_attention.parameters(), 'lr': opt.lr_attention}, {'params': net_material.parameters(), 'lr': opt.lr_material}]",
                            "List"
                        ]
                    ]
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "net_rgbdepth.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.expr_dir, 'rgbdepth_' + opt.dataset + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "net_audiodepth.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.expr_dir, 'audiodepth_' + opt.dataset + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "net_attention.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.expr_dir, 'attention_' + opt.dataset + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "net_material.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(opt.expr_dir, 'material_' + opt.dataset + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}