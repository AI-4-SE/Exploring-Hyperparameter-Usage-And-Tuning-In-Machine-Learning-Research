{
    "eval_vggsound.py": {
        "sklearn": {},
        "torch": {
            "zeros_28": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "309",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_40": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "InMemorySpectrogramDataset(args.lmdb_path, args, lbl_map, model.hparams.cfg['audio_config'], mode='multiclass', augment=False, mixer=None, transform=val_tfs, is_val=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "_collate_fn_multiclass",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "gts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gts)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_63": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_64": {
                "variable": {
                    "value": "(_, topk_predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/esc50_lightning.py": {
        "sklearn": {},
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "val_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.val_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "val_gts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.val_gts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_122": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "val_preds.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "correct / val_gts.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.cfg['opt']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "prefetch_factor": {
                    "value": "self.hparams.prefetch_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "dataset": {
                    "value": "self.val_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.cfg['opt']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.hparams.cw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(self.hparams.cw)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(self.hparams.cw)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('lr', 0.001))",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('weight_decay', 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_140": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=lr, nesterov=True, momentum=0.9, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "self.net.eval().cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('lr', 0.001))",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('weight_decay', 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_143": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=lr, nesterov=True, momentum=0.9, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/gise_mixtures_lightning.py": {
        "sklearn": {
            "average_precision_score_146": {
                "variable": {
                    "value": "map_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_gts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(self.val_gts, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "val_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(self.val_predictions, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "sigmoid_138": {
                "variable": {
                    "value": "y_pred_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self(x)",
                            "Call"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_144": {
                "variable": {
                    "value": "val_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.val_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "val_gts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.val_gts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.cfg['opt']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "prefetch_factor": {
                    "value": "self.hparams.prefetch_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "dataset": {
                    "value": "self.val_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.cfg['opt']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(self.hparams.cw)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(self.hparams.cw)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('lr', 0.001))",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('weight_decay', 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_162": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=lr, nesterov=True, momentum=0.9, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "self.net.eval().cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.hparams.cw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "map_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "average_precision_score(val_gts, val_preds, average='macro')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('lr', 0.001))",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('weight_decay', 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_165": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=lr, nesterov=True, momentum=0.9, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.hparams.cw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_88": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(self.hparams.cw)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.load(self.hparams.cw)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_90": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.hparams.cw",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utilities/metrics_helper.py": {
        "sklearn": {
            "average_precision_score_65": {
                "variable": {
                    "value": "avg_precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "roc_auc_score_69": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "precision_recall_curve_72": {
                "variable": {
                    "value": "(precisions, recalls, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "output[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_curve_76": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output[:, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "eval_all_mixtures.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "InMemorySpectrogramDataset(args.lmdb_path, args.lbl_map, model.hparams.cfg['audio_config'], transform=val_tfs, is_val=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "test_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_predictions, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "test_gts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_gts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_gts, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "sigmoid_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval_gise_mixtures.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "InMemorySpectrogramDataset(args.lmdb_path, args.lbl_map, model.hparams.cfg['audio_config'], transform=val_tfs, is_val=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "test_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_predictions, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "test_gts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_gts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(test_gts, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "sigmoid_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_mixtures.py": {
        "torch": {
            "tensor_69": {
                "variable": {
                    "value": "instance_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[cw[lbl_map[ix]] for ix in labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.cw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "multinomial_101": {
                "variable": {
                    "value": "pick",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "instance_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([cw[lbl_map[ix]] for ix in labels])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/audio_parser.py": {
        "torch": {
            "hann_window_31": {
                "variable": {
                    "value": "self.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "window_length": {
                    "value": "self.win_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_56": {
                "variable": {
                    "value": "spec_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spectrogram(x, 0, self.window, self.n_fft, self.hop_length, self.win_length, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/dataset.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "self.prefetched_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.prefetched_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "label_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labels_map)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/esc_50_lmdb.py": {
        "torch": {
            "tensor_168": {
                "data": {
                    "value": "lbls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unpacked[1]",
                            "Subscript"
                        ],
                        [
                            "self.label_strings[index]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/functional_utils.py": {
        "torch": {
            "stft_46": {
                "variable": {
                    "value": "spec_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(waveform, (pad, pad), 'constant')",
                            "Call"
                        ],
                        [
                            "waveform.reshape(-1, shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "n_fft",
                    "type": "Variable",
                    "possible_values": []
                },
                "hop_length": {
                    "value": "hop_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "win_length": {
                    "value": "win_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "window": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": []
                },
                "center": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pad_mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_complex": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_39": {
                "variable": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(waveform, (pad, pad), 'constant')",
                            "Call"
                        ],
                        [
                            "waveform.reshape(-1, shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/inmemory_lmdb_dataset.py": {
        "torch": {
            "zeros_191": {
                "variable": {
                    "value": "label_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labels_map)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/lmdb_dataset.py": {
        "torch": {
            "zeros_139": {
                "variable": {
                    "value": "label_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labels_map)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/mixup.py": {
        "torch": {
            "from_numpy_19": {
                "variable": {
                    "value": "lam",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "random_state.beta(alpha, alpha, bsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_21": {
                "variable": {
                    "value": "perms",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "bsize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/spectrogram.py": {
        "torch": {
            "log1p_64": {
                "variable": {
                    "value": "spec_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.abs()",
                            "Call"
                        ],
                        [
                            "torch.log1p(spec_real)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data/transforms.py": {
        "torch": {
            "from_numpy_167": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image + gauss",
                            "BinOp"
                        ],
                        [
                            "t(image)",
                            "Call"
                        ],
                        [
                            "self.transform(image)",
                            "Call"
                        ],
                        [
                            "transform(image)",
                            "Call"
                        ],
                        [
                            "cv2.flip(image, self.flip_code)",
                            "Call"
                        ],
                        [
                            "gauss_noise(image, np.random.uniform(0, self.sigma_sq))",
                            "Call"
                        ],
                        [
                            "np.stack([image, delta, accelerate], axis=0)",
                            "Call"
                        ],
                        [
                            "image.astype(np.float32) / 100",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/utils.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "minibatch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ],
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "freq_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ],
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "max_seqlength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ],
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "inputs_complex",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(minibatch_size, 1, freq_size, max_seqlength)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(minibatch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "minibatch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ],
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "freq_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ],
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "max_seqlength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ],
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "inputs_complex",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(minibatch_size, 1, freq_size, max_seqlength)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset.py": {
        "torch": {
            "zeros_190": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "minibatch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ],
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "freq_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ],
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "max_seqlength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ],
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_191": {
                "variable": {
                    "value": "inputs_complex",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(minibatch_size, 1, freq_size, max_seqlength)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(minibatch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "minibatch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ],
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "freq_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ],
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "max_seqlength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ],
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "inputs_complex",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(minibatch_size, 1, freq_size, max_seqlength)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "self.prefetched_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.prefetched_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "label_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labels_map)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset_v2.py": {
        "torch": {
            "zeros_117": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "minibatch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "freq_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(0)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "max_seqlength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "longest_sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "inputs_complex",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(minibatch_size, 1, freq_size, max_seqlength)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "label_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labels_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "librosa.stft(normalizedy, n_fft=511, hop_length=380)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/fsd_eval_dataset.py": {
        "torch": {
            "cat_96": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "label_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.labels_map)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/classifier_lightning.py": {
        "torch": {
            "cat_117": {
                "variable": {
                    "value": "val_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.val_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "val_gts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.val_gts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_119": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "val_preds.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "correct / val_gts.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "dataset": {
                    "value": "self.train_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.cfg['opt']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "prefetch_factor": {
                    "value": "self.hparams.prefetch_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "dataset": {
                    "value": "self.val_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.hparams.cfg['opt']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.hparams.cw",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(self.hparams.cw)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "cw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(self.hparams.cw)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('lr', 0.001))",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('weight_decay', 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_137": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=lr, nesterov=True, momentum=0.9, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "self.net.eval().cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('lr', 0.001))",
                            "Call"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.hparams.cfg['opt'].get('weight_decay', 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_140": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=lr, weight_decay=wd)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=lr, nesterov=True, momentum=0.9, weight_decay=wd)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/densenet.py": {
        "torch": {
            "cat_52": {
                "variable": {
                    "value": "concated_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(1, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_217": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_218": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_219": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_96": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2(self.relu2(self.norm2(bottleneck_output)))",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(features)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_139": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_177": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/efficientnet_pytorch/model.py": {
        "torch": {
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_215": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_216": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self._global_params.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_115": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(start_dim=1)",
                            "Call"
                        ],
                        [
                            "self._dropout(x)",
                            "Call"
                        ],
                        [
                            "self._fc(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "input": {
                    "value": "x_squeezed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_reduce(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._swish(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._se_expand(x_squeezed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/efficientnet_pytorch/utils.py": {
        "torch": {
            "floor_147": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + torch.rand([batch_size, 1, 1, 1], dtype=inputs.dtype, device=inputs.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_146": {
                "*size": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_340": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_593": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_240": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_241": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_264": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_267": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_310": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_311": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_334": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_336": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_64": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/model_helper.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.get('pretrained', '')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "model.linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "opt['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "model.linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pretrained_fc",
                            "Name"
                        ],
                        [
                            "opt['num_classes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "model.linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "opt['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "model.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "model.linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "opt['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "model._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "model.linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "opt['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/netvlad.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_clusters, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(2.0 * self.alpha * self.centroids).unsqueeze(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-self.alpha * self.centroids.norm(dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "soft_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_assign",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x).view(N, self.num_clusters, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(soft_assign, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_61": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "residual.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_63": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "residual.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/resnet.py": {
        "torch": {
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_96": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8192 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/vanilla_cifar_resnet.py": {
        "torch": {
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_108": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_135": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.relu2(out)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_75": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/optim/focal_loss.py": {
        "torch": {}
    }
}