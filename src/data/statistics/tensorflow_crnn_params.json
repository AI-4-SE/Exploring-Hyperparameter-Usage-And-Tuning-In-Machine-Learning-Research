{
    "crnn_model/cnn_basenet.py": {
        "tensorflow": {
            "moments_206": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(1, len(shape)))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_256": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axis",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 2] if data_format == 'NHWC' else [2, 3]",
                            "IfExp"
                        ],
                        [
                            "[1, 2]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_261": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, channnel, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, channnel]",
                            "List"
                        ],
                        [
                            "[1, channnel]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, ch]",
                            "List"
                        ],
                        [
                            "[1, ch, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_263": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, channnel, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, channnel]",
                            "List"
                        ],
                        [
                            "[1, channnel]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, ch]",
                            "List"
                        ],
                        [
                            "[1, ch, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "dense_305": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "lambda x: nl(x, name='output')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "w_init",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "units": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_340": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[kernel_size[0], kernel_size[1]] + [in_channel / split, out_channel]",
                            "BinOp"
                        ],
                        [
                            "[kernel_size, kernel_size] + [in_channel / split, out_channel]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "w_init",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_108": {
                "features": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_118": {
                "x": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_150": {
                "value": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "[1, kernel_size[0], kernel_size[1], 1] if data_format == 'NHWC' else [1, 1, kernel_size[0], kernel_size[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, kernel_size, kernel_size, 1] if data_format == 'NHWC' else [1, 1, kernel_size, kernel_size]",
                            "IfExp"
                        ],
                        [
                            "[1, kernel_size, kernel_size, 1] if data_format == 'NHWC' else [1, 1, kernel_size, kernel_size]",
                            "IfExp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_172": {
                "value": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "[1, kernel_size[0], kernel_size[1], 1] if data_format == 'NHWC' else [1, 1, kernel_size[0], kernel_size[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, kernel_size, kernel_size, 1] if data_format == 'NHWC' else [1, 1, kernel_size, kernel_size]",
                            "IfExp"
                        ],
                        [
                            "[1, kernel_size, kernel_size, 1] if data_format == 'NHWC' else [1, 1, kernel_size, kernel_size]",
                            "IfExp"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_189": {
                "input_tensor": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 2] if data_format == 'NHWC' else [2, 3]",
                            "IfExp"
                        ],
                        [
                            "[1, 2]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_218": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channnel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, channnel, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, channnel]",
                            "List"
                        ],
                        [
                            "[1, channnel]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, ch]",
                            "List"
                        ],
                        [
                            "[1, ch, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_223": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channnel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, channnel, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, channnel]",
                            "List"
                        ],
                        [
                            "[1, channnel]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, ch]",
                            "List"
                        ],
                        [
                            "[1, ch, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_226": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_228": {
                "x": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_265": {
                "x": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [channnel], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [ch], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [channnel], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [ch], initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_277": {
                "x": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "inputdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(np.prod(shape))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "inputdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([tf.shape(inputdata)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_303": {
                "variable": {
                    "value": "b_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_378": {
                "variable": {
                    "value": "moving_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (ndim - 1) + [c]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_379": {
                "variable": {
                    "value": "moving_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (ndim - 1) + [c]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_403": {
                "input": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, 2] if data_format == 'NHWC' else [2, 3]",
                            "IfExp"
                        ],
                        [
                            "[1, 2]",
                            "List"
                        ],
                        [
                            "[2, 3]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_79": {
                "variable": {
                    "value": "b_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "b_init",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_88": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_90": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "channel_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "split_91": {
                "variable": {
                    "value": "kernels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, initializer=w_init)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.conv2d(i, k, strides, padding, data_format=data_format) for (i, k) in zip(inputs, kernels)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "channel_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "divide_259": {
                "x": {
                    "value": "inputdata - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(var + epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "batch_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_359": {
                "variable": {
                    "value": "(m, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "range(ndim - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_384": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "training",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "testing",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_259": {
                "x": {
                    "value": "var + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_263": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_298": {
                "values": {
                    "value": "[tf.shape(inputdata)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_349": {
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "assign_add_351": {
                "ref": {
                    "value": "_orig_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "_scaled_diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1 - _momentum) * (_new_val - _orig_val)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_362": {
                "name": {
                    "value": "update_ops",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "update_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_assign_moving_average(moving_m, m, momentum, 'update_mean')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_363": {
                "name": {
                    "value": "update_ops",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "update_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_assign_moving_average(moving_v, v, momentum, 'update_var')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_387": {
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (ndim - 1) + [c]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_390": {
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (ndim - 1) + [c]",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride[0], stride[1], 1] if data_format == 'NHWC' else [1, 1, stride[0], stride[1]]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ],
                        [
                            "[1, stride, stride, 1] if data_format == 'NHWC' else [1, 1, stride, stride]",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "padding.upper()",
                            "Call"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_96": {
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputdata, w, strides, padding, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.concat(outputs, channel_axis)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_variable('b', [out_channel], initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ],
                        [
                            "'NHWC'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_223": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_374": {
                "x": {
                    "value": "v + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_366": {
                "control_inputs": {
                    "value": "[update_m, update_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_369": {
                "x": {
                    "value": "v + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_298": {
                "input": {
                    "value": "inputdata",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(inputdata, [-1, int(np.prod(shape))])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputdata, tf.stack([tf.shape(inputdata)[0], -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_367": {
                "x": {
                    "value": "v + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "crnn_model/crnn_model.py": {
        "tensorflow": {
            "constant_50": {
                "variable": {
                    "value": "self._train_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "self._test_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "test",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_52": {
                "variable": {
                    "value": "self._is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._train_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_214": {
                "variable": {
                    "value": "stack_lstm_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self._is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "rnn_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "stack_lstm_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(self._is_training, f1, f2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_nums]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_223": {
                "variable": {
                    "value": "var_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([hidden_nums, self._num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.fully_connected(inputs=rnn_reshaped, num_outputs=self._num_classes, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_s, -1, self._num_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs=rnn_reshaped, num_outputs=self._num_classes, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_s, -1, self._num_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_s, -1, self._num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_237": {
                "variable": {
                    "value": "rnn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.fully_connected(inputs=rnn_reshaped, num_outputs=self._num_classes, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_s, -1, self._num_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs=rnn_reshaped, num_outputs=self._num_classes, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_s, -1, self._num_classes])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "transpose_time_major",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_266": {
                "variable": {
                    "value": "stack_gru_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self._is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f3",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "f4",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "rnn_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "stack_gru_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(self._is_training, f3, f4)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_nums]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_274": {
                "variable": {
                    "value": "var_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([hidden_nums, self._num_classes], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.fully_connected(inputs=rnn_reshaped, num_outputs=self._num_classes, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_s, -1, self._num_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs=rnn_reshaped, num_outputs=self._num_classes, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_s, -1, self._num_classes])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_s, -1, self._num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_289": {
                "variable": {
                    "value": "rnn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.fully_connected(inputs=rnn_reshaped, num_outputs=self._num_classes, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_s, -1, self._num_classes])",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(inputs=rnn_reshaped, num_outputs=self._num_classes, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [batch_s, -1, self._num_classes])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "transpose_time_major",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "cnn_subnetwork",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "cnn_subnetwork",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "LSTMLayers",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "GRULayers",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_191": {
                "num_units": {
                    "value": "nh",
                    "type": "Variable",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_194": {
                "num_units": {
                    "value": "nh",
                    "type": "Variable",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_223": {
                "shape": {
                    "value": "[hidden_nums, self._num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_243": {
                "units": {
                    "value": "nh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_246": {
                "units": {
                    "value": "nh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "truncated_normal_274": {
                "shape": {
                    "value": "[hidden_nums, self._num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/lib/fast_rcnn/train.py": {
        "tensorflow": {
            "ConfigProto_220": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_27": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "write_version": {
                    "value": "tf.train.SaverDef.V2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "log_image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "log_image_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_88": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_94": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_74": {
                "name": {
                    "value": "_ops.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "log_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gen_logging_ops._image_summary(log_image_name, tf.expand_dims(log_image_data, 0), max_images=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_84": {
                "name": {
                    "value": "rpn_reg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "rpn_loss_box",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_85": {
                "name": {
                    "value": "rpn_cls_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "rpn_cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_86": {
                "name": {
                    "value": "model_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "model_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_96": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_107": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_108": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(total_loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_223": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_73": {
                "input": {
                    "value": "log_image_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, [None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_98": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_102": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg.TRAIN.MOMENTUM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_initializer_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_129": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "bbox_pred",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_108": {
                "ys": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_145": {
                "ref": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lr.eval() * cfg.TRAIN.GAMMA",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/lib/networks/VGGnet_test.py": {
        "tensorflow": {
            "placeholder_9": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_10": {
                "variable": {
                    "value": "self.im_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/lib/networks/VGGnet_train.py": {
        "tensorflow": {
            "placeholder_10": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "data",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.im_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "im_info",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.gt_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.gt_ishard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_ishard",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.dontcare_areas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dontcare_areas",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/lib/networks/network.py": {
        "tensorflow": {
            "shape_251": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_275": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_330": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_338": {
                "variable": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_382": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.get_output('rpn_cls_score_reshape')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_383": {
                "variable": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.get_output('rpn-data')[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_385": {
                "variable": {
                    "value": "fg_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rpn_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn-data')[0], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_label, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_386": {
                "variable": {
                    "value": "rpn_keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(rpn_label, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_387": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rpn_cls_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn_cls_score_reshape'), [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_cls_score, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_388": {
                "variable": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rpn_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn-data')[0], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_label, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_389": {
                "variable": {
                    "value": "rpn_cross_entropy_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "rpn_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn-data')[0], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_label, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "rpn_cls_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn_cls_score_reshape'), [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_cls_score, rpn_keep)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_396": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(rpn_bbox_pred, [-1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_397": {
                "variable": {
                    "value": "rpn_bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(rpn_bbox_targets, [-1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_398": {
                "variable": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(rpn_bbox_inside_weights, [-1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_399": {
                "variable": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(rpn_bbox_outside_weights, [-1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_401": {
                "variable": {
                    "value": "rpn_loss_box_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rpn_bbox_outside_weights * self.smooth_l1_dist(rpn_bbox_inside_weights * (rpn_bbox_pred - rpn_bbox_targets))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_405": {
                "variable": {
                    "value": "rpn_cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rpn_cross_entropy_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=rpn_label, logits=rpn_cls_score)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_410": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.shape(img)",
                            "Call"
                        ],
                        [
                            "tf.shape(img)",
                            "Call"
                        ],
                        [
                            "tf.shape(input)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_94": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H, W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_99": {
                "variable": {
                    "value": "lstm_fw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_100": {
                "variable": {
                    "value": "lstm_bw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_102": {
                "variable": {
                    "value": "(lstm_out, last_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstm_fw_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstm_bw_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H * W, 2 * d_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_108": {
                "variable": {
                    "value": "init_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_109": {
                "variable": {
                    "value": "init_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(lstm_out, weights) + biases",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [N, H, W, d_o])",
                            "Call"
                        ],
                        [
                            "tf.matmul(lstm_out, weights) + biases",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [N, H, W, d_o])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, H, W, d_o]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_122": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H, W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_127": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_130": {
                "variable": {
                    "value": "(lstm_out, last_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lstm_cell.zero_state(N * H, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "lstm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H * W, d_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_136": {
                "variable": {
                    "value": "init_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_137": {
                "variable": {
                    "value": "init_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(lstm_out, weights) + biases",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [N, H, W, d_o])",
                            "Call"
                        ],
                        [
                            "tf.matmul(lstm_out, weights) + biases",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [N, H, W, d_o])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, H, W, d_o]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_150": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H * W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_154": {
                "variable": {
                    "value": "init_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_155": {
                "variable": {
                    "value": "init_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_172": {
                "variable": {
                    "value": "init_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_173": {
                "variable": {
                    "value": "init_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_191": {
                "features": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_196": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_205": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "py_func_218": {
                "variable": {
                    "value": "(blob, bbox_delta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_layer_py",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[input[0], input[1], input[2], cfg_key, _feat_stride, anchor_scales]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_221": {
                "variable": {
                    "value": "rpn_rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(blob, [-1, 5])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rpn_rois",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_222": {
                "variable": {
                    "value": "rpn_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rpn_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "py_func_237": {
                "variable": {
                    "value": "(rpn_labels, rpn_bbox_targets, rpn_bbox_inside_weights, rpn_bbox_outside_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "anchor_target_layer_py",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_241": {
                "variable": {
                    "value": "rpn_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(rpn_labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rpn_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_242": {
                "variable": {
                    "value": "rpn_bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rpn_bbox_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(rpn_bbox_targets, name='rpn_bbox_targets')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[1]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_targets, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rpn_bbox_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_243": {
                "variable": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(rpn_bbox_inside_weights, name='rpn_bbox_inside_weights')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[2]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_inside_weights, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_244": {
                "variable": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(rpn_bbox_outside_weights, name='rpn_bbox_outside_weights')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[3]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_outside_weights, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_277": {
                "tensor": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0], input_shape[1], -1, int(d)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "local_response_normalization_286": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_295": {
                "concat_dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_340": {
                "tensor": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_346": {
                "x": {
                    "value": "input[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "input[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_359": {
                "x": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_373": {
                "variable": {
                    "value": "deltas_abs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_374": {
                "variable": {
                    "value": "smoothL1_sign",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(deltas_abs, 1.0 / sigma2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_161": {
                "tensor": {
                    "value": "_O",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(input, kernel) + biases",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, H, W, int(d_o)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_169": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_257": {
                "a": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_265": {
                "a": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "feed_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(input, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_314": {
                "variable": {
                    "value": "init_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_315": {
                "variable": {
                    "value": "init_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_317": {
                "variable": {
                    "value": "init_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_318": {
                "variable": {
                    "value": "init_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "tensor": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_334": {
                "logits": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_340": {
                "logits": {
                    "value": "tf.reshape(input, [-1, input_shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_353": {
                "features": {
                    "value": "temp_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(input, scale=True, center=True, is_training=is_training, scope=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_364": {
                "variable": {
                    "value": "l2_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_decay",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_372": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "not_equal_386": {
                "x": {
                    "value": "rpn_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn-data')[0], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_label, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_396": {
                "tensor": {
                    "value": "rpn_bbox_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.get_output('rpn_bbox_pred')",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_pred, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_397": {
                "tensor": {
                    "value": "rpn_bbox_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(rpn_bbox_targets, name='rpn_bbox_targets')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[1]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_targets, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_398": {
                "tensor": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(rpn_bbox_inside_weights, name='rpn_bbox_inside_weights')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[2]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_inside_weights, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_399": {
                "tensor": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(rpn_bbox_outside_weights, name='rpn_bbox_outside_weights')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[3]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_outside_weights, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_404": {
                "input_tensor": {
                    "value": "tf.cast(fg_keep, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_411": {
                "inputs": {
                    "value": "regularization_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_dict",
                            "Name"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "a": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.make_var('weights', [2 * d_h, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [d_h, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [dim, num_out], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_141": {
                "a": {
                    "value": "lstm_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.make_var('weights', [2 * d_h, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [d_h, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [dim, num_out], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_160": {
                "a": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.make_var('weights', [d_i, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [k_h, k_w, c_i, c_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_180": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [c_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], init_biases, trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_182": {
                "value": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [c_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], init_biases, trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "tensor": {
                    "value": "blob",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_241": {
                "x": {
                    "value": "rpn_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(tf.cast(rpn_labels, tf.int32), name='rpn_labels')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_257": {
                "tensor": {
                    "value": "tf.transpose(input, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_shape[0], int(d), tf.cast(tf.cast(input_shape[1], tf.float32) / tf.cast(d, tf.float32) * tf.cast(input_shape[3], tf.float32), tf.int32), input_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "tensor": {
                    "value": "tf.transpose(input, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_shape[0], int(d), tf.cast(tf.cast(input_shape[1], tf.float32) * (tf.cast(input_shape[3], tf.float32) / tf.cast(d, tf.float32)), tf.int32), input_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_332": {
                "logits": {
                    "value": "tf.reshape(input, [-1, input_shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_363": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "l2_regularizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_368": {
                "x": {
                    "value": "l2_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight_decay, dtype=tensor.dtype.base_dtype, name='weight_decay')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.nn.l2_loss(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_374": {
                "x": {
                    "value": "deltas_abs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.abs(deltas)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "subkey",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_dict[key]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_181": {
                "features": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_186": {
                "features": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_309": {
                "a": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_368": {
                "t": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_376": {
                "x": {
                    "value": "smoothL1_sign - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_404": {
                "x": {
                    "value": "fg_keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(rpn_label, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_260": {
                "x": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape[1:].as_list()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_268": {
                "x": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_shape[1:].as_list()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_375": {
                "x": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn_crnn.py": {
        "tensorflow": {}
    },
    "demo.py": {
        "tensorflow": {
            "ConfigProto_21": {
                "variable": {
                    "value": "self.config",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1, 'CPU': 4}",
                    "type": "Dict",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_22": {
                "variable": {
                    "value": "g_ctpn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_23": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_ctpn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "self.config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_30": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_33": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "cfg.TEST.checkpoints_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "local_utils/data_utils.py": {
        "tensorflow": {
            "shuffle_batch_300": {
                "variable": {
                    "value": "(inputdata, input_labels, input_imagenames)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[imgs, labels, img_names]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 2 * config.cfg.TRAIN.BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_305": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_307": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_308": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_235": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecords_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[ops.join(tfrecords_dir, tmp) for tmp in os.listdir(tfrecords_dir) if re.match(re_patten, tmp)]",
                            "ListComp"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TFRecordReader_236": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_239": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'images': tf.FixedLenFeature(shape=(), dtype=tf.string), 'imagenames': tf.FixedLenFeature(shape=[1], dtype=tf.string), 'labels': tf.VarLenFeature(dtype=tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_246": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['images']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_247": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['images'], tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, config.cfg.TRAIN.IMAGE_WIDTH, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_250": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['labels']",
                            "Subscript"
                        ],
                        [
                            "tf.cast(labels, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_68": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_85": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_99": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_186": {
                "path": {
                    "value": "tfrecords_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Features_188": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "{'labels': self.int64_feature(labels[index]), 'images': self.bytes_feature(image), 'imagenames': self.bytes_feature(imagenames[index])}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Example_193": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Features(feature={'labels': self.int64_feature(labels[index]), 'images': self.bytes_feature(image), 'imagenames': self.bytes_feature(imagenames[index])})",
                            "Call"
                        ],
                        [
                            "tf.parse_single_example(serialized_example, features={'images': tf.FixedLenFeature(shape=(), dtype=tf.string), 'imagenames': tf.FixedLenFeature(shape=[1], dtype=tf.string), 'labels': tf.VarLenFeature(dtype=tf.int64)})",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_68": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value_tmp",
                            "Name"
                        ],
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value_tmp",
                            "Name"
                        ],
                        [
                            "value.encode('utf-8')",
                            "Call"
                        ],
                        [
                            "[val.encode('utf-8') for val in value]",
                            "ListComp"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_85": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value_tmp",
                            "Name"
                        ],
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value_tmp",
                            "Name"
                        ],
                        [
                            "value.encode('utf-8')",
                            "Call"
                        ],
                        [
                            "[val.encode('utf-8') for val in value]",
                            "ListComp"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_99": {
                "value": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value_tmp",
                            "Name"
                        ],
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value_tmp",
                            "Name"
                        ],
                        [
                            "value.encode('utf-8')",
                            "Call"
                        ],
                        [
                            "[val.encode('utf-8') for val in value]",
                            "ListComp"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FixedLenFeature_241": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_242": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_243": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "local_utils/tensorboard_vis_summary.py": {
        "tensorflow": {
            "split_60": {
                "variable": {
                    "value": "feature_map_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "feature_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "size_splits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[3 for _ in range(range_stop)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "feature_map_concats",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "feature_map_concats_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "histogram_34": {
                "variable": {
                    "value": "ret[tensor_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "tensor_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_65": {
                "variable": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_map_split[i], feature_map_split[i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_71": {
                "variable": {
                    "value": "concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_map_concats_1[i], feature_map_concats_1[i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_76": {
                "name": {
                    "value": "image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "feature_map_concats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(feature_map_concats_2, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "max_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "merge_40": {
                "inputs": {
                    "value": "tensor_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {}
    },
    "tools/demo_shadownet.py": {
        "tensorflow": {
            "placeholder_57": {
                "variable": {
                    "value": "inputdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 32, config.cfg.TRAIN.IMAGE_WIDTH, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_59": {
                "variable": {
                    "value": "phase_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "config.cfg.TRAIN.SEQUENCE_LENGTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ctc_beam_search_decoder_71": {
                "variable": {
                    "value": "(decodes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "net.sequence_length * np.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "merge_repeated": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_75": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1, 'CPU': 4}",
                    "type": "Dict",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_81": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_83": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1, 'CPU': 4}, log_device_placement=False, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tools/demo_shadownet_car_plate.py": {
        "tensorflow": {
            "placeholder_50": {
                "variable": {
                    "value": "inputdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 32, config.cfg.TRAIN.IMAGE_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "phase_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "phase_tensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "config.cfg.TRAIN.SEQUENCE_LENGTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ctc_beam_search_decoder_60": {
                "variable": {
                    "value": "(decodes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net.build_shadownet(inputdata=inputdata)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "net.sequence_length * np.ones(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "merge_repeated": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_64": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1, 'CPU': 4}",
                    "type": "Dict",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_70": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_72": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1, 'CPU': 4}, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_shadownet.py": {
        "tensorflow": {
            "cast_54": {
                "variable": {
                    "value": "images_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_sh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(x=images_sh, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "phase_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "test",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "config.cfg.TRAIN.SEQUENCE_LENGTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ctc_beam_search_decoder_65": {
                "variable": {
                    "value": "(decoded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "net.sequence_length * np.ones(config.cfg.TRAIN.BATCH_SIZE)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "merge_repeated": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_67": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1, 'CPU': 4}",
                    "type": "Dict",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_73": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_75": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1, 'CPU': 4}, log_device_placement=False, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_batch_47": {
                "variable": {
                    "value": "(images_sh, labels_sh, imagenames_sh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_t, labels_t, imagenames_t]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + config.cfg.TRAIN.BATCH_SIZE * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_51": {
                "variable": {
                    "value": "(images_sh, labels_sh, imagenames_sh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_t, labels_t, imagenames_t]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + config.cfg.TRAIN.BATCH_SIZE * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Coordinator_88": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_89": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=sess_config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_shadownet_car_plate.py": {
        "tensorflow": {
            "cast_58": {
                "variable": {
                    "value": "images_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_sh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(x=images_sh, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "phase_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "config.cfg.TRAIN.SEQUENCE_LENGTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ctc_beam_search_decoder_69": {
                "variable": {
                    "value": "(decoded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net.build_shadownet(inputdata=images_sh)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "net.sequence_length * np.ones(32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "merge_repeated": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_72": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_78": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_80": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_batch_51": {
                "variable": {
                    "value": "(images_sh, labels_sh, imagenames_sh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_t, labels_t, imagenames_t]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 32 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_55": {
                "variable": {
                    "value": "(images_sh, labels_sh, imagenames_sh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_t, labels_t, imagenames_t]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 32 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tf_record_iterator_83": {
                "path": {
                    "value": "ops.join(dataset_dir, 'test_feature_0_5000.tfrecords')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tf_record_iterator_85": {
                "path": {
                    "value": "ops.join(dataset_dir, 'test_feature_5000_6379.tfrecords')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_94": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_95": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=sess_config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_shadownet_subnetwork.py": {
        "tensorflow": {
            "cast_61": {
                "variable": {
                    "value": "images_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_sh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(x=images_sh, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_74": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_79": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_81": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_batch_54": {
                "variable": {
                    "value": "(images_sh, labels_sh, imagenames_sh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_t, labels_t, imagenames_t]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 32 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_58": {
                "variable": {
                    "value": "(images_sh, labels_sh, imagenames_sh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images_t, labels_t, imagenames_t]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 32 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_71": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(logits=net_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Coordinator_98": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_99": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=sess_config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tf_record_iterator_88": {
                "path": {
                    "value": "ops.join(dataset_dir, tfrecords_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "logits": {
                    "value": "net_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net.build_shadownet_cnn_subnet(inputdata=images_sh)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/train_shadownet.py": {
        "tensorflow": {
            "shuffle_batch_66": {
                "variable": {
                    "value": "(inputdata, input_labels, input_imagenames)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images, labels, imagenames]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 2 * config.cfg.TRAIN.BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "inputdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(x=inputdata, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "phase_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "accuracy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy_tensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "config.cfg.TRAIN.SEQUENCE_LENGTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.ctc_loss(labels=input_labels, inputs=net_out, sequence_length=shadownet.sequence_length * np.ones(config.cfg.TRAIN.BATCH_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ctc_beam_search_decoder_93": {
                "variable": {
                    "value": "(decoded, log_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "shadownet.sequence_length * np.ones(config.cfg.TRAIN.BATCH_SIZE)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "merge_repeated": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "sequence_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.edit_distance(tf.cast(decoded[0], tf.int32), input_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_103": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "config.cfg.TRAIN.LR_DECAY_STEPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "config.cfg.TRAIN.LR_DECAY_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_108": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_124": {
                "variable": {
                    "value": "train_cost_scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_cost",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.ctc_loss(labels=input_labels, inputs=net_out, sequence_length=shadownet.sequence_length * np.ones(config.cfg.TRAIN.BATCH_SIZE)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_125": {
                "variable": {
                    "value": "train_accuracy_scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuray",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "accuracy_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=None, name='accuracy_tensor')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_126": {
                "variable": {
                    "value": "train_seq_scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_seq_dist",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.edit_distance(tf.cast(decoded[0], tf.int32), input_labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_133": {
                "variable": {
                    "value": "lr_scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Learning_Rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, config.cfg.TRAIN.LR_DECAY_STEPS, config.cfg.TRAIN.LR_DECAY_RATE, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_146": {
                "variable": {
                    "value": "train_summary_op_merge",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_summary_merge_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[train_cost_scalar, train_accuracy_scalar, train_seq_scalar, lr_scalar, train_conv1_image, train_conv2_image, train_conv3_image]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_158": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_168": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1, 'CPU': 4}",
                    "type": "Dict",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_173": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1, 'CPU': 4}, log_device_placement=False, allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_175": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tboard_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'tboard/shadownet'",
                            "Constant"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, config.cfg.TRAIN.LR_DECAY_STEPS, config.cfg.TRAIN.LR_DECAY_RATE, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_210": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_211": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=sess_config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ctc_loss_88": {
                "labels": {
                    "value": "input_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "shadownet.sequence_length * np.ones(config.cfg.TRAIN.BATCH_SIZE)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "edit_distance_97": {
                "hypothesis": {
                    "value": "tf.cast(decoded[0], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "truth": {
                    "value": "input_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_110": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_190": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "decoded[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_shadownet_org.py": {
        "tensorflow": {
            "shuffle_batch_60": {
                "variable": {
                    "value": "(inputdata, input_labels, input_imagenames)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images, labels, imagenames]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 2 * config.cfg.TRAIN.BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_69": {
                "variable": {
                    "value": "inputdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(x=inputdata, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "phase_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "phase",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "accuracy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy_tensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.ctc_loss(labels=input_labels, inputs=net_out, sequence_length=25 * np.ones(config.cfg.TRAIN.BATCH_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_92": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "config.cfg.TRAIN.LR_DECAY_STEPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "config.cfg.TRAIN.LR_DECAY_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_96": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_110": {
                "variable": {
                    "value": "train_cost_scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_cost",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.ctc_loss(labels=input_labels, inputs=net_out, sequence_length=25 * np.ones(config.cfg.TRAIN.BATCH_SIZE)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_111": {
                "variable": {
                    "value": "train_accuracy_scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuray",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "accuracy_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=None, name='accuracy_tensor')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_119": {
                "variable": {
                    "value": "lr_scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Learning_Rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, config.cfg.TRAIN.LR_DECAY_STEPS, config.cfg.TRAIN.LR_DECAY_RATE, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_135": {
                "variable": {
                    "value": "train_summary_op_merge",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_summary_merge_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[train_cost_scalar, train_accuracy_scalar, lr_scalar, train_conv1_image, train_conv2_image, train_conv3_image]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_147": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_156": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_161": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 1}, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_163": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tboard_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'tboard/shadownet'",
                            "Constant"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, config.cfg.TRAIN.LR_DECAY_STEPS, config.cfg.TRAIN.LR_DECAY_RATE, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_196": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_197": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=sess_config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ctc_loss_80": {
                "labels": {
                    "value": "input_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "25 * np.ones(config.cfg.TRAIN.BATCH_SIZE)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_97": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_176": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_shadownet_subnet.py": {
        "tensorflow": {
            "shuffle_batch_53": {
                "variable": {
                    "value": "(inputdata, input_labels, input_imagenames)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images, labels, imagenames]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1000 + 2 * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "inputdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputdata",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(x=inputdata, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "config.cfg.TRAIN.SEQUENCE_LENGTH",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_66": {
                "variable": {
                    "value": "correct_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(tf.nn.softmax(net_out), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(input_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_preds, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=input_labels, logits=net_out, name='cost')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_77": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "starter_learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.cfg.TRAIN.LEARNING_RATE",
                            "Attribute"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "config.cfg.TRAIN.LR_DECAY_STEPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "config.cfg.TRAIN.LR_DECAY_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_81": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_92": {
                "variable": {
                    "value": "merge_summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_95": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_104": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_108": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_110": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tboard_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'tboard/shadownet'",
                            "Constant"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, config.cfg.TRAIN.LR_DECAY_STEPS, config.cfg.TRAIN.LR_DECAY_RATE, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_89": {
                "name": {
                    "value": "Cost",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=input_labels, logits=net_out, name='cost'))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_90": {
                "name": {
                    "value": "Learning_Rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(starter_learning_rate, global_step, config.cfg.TRAIN.LR_DECAY_STEPS, config.cfg.TRAIN.LR_DECAY_RATE, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_91": {
                "name": {
                    "value": "Accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_preds, tf.float32), name='accuracy_train')",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_129": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_130": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=sess_config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_66": {
                "input": {
                    "value": "tf.nn.softmax(net_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_67": {
                "input": {
                    "value": "input_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "correct_preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(tf.nn.softmax(net_out), 1), tf.argmax(input_labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_72": {
                "labels": {
                    "value": "input_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "net_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shadownet.build_shadownet_cnn_subnet(inputdata=inputdata)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cost",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_82": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_123": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_66": {
                "logits": {
                    "value": "net_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shadownet.build_shadownet_cnn_subnet(inputdata=inputdata)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/watch_cnn_para.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "inputdata",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32, 32, config.cfg.TRAIN.IMAGE_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_31": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "shadow",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}