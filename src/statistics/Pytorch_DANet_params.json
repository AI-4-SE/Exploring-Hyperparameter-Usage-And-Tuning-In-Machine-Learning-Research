{
    "danet/option.py": {
        "torch": {
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "danet/test.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split='val', mode='testval', transform=input_transform)",
                            "Call"
                        ],
                        [
                            "get_segmentation_dataset(args.dataset, split='val', mode='vis', transform=input_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_batchify_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_count_156": {
                "variable": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_90": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "danet/train.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split='train', mode='train', **data_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "self.valloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split='val', mode='val', **data_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "params_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': model.pretrained.parameters(), 'lr': args.lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_195": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ft_resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_151": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(image)",
                            "Call"
                        ],
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "gather(outputs, 0, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "encoding/datasets/ade20k.py": {
        "torch": {
            "from_numpy_62": {
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(mask).astype('int64') - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "encoding/datasets/base.py": {
        "torch": {
            "from_numpy_101": {
                "ndarray": {
                    "value": "np.array(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/datasets/cityscapes (\u590d\u4ef6).py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "mask_file",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(mask_file)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "mask_file",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._class_to_index(np.array(mask).astype('int32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "encoding/datasets/cityscapes.py": {
        "torch": {
            "from_numpy_68": {
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(mask).astype('int32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "encoding/datasets/coco.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "self.ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "ids_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root, 'annotations/train_ids.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(root, 'annotations/val_ids.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_100": {
                "obj": {
                    "value": "new_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "ids_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root, 'annotations/train_ids.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(root, 'annotations/val_ids.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "encoding/datasets/pascal_voc.py": {
        "torch": {
            "from_numpy_76": {
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Image.open(self.masks[index])",
                            "Call"
                        ],
                        [
                            "self.target_transform(target)",
                            "Call"
                        ],
                        [
                            "np.array(mask).astype('int32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "encoding/datasets/pcontext.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "self.masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "mask_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root, self.split + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_68": {
                "obj": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "mask_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root, self.split + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(mask).astype('int32') - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "encoding/dilated/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "previous_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "previous_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_145": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_165": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_262": {
                "f": {
                    "value": "get_model_file('resnet50', root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_278": {
                "f": {
                    "value": "get_model_file('resnet101', root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_292": {
                "f": {
                    "value": "./pretrain_models/resnet152-b121ed2d.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/functions/customize.py": {
        "torch": {}
    },
    "encoding/functions/encoding.py": {
        "torch": {
            "normalize_109": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(X, dim=2, eps=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_110": {
                "variable": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(C, dim=1, eps=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(X, dim=2, eps=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "C.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/functions/syncbn.py": {
        "torch": {}
    },
    "encoding/lib/__init__.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "cpu",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "enclib_cpu",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "[os.path.join(cpu_path, 'operator.cpp'), os.path.join(cpu_path, 'encoding_cpu.cpp'), os.path.join(cpu_path, 'syncbn_cpu.cpp'), os.path.join(cpu_path, 'roi_align_cpu.cpp'), os.path.join(cpu_path, 'nms_cpu.cpp')]",
                    "type": "List",
                    "possible_values": []
                },
                "build_directory": {
                    "value": "cpu_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cwd, 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_18": {
                "variable": {
                    "value": "gpu",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "enclib_gpu",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "[os.path.join(gpu_path, 'operator.cpp'), os.path.join(gpu_path, 'encoding_kernel.cu'), os.path.join(gpu_path, 'encodingv2_kernel.cu'), os.path.join(gpu_path, 'syncbn_kernel.cu'), os.path.join(gpu_path, 'roi_align_kernel.cu'), os.path.join(gpu_path, 'nms_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "build_directory": {
                    "value": "gpu_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cwd, 'gpu')",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/lib/cpu/setup.py": {
        "torch": {}
    },
    "encoding/lib/gpu/setup.py": {
        "torch": {}
    },
    "encoding/models/base.py": {
        "torch": {
            "upsample_191": {
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_202": {
                "variable": {
                    "value": "img_pad[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "img[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, padw, 0, padh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_values[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "-np.array(mean) / np.array(std)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_212": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "img.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_of_211": {
                "obj": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scatter_103": {
                "input": {
                    "value": "kwargs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scatter(kwargs, target_gpus, dim) if kwargs else []",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "target_gpus",
                    "type": "Name",
                    "possible_values": []
                },
                "index": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_of_122": {
                "obj": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_of_154": {
                "obj": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/models/encnet.py": {
        "torch": {
            "upsample_35": {
                "variable": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 512, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout2d(0.1, False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_38": {
                "variable": {
                    "value": "auxout",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.auxlayer(features[2])",
                            "Call"
                        ],
                        [
                            "F.upsample(auxout, imsize, **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.selayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.connect",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(512, 512, kernel_size=1, bias=False), norm_layer(512), nn.ReLU(inplace=True)), nn.Sequential(nn.Conv2d(1024, 512, kernel_size=1, bias=False), norm_layer(512), nn.ReLU(inplace=True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3 * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sigmoid_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu__68": {
                "input": {
                    "value": "x + x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_102": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_149": {
                "f": {
                    "value": "get_model_file('encnet_%s_%s' % (backbone, acronyms[dataset]), root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "3 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "[feat, c2, c3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "nn.Conv2d(1024, 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/models/fcn.py": {
        "torch": {
            "upsample_52": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.head(c4)",
                            "Call"
                        ],
                        [
                            "upsample(x, imsize, **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, inter_channels, 3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_56": {
                "variable": {
                    "value": "auxout",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.auxlayer(c3)",
                            "Call"
                        ],
                        [
                            "upsample(auxout, imsize, **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "imsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout2d_68": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_103": {
                "f": {
                    "value": "get_model_file('fcn_%s_%s' % (backbone, acronyms[dataset]), root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/models/psp.py": {
        "torch": {
            "upsample_30": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.head(c4)",
                            "Call"
                        ],
                        [
                            "upsample(x, (h, w), **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "PyramidPooling(in_channels, norm_layer, up_kwargs)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_34": {
                "variable": {
                    "value": "auxout",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "auxout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.auxlayer(c3)",
                            "Call"
                        ],
                        [
                            "upsample(auxout, (h, w), **self._up_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_47": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "get_model_file('psp_%s_%s' % (backbone, acronyms[dataset]), root=root)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/nn/customize.py": {
        "torch": {
            "nll_loss_37": {
                "input": {
                    "value": "F.log_softmax(input, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCELoss_51": {
                "variable": {
                    "value": "self.bceloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_180": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_181": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_182": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_183": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_203": {
                "variable": {
                    "value": "feat1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(self.pool1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_204": {
                "variable": {
                    "value": "feat2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(self.pool2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_205": {
                "variable": {
                    "value": "feat3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(self.pool3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "upsample_206": {
                "variable": {
                    "value": "feat4",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(self.pool4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_37": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histc_81": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target[i].cpu().data.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "nclass",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "nclass - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_170": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "(x, feat1, feat2, feat3, feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nclass",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(in_channels / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "input": {
                    "value": "se_pred",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "input": {
                    "value": "se_pred",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/nn/encoding.py": {
        "torch": {
            "Parameter_82": {
                "variable": {
                    "value": "self.codewords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(K, D)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scaledL2(X, self.codewords, self.scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.codewords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(K, D)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scaledL2(X, self.codewords, self.scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, C, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_200": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight.expand_as(self.G)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_287": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels * scale_factor * scale_factor, in_channels // groups, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_307": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_201": {
                "input": {
                    "value": "self.P.transpose(1, 2).expand(X.size(0), self.C, self.C)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X.view(X.size(0), X.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_291": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels * scale_factor * scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pixel_shuffle_309": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "upscale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/nn/syncbn.py": {
        "torch": {
            "batch_norm_41": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(input_shape[0], self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/parallel.py": {
        "torch": {
            "broadcast_coalesced_42": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_51": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_grad_enabled_154": {
                "variable": {
                    "value": "grad_enabled",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_add_60": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[inputs[i:i + num_inputs] for i in range(0, len(inputs), num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i[0].get_device())",
                            "Call"
                        ],
                        [
                            "[i.data for i in inputs]",
                            "ListComp"
                        ],
                        [
                            "[inputs[i:i + ctx.num_inputs] for i in range(0, len(inputs), ctx.num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_158": {
                "mode": {
                    "value": "grad_enabled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_162": {
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_a_var(input).get_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "encoding/utils/files.py": {
        "torch": {
            "save_17": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "directory + filename",
                            "BinOp"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "encoding/utils/metrics.py": {
        "torch": {
            "max_70": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "max_89": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "encoding/utils/presets.py": {
        "torch": {}
    },
    "encoding/utils/train_helper.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "tvect",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nclass",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "histc_25": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target[i].data.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "nclass",
                    "type": "Name",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "nclass - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/recognition/dataset/cifar10.py": {
        "torch": {
            "DataLoader_36": {
                "variable": {
                    "value": "trainloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "testloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/recognition/dataset/minc.py": {
        "torch": {
            "DataLoader_103": {
                "variable": {
                    "value": "trainloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MINCDataloder(root=os.path.expanduser('~/data/minc-2500/'), train=True)",
                            "Call"
                        ],
                        [
                            "MINCDataloder(root=os.path.expanduser('~/data/minc-2500/'), train=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "testloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MINCDataloder(root=os.path.expanduser('~/data/minc-2500/'), train=False)",
                            "Call"
                        ],
                        [
                            "MINCDataloder(root=os.path.expanduser('~/data/minc-2500/'), train=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/recognition/main.py": {
        "torch": {
            "CrossEntropyLoss_55": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_62": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "models.Net(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/recognition/model/deepten.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 128, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "128 * n_codes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.nclass",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/recognition/model/encnet.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_44": {
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/recognition/model/encnetdrop.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_44": {
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_64": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/recognition/model/mynn.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel, out_channel, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel, out_channel, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_179": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.residual_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.residual_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.residual_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.residual_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(channel / reduction)",
                            "Call"
                        ],
                        [
                            "int(channel / reduction)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(channel / reduction)",
                            "Call"
                        ],
                        [
                            "int(channel / reduction)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "out_channel * K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sigmoid_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(channel / reduction)",
                            "Call"
                        ],
                        [
                            "int(channel / reduction)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(channel / reduction)",
                            "Call"
                        ],
                        [
                            "int(channel / reduction)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "out_channel * K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sigmoid_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/recognition/model/resnet.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_44": {
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/segmentation/demo.py": {
        "torch": {
            "max_17": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.evaluate(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/segmentation/test.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split='val', mode='testval', transform=input_transform)",
                            "Call"
                        ],
                        [
                            "get_segmentation_dataset(args.dataset, split='test', mode='test', transform=input_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_batchify_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_count_123": {
                "variable": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_90": {
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/segmentation/test_models.py": {
        "torch": {
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/segmentation/train.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "self.trainloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split='train', mode='train', **data_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "self.valloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_dataset(args.dataset, split='val', mode='val', **data_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "params_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': model.pretrained.parameters(), 'lr': args.lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_173": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_130": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(image)",
                            "Call"
                        ],
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "gather(outputs, 0, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit_test/test_module.py": {
        "torch": {
            "gradcheck_36": {
                "variable": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "encoding.functions.aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(A, X, C)",
                            "Tuple"
                        ],
                        [
                            "(X, C, S)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(1, *X)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "atol": {
                    "value": "ATOL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "gradcheck_49": {
                "variable": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "encoding.functions.scaledL2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(A, X, C)",
                            "Tuple"
                        ],
                        [
                            "(X, C, S)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(1, *X)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "atol": {
                    "value": "ATOL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "gradcheck_59": {
                "variable": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding.nn.Encoding(C, K).double().cuda()",
                            "Call"
                        ],
                        [
                            "encoding.nn.BatchNorm2d(C)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(A, X, C)",
                            "Tuple"
                        ],
                        [
                            "(X, C, S)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(1, *X)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "atol": {
                    "value": "ATOL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "gradcheck_68": {
                "variable": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "encoding.functions.sum_square",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(A, X, C)",
                            "Tuple"
                        ],
                        [
                            "(X, C, S)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(1, *X)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "atol": {
                    "value": "ATOL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_count_73": {
                "variable": {
                    "value": "ngpu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradcheck_82": {
                "variable": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "encoding.parallel.allreduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(A, X, C)",
                            "Tuple"
                        ],
                        [
                            "(X, C, S)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(1, *X)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "atol": {
                    "value": "ATOL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataParallel_95": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding.nn.Encoding(C, K).double().cuda()",
                            "Call"
                        ],
                        [
                            "encoding.nn.BatchNorm2d(C)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_99": {
                "variable": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(layer).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(A, X, C)",
                            "Tuple"
                        ],
                        [
                            "(X, C, S)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "(1, *X)",
                            "Tuple"
                        ],
                        [
                            "(X,)",
                            "Tuple"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "atol": {
                    "value": "ATOL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "gradcheck_115": {
                "variable": {
                    "value": "test",
                    "type": "Name",
                    "possible_values": []
                },
                "func": {
                    "value": "encoding.functions.batchnormtrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(X, mean, std, gamma, beta)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "EPS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "atol": {
                    "value": "ATOL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "bn",
                    "type": "Name",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_161": {
                "variable": {
                    "value": "sync_bn",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "sync_bn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding.nn.BatchNorm2d(10).double()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(sync_bn).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_166": {
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_167": {
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}