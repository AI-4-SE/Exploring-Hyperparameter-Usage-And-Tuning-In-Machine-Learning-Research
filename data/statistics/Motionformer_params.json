{
    "slowfast/utils/meters.py": {
        "sklearn": {
            "average_precision_score_752": {
                "variable": {
                    "value": "aps",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, ~np.all(labels == 0, axis=0)]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:, ~np.all(labels == 0, axis=0)]",
                            "Subscript"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_181": {
                "variable": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.all_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "all_ori_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.all_ori_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "all_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.all_metadata",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "variable": {
                    "value": "self.video_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_videos, num_cls)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "self.clip_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_videos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_videos",
                            "Method Argument"
                        ],
                        [
                            "num_videos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1162": {
                "variable": {
                    "value": "self.verb_video_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_videos, num_cls[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1163": {
                "variable": {
                    "value": "self.noun_video_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_videos, num_cls[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1164": {
                "variable": {
                    "value": "self.verb_video_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_videos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_videos",
                            "Method Argument"
                        ],
                        [
                            "num_videos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1165": {
                "variable": {
                    "value": "self.noun_video_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_videos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_videos",
                            "Method Argument"
                        ],
                        [
                            "num_videos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_1167": {
                "variable": {
                    "value": "self.clip_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_videos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_videos",
                            "Method Argument"
                        ],
                        [
                            "num_videos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "*size": {
                    "value": "(num_videos, num_cls)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "*size": {
                    "value": "num_videos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_videos",
                            "Method Argument"
                        ],
                        [
                            "num_videos",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_305": {
                "input": {
                    "value": "self.video_labels[vid_id].type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "labels[ind].type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_313": {
                "variable": {
                    "value": "self.video_preds[vid_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.video_preds[vid_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_719": {
                "tensors": {
                    "value": "self.all_preds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_720": {
                "tensors": {
                    "value": "self.all_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/visualization/utils.py": {
        "sklearn": {
            "confusion_matrix_42": {
                "variable": {
                    "value": "cmtx",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(labels, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.argmax(preds, dim=-1))",
                            "Call"
                        ],
                        [
                            "self.model(input_clone, bboxes)",
                            "Call"
                        ],
                        [
                            "self.model(input_clone)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(num_classes))",
                    "type": "Call",
                    "possible_values": []
                },
                "normalize": {
                    "value": "normalize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'true'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "flatten_40": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.argmax(preds, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_41": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(labels, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_107": {
                "variable": {
                    "value": "(val, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_318": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "inputs.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "cfg.DATA.NUM_FRAMES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_319": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(frames)).float() / 255",
                            "BinOp"
                        ],
                        [
                            "tensor_normalize(inputs, cfg.DATA.MEAN, cfg.DATA.STD)",
                            "Call"
                        ],
                        [
                            "inputs.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(inputs, 1, index)",
                            "Call"
                        ],
                        [
                            "pack_pathway_output(cfg, inputs)",
                            "Call"
                        ],
                        [
                            "[inp.unsqueeze(0) for inp in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_ls",
                            "variable"
                        ],
                        [
                            "torch.linspace(0, inputs.shape[1] - 1, cfg.DATA.NUM_FRAMES).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_33": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.argmax(preds, dim=-1))",
                            "Call"
                        ],
                        [
                            "self.model(input_clone, bboxes)",
                            "Call"
                        ],
                        [
                            "self.model(input_clone)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(labels, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_38": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.argmax(labels, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_40": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(preds, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.argmax(preds, dim=-1))",
                            "Call"
                        ],
                        [
                            "self.model(input_clone, bboxes)",
                            "Call"
                        ],
                        [
                            "self.model(input_clone)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "ndarray": {
                    "value": "np.array(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "run_with_submitit.py": {
        "torch": {}
    },
    "slowfast/datasets/decoder.py": {
        "torch": {
            "linspace_26": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.uniform(0, delta)",
                            "Call"
                        ],
                        [
                            "delta * clip_idx / num_clips",
                            "BinOp"
                        ],
                        [
                            "get_start_end_idx(fps * video_meta['video_duration'], clip_size, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames_length, sampling_rate * num_frames / target_fps * fps, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames.shape[0], clip_sz, clip_idx if decode_all_video else 0, num_clips if decode_all_video else 1)",
                            "Call"
                        ],
                        [
                            "start_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "end_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_idx + clip_size - 1",
                            "BinOp"
                        ],
                        [
                            "get_start_end_idx(fps * video_meta['video_duration'], clip_size, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames_length, sampling_rate * num_frames / target_fps * fps, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames.shape[0], clip_sz, clip_idx if decode_all_video else 0, num_clips if decode_all_video else 1)",
                            "Call"
                        ],
                        [
                            "end_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "frames.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_28": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(frames, 0, index)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[frame.to_rgb().to_ndarray() for frame in video_frames]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(np.stack(frames))",
                            "Call"
                        ],
                        [
                            "pyav_decode(container, sampling_rate, num_frames, clip_idx, num_clips, target_fps)",
                            "Call"
                        ],
                        [
                            "torchvision_decode(container, sampling_rate, num_frames, clip_idx, video_meta, num_clips, target_fps, ('visual',), max_spatial_scale)",
                            "Call"
                        ],
                        [
                            "temporal_sampling(frames, start_idx, end_idx, num_frames)",
                            "Call"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "video_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.frombuffer(video_handle, dtype=np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_280": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/epickitchens.py": {
        "torch": {
            "stack_159": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pack_frames_to_video_clip(self.cfg, self._video_records[index], temporal_sample_index, target_fps=self.target_fps)",
                            "Call"
                        ],
                        [
                            "[transforms.ToPILImage()(frame.squeeze().numpy()) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[autoaugment.rand_augment_transform(auto_augment_desc, aa_params, seed)(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(np.array(frame)) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames)",
                            "Call"
                        ],
                        [
                            "utils.tensor_normalize(frames, self.cfg.DATA.MEAN, self.cfg.DATA.STD)",
                            "Call"
                        ],
                        [
                            "frames.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "utils.spatial_sampling(frames, spatial_idx=spatial_sample_index, min_scale=min_scale, max_scale=max_scale, crop_size=crop_size, random_horizontal_flip=self.cfg.DATA.RANDOM_FLIP, inverse_uniform_sampling=self.cfg.DATA.INV_UNIFORM_SAMPLE)",
                            "Call"
                        ],
                        [
                            "transform.random_resize_crop_video(frames, crop_size, interpolation_mode='bilinear')",
                            "Call"
                        ],
                        [
                            "transform.horizontal_flip(0.5, frames)",
                            "Call"
                        ],
                        [
                            "transform.random_short_side_scale_jitter(frames, min_scale, max_scale)",
                            "Call"
                        ],
                        [
                            "transform.uniform_crop(frames, crop_size, spatial_sample_index)",
                            "Call"
                        ],
                        [
                            "frames.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "utils.frames_augmentation(frames, colorjitter=self.cfg.DATA.COLORJITTER, use_grayscale=self.cfg.DATA.GRAYSCALE, use_gaussian=self.cfg.DATA.GAUSSIAN)",
                            "Call"
                        ],
                        [
                            "utils.pack_pathway_output(self.cfg, frames)",
                            "Call"
                        ],
                        [
                            "transform.random_short_side_scale_jitter(frames, min_scale, max_scale)",
                            "Call"
                        ],
                        [
                            "transform.random_crop(frames, crop_size)",
                            "Call"
                        ],
                        [
                            "transform.horizontal_flip(0.5, frames)",
                            "Call"
                        ],
                        [
                            "transform.random_short_side_scale_jitter(frames, min_scale, max_scale)",
                            "Call"
                        ],
                        [
                            "transform.uniform_crop(frames, crop_size, spatial_idx)",
                            "Call"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_158": {
                "data": {
                    "value": "np.array(frame)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/frame_loader.py": {
        "torch": {
            "linspace_26": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_start_end_idx(video_record.num_frames, num_samples * sampling_rate * fps / target_fps, temporal_sample_index, cfg.TEST.NUM_ENSEMBLE_VIEWS)",
                            "Call"
                        ],
                        [
                            "start_idx + 1",
                            "BinOp"
                        ],
                        [
                            "start_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "end_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_start_end_idx(video_record.num_frames, num_samples * sampling_rate * fps / target_fps, temporal_sample_index, cfg.TEST.NUM_ENSEMBLE_VIEWS)",
                            "Call"
                        ],
                        [
                            "end_idx + 1",
                            "BinOp"
                        ],
                        [
                            "end_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.NUM_FRAMES",
                            "Attribute"
                        ],
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, num_frames - 1).long()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_frames - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/kinetics.py": {
        "torch": {
            "stack_278": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder.decode(video_container, sampling_rate, self.cfg.DATA.NUM_FRAMES, temporal_sample_index, self.cfg.TEST.NUM_ENSEMBLE_VIEWS, video_meta=self._video_meta[index], target_fps=self.cfg.DATA.TARGET_FPS, backend=self.cfg.DATA.DECODING_BACKEND, max_spatial_scale=min_scale)",
                            "Call"
                        ],
                        [
                            "[transforms.ToPILImage()(frame.squeeze().numpy()) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[autoaugment.rand_augment_transform(auto_augment_desc, aa_params, seed)(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(np.array(frame)) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames)",
                            "Call"
                        ],
                        [
                            "utils.tensor_normalize(frames, self.cfg.DATA.MEAN, self.cfg.DATA.STD)",
                            "Call"
                        ],
                        [
                            "frames.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "utils.spatial_sampling(frames, spatial_idx=spatial_sample_index, min_scale=min_scale, max_scale=max_scale, crop_size=crop_size, random_horizontal_flip=self.cfg.DATA.RANDOM_FLIP, inverse_uniform_sampling=self.cfg.DATA.INV_UNIFORM_SAMPLE)",
                            "Call"
                        ],
                        [
                            "transform.random_resize_crop_video(frames, crop_size, interpolation_mode='bilinear')",
                            "Call"
                        ],
                        [
                            "transform.horizontal_flip(0.5, frames)",
                            "Call"
                        ],
                        [
                            "transform.random_short_side_scale_jitter(frames, min_scale, max_scale)",
                            "Call"
                        ],
                        [
                            "transform.uniform_crop(frames, crop_size, spatial_sample_index)",
                            "Call"
                        ],
                        [
                            "frames.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "utils.frames_augmentation(frames, colorjitter=self.cfg.DATA.COLORJITTER, use_grayscale=self.cfg.DATA.GRAYSCALE, use_gaussian=self.cfg.DATA.GAUSSIAN)",
                            "Call"
                        ],
                        [
                            "utils.pack_pathway_output(self.cfg, frames)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_277": {
                "data": {
                    "value": "np.array(frame)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/loader.py": {
        "torch": {
            "tensor_32": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate(labels, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(dataset_name, cfg, split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg.TRAIN.BATCH_SIZE / max(1, cfg.NUM_GPUS))",
                            "Call"
                        ],
                        [
                            "int(cfg.TRAIN.BATCH_SIZE / max(1, cfg.NUM_GPUS))",
                            "Call"
                        ],
                        [
                            "int(cfg.TEST.BATCH_SIZE / max(1, cfg.NUM_GPUS))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.DATA_LOADER.PIN_MEMORY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "detection_collate if cfg.DETECTION.ENABLE else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "utils.loader_worker_init_fn(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "collated_extra_data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.concatenate([np.full((data[i].shape[0], 1), float(i)), data[i]], axis=1) for i in range(len(data))]",
                            "ListComp"
                        ],
                        [
                            "np.concatenate(bboxes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(dataset_name, cfg, split)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ShortCycleBatchSampler(sampler, batch_size=batch_size, drop_last=drop_last, cfg=cfg)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.DATA_LOADER.PIN_MEMORY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "utils.loader_worker_init_fn(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(dataset_name, cfg, split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg.TRAIN.BATCH_SIZE / max(1, cfg.NUM_GPUS))",
                            "Call"
                        ],
                        [
                            "int(cfg.TRAIN.BATCH_SIZE / max(1, cfg.NUM_GPUS))",
                            "Call"
                        ],
                        [
                            "int(cfg.TEST.BATCH_SIZE / max(1, cfg.NUM_GPUS))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False if sampler else shuffle",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_sampler(dataset, shuffle, cfg)",
                            "Call"
                        ],
                        [
                            "utils.create_sampler(dataset, shuffle, cfg)",
                            "Call"
                        ],
                        [
                            "loader.batch_sampler.sampler if isinstance(loader.batch_sampler, ShortCycleBatchSampler) else loader.sampler",
                            "IfExp"
                        ],
                        [
                            "loader.dataset.sampler",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATA_LOADER.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.DATA_LOADER.PIN_MEMORY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "detection_collate if cfg.DETECTION.ENABLE else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "utils.loader_worker_init_fn(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "collated_extra_data[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "list(itertools.chain(*data))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/multigrid_helper.py": {
        "torch": {
            "split_10": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_11": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/random_erasing.py": {
        "torch": {
            "empty_16": {
                "*size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "patch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_18": {
                "*size": {
                    "value": "(patch_size[0], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "(patch_size[0], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slowfast/datasets/samplers.py": {
        "torch": {
            "Generator_38": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_41": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/ssv2.py": {
        "torch": {
            "as_tensor_246": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "utils.retry_load_images([self._path_to_videos[index][frame] for frame in seq], self._num_retries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_270": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(utils.retry_load_images([self._path_to_videos[index][frame] for frame in seq], self._num_retries))",
                            "Call"
                        ],
                        [
                            "[transforms.ToPILImage()(frame.squeeze().numpy()) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[autoaugment.rand_augment_transform(auto_augment_desc, aa_params, seed)(frame) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "[torch.tensor(np.array(frame)) for frame in frames]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(frames)",
                            "Call"
                        ],
                        [
                            "utils.tensor_normalize(frames, self.cfg.DATA.MEAN, self.cfg.DATA.STD)",
                            "Call"
                        ],
                        [
                            "frames.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "utils.spatial_sampling(frames, spatial_idx=spatial_sample_index, min_scale=min_scale, max_scale=max_scale, crop_size=crop_size, random_horizontal_flip=self.cfg.DATA.RANDOM_FLIP, inverse_uniform_sampling=self.cfg.DATA.INV_UNIFORM_SAMPLE)",
                            "Call"
                        ],
                        [
                            "transform.random_resize_crop_video(frames, crop_size, scale=(0.05, 1.0), interpolation_mode='bilinear')",
                            "Call"
                        ],
                        [
                            "transform.horizontal_flip(0.5, frames)",
                            "Call"
                        ],
                        [
                            "transform.random_short_side_scale_jitter(frames, min_scale, max_scale)",
                            "Call"
                        ],
                        [
                            "transform.uniform_crop(frames, crop_size, spatial_sample_index)",
                            "Call"
                        ],
                        [
                            "frames.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "utils.frames_augmentation(frames, colorjitter=self.cfg.DATA.COLORJITTER, use_grayscale=self.cfg.DATA.GRAYSCALE, use_gaussian=self.cfg.DATA.GAUSSIAN)",
                            "Call"
                        ],
                        [
                            "utils.pack_pathway_output(self.cfg, frames)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_269": {
                "data": {
                    "value": "np.array(frame)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/transform.py": {
        "torch": {
            "tensor_247": {
                "variable": {
                    "value": "img_gray",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "brightness_jitter(img_brightness, images)",
                            "Call"
                        ],
                        [
                            "contrast_jitter(img_contrast, images)",
                            "Call"
                        ],
                        [
                            "saturation_jitter(img_saturation, images)",
                            "Call"
                        ],
                        [
                            "blend(images, img_bright, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "img_bright",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_326": {
                "variable": {
                    "value": "img_gray[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "img_gray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(images)",
                            "Call"
                        ],
                        [
                            "grayscale(images)",
                            "Call"
                        ],
                        [
                            "grayscale(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_373": {
                "variable": {
                    "value": "out_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "brightness_jitter(img_brightness, images)",
                            "Call"
                        ],
                        [
                            "contrast_jitter(img_contrast, images)",
                            "Call"
                        ],
                        [
                            "saturation_jitter(img_saturation, images)",
                            "Call"
                        ],
                        [
                            "blend(images, img_bright, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_398": {
                "variable": {
                    "value": "out_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "brightness_jitter(img_brightness, images)",
                            "Call"
                        ],
                        [
                            "contrast_jitter(img_contrast, images)",
                            "Call"
                        ],
                        [
                            "saturation_jitter(img_saturation, images)",
                            "Call"
                        ],
                        [
                            "blend(images, img_bright, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_478": {
                "variable": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip[..., i:i + h, j:j + w]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(clip, size=size, mode=interpolation_mode, align_corners=False)",
                            "Call"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(1.0 / np.random.uniform(1.0 / max_size, 1.0 / min_size)))",
                            "Call"
                        ],
                        [
                            "int(round(np.random.uniform(min_size, max_size)))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(size, size)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "interpolation_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_412": {
                "input": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vid",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(1.0 / np.random.uniform(1.0 / max_size, 1.0 / min_size)))",
                            "Call"
                        ],
                        [
                            "int(round(np.random.uniform(min_size, max_size)))",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(size, size)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "float(size) / min(vid.shape[-2:])",
                            "BinOp"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "(0.08",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "interpolation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_432": {
                "variable": {
                    "value": "log_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_433": {
                "variable": {
                    "value": "aspect_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty(1).uniform_(log_ratio[0], log_ratio[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_56": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "brightness_jitter(img_brightness, images)",
                            "Call"
                        ],
                        [
                            "contrast_jitter(img_contrast, images)",
                            "Call"
                        ],
                        [
                            "saturation_jitter(img_saturation, images)",
                            "Call"
                        ],
                        [
                            "blend(images, img_bright, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_height, new_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_441": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "height - h + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_442": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "width - w + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_431": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_432": {
                "data": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio",
                            "Method Argument"
                        ],
                        [
                            "(3.0 / 4.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_434": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/datasets/utils.py": {
        "torch": {
            "tensor_281": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mean)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_283": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std)",
                            "Call"
                        ],
                        [
                            "torch.tensor(std)",
                            "Call"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mean)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(std)",
                            "Call"
                        ],
                        [
                            "torch.tensor(std)",
                            "Call"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_101": {
                "variable": {
                    "value": "slow_pathway",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frames[[2, 1, 0], :, :, :]",
                            "Subscript"
                        ],
                        [
                            "transform.random_short_side_scale_jitter(images=frames, min_size=min_scale, max_size=max_scale, inverse_uniform_sampling=inverse_uniform_sampling)",
                            "Call"
                        ],
                        [
                            "transform.random_crop(frames, crop_size)",
                            "Call"
                        ],
                        [
                            "transform.horizontal_flip(0.5, frames)",
                            "Call"
                        ],
                        [
                            "transform.random_short_side_scale_jitter(frames, min_scale, max_scale)",
                            "Call"
                        ],
                        [
                            "transform.uniform_crop(frames, crop_size, spatial_idx)",
                            "Call"
                        ],
                        [
                            "transform.color_jitter(frames, 0.4, 0.4, 0.4)",
                            "Call"
                        ],
                        [
                            "transform.grayscale(frames)",
                            "Call"
                        ],
                        [
                            "frames.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "transform.gaussian_blur(frames)",
                            "Call"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.linspace(0, frames.shape[1] - 1, frames.shape[1] // cfg.SLOWFAST.ALPHA).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_334": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_51": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "fast_pathway",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fast_pathway[:, :32, :, :].permute(1, 0, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_104": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "frames.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "frames.shape[1] // cfg.SLOWFAST.ALPHA",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/models/adamw.py": {
        "torch": {
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_92": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_95": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_111": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "slowfast/models/batchnorm_helper.py": {
        "torch": {
            "BatchNorm3d_65": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm3d_67": {
                "variable": {
                    "value": "self.split_bn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(input) for k in range(du.get_local_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_142": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_list, dim=0)",
                            "Call"
                        ],
                        [
                            "inputs[group_idx * num_sync_devices:(group_idx + 1) * num_sync_devices]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(inputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(grad_output) for k in range(du.get_local_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(grad_output_list, dim=0)",
                            "Call"
                        ],
                        [
                            "grads[group_idx * ctx.num_sync_devices:(group_idx + 1) * ctx.num_sync_devices]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(grads, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_200": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[0, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_201": {
                "variable": {
                    "value": "meansqr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mean, meansqr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_208": {
                "variable": {
                    "value": "(mean, meansqr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mean, meansqr], dim=0)",
                            "Call"
                        ],
                        [
                            "GroupGather.apply(vec, self.num_sync_devices, self.num_groups) * (1.0 / self.num_sync_devices)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rsqrt_213": {
                "variable": {
                    "value": "invstd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_152": {
                "input": {
                    "value": "grad_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_61": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['num_features']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['num_features']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "slowfast/models/build.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_71": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MODEL_REGISTRY.get(name)(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(module=model, device_ids=[cur_device], output_device=cur_device, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model.cuda(device=cur_device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[cur_device]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "cur_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "gpu_id",
                            "variable"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_device_63": {
                "variable": {
                    "value": "cur_device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "model.patch_embed_3d.proj.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.patch_embed_3d.proj.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/models/losses.py": {
        "torch": {}
    },
    "slowfast/models/nystrom_helper.py": {
        "torch": {
            "eye_12": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "mat.size(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(q, keys_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(queries_landmarks, keys_landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rearrange(torch.matmul(queries_landmarks, k.transpose(-1, -2)), 'b l (f p) -> b l f p', f=F)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.softmax(torch.matmul(q, keys_landmarks.transpose(-1, -2)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "iterative_inv(kernel_2, n_iter=inv_iters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b n l, b l f d -> b n f d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(kernel_1, iterative_inv(kernel_2, n_iter=inv_iters))",
                            "Call"
                        ],
                        [
                            "torch.einsum('b m l, b l f p -> b m f p', attn, kernel_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.max(torch.sum(K, dim=-2)) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (a1 * a2) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "1.0 / torch.max(torch.sum(K, dim=-2), dim=-1).values.unsqueeze(-1).unsqueeze(-1) * K.transpose(-1, -2)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(0.25 * V, 13 * I - torch.matmul(KV, 15 * I - torch.matmul(KV, 7 * I - KV)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_31": {
                "input": {
                    "value": "KV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(K, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "7 * I - KV",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_109": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b m l, b l f p -> b m f p",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(kernel_1, iterative_inv(kernel_2, n_iter=inv_iters))",
                            "Call"
                        ],
                        [
                            "torch.einsum('b m l, b l f p -> b m f p', attn, kernel_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q * scale",
                            "BinOp"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "keys_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "input": {
                    "value": "queries_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.clone()",
                            "Call"
                        ],
                        [
                            "q2.reshape(B, landmarks, N // landmarks, D).mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat((queries_landmarks_f, queries_landmarks_l), dim=-2)",
                            "Call"
                        ],
                        [
                            "q.reshape(B, landmarks, N // landmarks, D).mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat((queries_landmarks_f, queries_landmarks_l), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "keys_landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_105": {
                "equation": {
                    "value": "b l f p, b f p d -> b l f d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "kernel_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.softmax(rearrange(torch.matmul(queries_landmarks, k.transpose(-1, -2)), 'b l (f p) -> b l f p', f=F), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_98": {
                "input": {
                    "value": "queries_landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.clone()",
                            "Call"
                        ],
                        [
                            "q2.reshape(B, landmarks, N // landmarks, D).mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat((queries_landmarks_f, queries_landmarks_l), dim=-2)",
                            "Call"
                        ],
                        [
                            "q.reshape(B, landmarks, N // landmarks, D).mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat((queries_landmarks_f, queries_landmarks_l), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_17": {
                "input": {
                    "value": "torch.sum(K, dim=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_20": {
                "input": {
                    "value": "torch.sum(torch.abs(K), dim=-2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_21": {
                "input": {
                    "value": "torch.sum(torch.abs(K), dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "keys_landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(keys_landmarks_f, keys_landmarks_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "queries_landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(queries_landmarks_f, queries_landmarks_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "keys_landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(keys_landmarks_f, keys_landmarks_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "queries_landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(queries_landmarks_f, queries_landmarks_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "torch.abs(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "torch.abs(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_20": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "variable"
                        ]
                    ]
                }
            },
            "abs_21": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "variable"
                        ]
                    ]
                }
            },
            "max_26": {
                "input": {
                    "value": "torch.sum(K, dim=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/models/optimizer.py": {
        "torch": {
            "SGD_55": {
                "params": {
                    "value": "optim_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': bn_params, 'weight_decay': cfg.BN.WEIGHT_DECAY}, {'params': non_bn_parameters, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SOLVER.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.SOLVER.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dampening": {
                    "value": "cfg.SOLVER.DAMPENING",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "cfg.SOLVER.NESTEROV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "params": {
                    "value": "optim_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': bn_params, 'weight_decay': cfg.BN.WEIGHT_DECAY}, {'params': non_bn_parameters, 'weight_decay': cfg.SOLVER.WEIGHT_DECAY}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.SOLVER.BASE_LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.SOLVER.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/models/orthoformer_helper.py": {
        "torch": {
            "normalize_26": {
                "variable": {
                    "value": "qk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_unnormalised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[:, torch.randint(q.size(-2), (num_samples,), device=q.device), :]",
                            "Subscript"
                        ],
                        [
                            "q",
                            "variable"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "selected_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_30": {
                "variable": {
                    "value": "landmark_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "selected_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "qk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_33": {
                "variable": {
                    "value": "random_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "qk.size(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(B, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_38": {
                "variable": {
                    "value": "selected_landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, num_landmarks, D)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qk.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "qk.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_42": {
                "variable": {
                    "value": "cos_sims",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, N, num_landmarks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "qk.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "qk.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "masked_select_64": {
                "variable": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_unnormalised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[:, torch.randint(q.size(-2), (num_samples,), device=q.device), :]",
                            "Subscript"
                        ],
                        [
                            "q",
                            "variable"
                        ]
                    ]
                },
                "mask": {
                    "value": "selected_mask.bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_47": {
                "variable": {
                    "value": "cos_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b n d, b d -> b n",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "qk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.normalize(q_unnormalised, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_47": {
                "variable": {
                    "value": "cos_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(q, landmarks.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rearrange(torch.matmul(landmarks, k.transpose(-1, -2)), 'b l (f p) -> b l f p', f=F)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b l f p, b f p d -> b l f d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.softmax(rearrange(torch.matmul(landmarks, k.transpose(-1, -2)), 'b l (f p) -> b l f p', f=F), dim=-1)",
                            "Call"
                        ],
                        [
                            "Fn.softmax(torch.matmul(landmarks.unsqueeze(-3), k.transpose(-1, -2)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b n l, b l f d -> b n f d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.softmax(torch.matmul(q, landmarks.transpose(-1, -2)), dim=-1)",
                            "Call"
                        ],
                        [
                            "Fn.softmax(torch.matmul(q, landmarks.unsqueeze(-4).transpose(-1, -2)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(q, landmarks.unsqueeze(-4).transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(landmarks.unsqueeze(-3), k.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "input": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.softmax(rearrange(torch.matmul(landmarks, k.transpose(-1, -2)), 'b l (f p) -> b l f p', f=F), dim=-1)",
                            "Call"
                        ],
                        [
                            "Fn.softmax(torch.matmul(landmarks.unsqueeze(-3), k.transpose(-1, -2)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(v, 'b (f p) d -> b f p d', f=F)",
                            "Call"
                        ],
                        [
                            "rearrange(v, 'b (g q) d -> b 1 g q d', g=F)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_100": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b m l, b l f p -> b m f p",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.softmax(torch.matmul(q, landmarks.transpose(-1, -2)), dim=-1)",
                            "Call"
                        ],
                        [
                            "Fn.softmax(torch.matmul(q, landmarks.unsqueeze(-4).transpose(-1, -2)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.softmax(torch.matmul(q, landmarks.transpose(-1, -2)), dim=-1)",
                            "Call"
                        ],
                        [
                            "Fn.softmax(torch.matmul(q, landmarks.unsqueeze(-4).transpose(-1, -2)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kernel_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Fn.softmax(rearrange(torch.matmul(landmarks, k.transpose(-1, -2)), 'b l (f p) -> b l f p', f=F), dim=-1)",
                            "Call"
                        ],
                        [
                            "Fn.softmax(torch.matmul(landmarks.unsqueeze(-3), k.transpose(-1, -2)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_92": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q * scale",
                            "BinOp"
                        ],
                        [
                            "rearrange(q, 'b (f p) d -> (b f) p d', f=F)",
                            "Call"
                        ],
                        [
                            "rearrange(q, '(b f) p d -> b f 1 p d', f=F)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "landmarks.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_112": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q * scale",
                            "BinOp"
                        ],
                        [
                            "rearrange(q, 'b (f p) d -> (b f) p d', f=F)",
                            "Call"
                        ],
                        [
                            "rearrange(q, '(b f) p d -> b f 1 p d', f=F)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "landmarks.unsqueeze(-4).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_114": {
                "input": {
                    "value": "landmarks.unsqueeze(-3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_20": {
                "low": {
                    "value": "q.size(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "input": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.masked_select(q_unnormalised, selected_mask.bool()).reshape(B, -1, D)",
                            "Call"
                        ],
                        [
                            "orthogonal_landmarks(q, k, num_landmarks, subsample_fraction)",
                            "Call"
                        ],
                        [
                            "orthogonal_landmarks(q, k, num_landmarks, subsample_fraction)",
                            "Call"
                        ],
                        [
                            "rearrange(landmarks, '(b f) l d -> b f l d', f=F)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_34": {
                "start": {
                    "value": "qk.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_57": {
                "start": {
                    "value": "qk.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/models/performer_helper.py": {
        "torch": {
            "vstack_59": {
                "variable": {
                    "value": "final_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "block_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "einsum_95": {
                "variable": {
                    "value": "data_dash",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blhd,md->blhm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_normalizer * data",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_97": {
                "variable": {
                    "value": "diag_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(diag_data, dim=data.ndim - 1)",
                            "Call"
                        ],
                        [
                            "diag_data / 2.0",
                            "BinOp"
                        ],
                        [
                            "diag_data.unsqueeze(data.ndim - 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "data.ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_182": {
                "variable": {
                    "value": "kvs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbhm,lbhd->bhmd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks",
                            "Method Argument"
                        ],
                        [
                            "ks",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_194": {
                "variable": {
                    "value": "all_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[ks.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_195": {
                "variable": {
                    "value": "ks_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbhm,l->bhm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks",
                            "Method Argument"
                        ],
                        [
                            "ks",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_273": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_274": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_275": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_279": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bxhd,byhd->bxyh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.multiply(query, 1.0 / math.sqrt(float(dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bxhd,byhd->bxyh', torch.multiply(query, 1.0 / math.sqrt(float(dim))), key)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(attention_scores, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_282": {
                "variable": {
                    "value": "exact_attention_block_output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bxyh,byhd->bxyh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bxhd,byhd->bxyh', torch.multiply(query, 1.0 / math.sqrt(float(dim))), key)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(attention_scores, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_284": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exact_attention_block_output - attention_block_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_294": {
                "variable": {
                    "value": "qpkp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h p r, b h q r -> b h p q",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_kernel_transformation(query, is_query=True, projection_matrix=projection_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_296": {
                "variable": {
                    "value": "qkexp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h p d, b h q d -> b h p q",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_ * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_296": {
                "variable": {
                    "value": "qkexp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_64": {
                "variable": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn((m, d), device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "input": {
                    "value": "torch.diag(multiplier)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "final_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.vstack(block_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_183": {
                "equation": {
                    "value": "lbhm,bhmd->lbhd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qs",
                            "Method Argument"
                        ],
                        [
                            "qs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_196": {
                "equation": {
                    "value": "lbhm,bhm->lbh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qs",
                            "Method Argument"
                        ],
                        [
                            "qs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ceil_235": {
                "variable": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.sum(query) * BIG_CONSTANT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ceil(torch.abs(torch.sum(query) * BIG_CONSTANT))",
                            "Call"
                        ],
                        [
                            "torch.tensor(seed)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_42": {
                "variable": {
                    "value": "unstructured_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(d, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "qr_43": {
                "variable": {
                    "value": "(q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "unstructured_block.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "some": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "unstructured_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(d, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "qr_55": {
                "variable": {
                    "value": "(q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "unstructured_block.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "some": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "current_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "variable"
                        ],
                        [
                            "current_seed + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_70": {
                "input": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(torch.randn((m, d), device=device), p='fro', dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(float(d)) * torch.ones(m).to(device=device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_280": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, length, num_heads, dim).cuda()",
                            "Call"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0 / math.sqrt(float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_285": {
                "input": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(exact_attention_block_output - attention_block_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "current_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "variable"
                        ],
                        [
                            "current_seed + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ceil(torch.abs(torch.sum(query) * BIG_CONSTANT))",
                            "Call"
                        ],
                        [
                            "torch.tensor(seed)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_64": {
                "*size": {
                    "value": "(m, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_166": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_normalizer * data",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_169": {
                "equation": {
                    "value": "blhd,md->blhm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_normalizer * data",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_170": {
                "input": {
                    "value": "data_dash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('blhd,md->blhm', data, projection_matrix)",
                            "Call"
                        ],
                        [
                            "ratio * (torch.exp(data_dash - diag_data - data_dash.amax(last_dims_t, True)) + numerical_stabilizer)",
                            "BinOp"
                        ],
                        [
                            "ratio * (torch.exp(data_dash - diag_data - data_dash.amax(last_dims_t + attention_dims_t, True)) + numerical_stabilizer)",
                            "BinOp"
                        ],
                        [
                            "ratio * torch.einsum('blhd,md->blhm', data, projection_matrix)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_235": {
                "input": {
                    "value": "torch.sum(query) * BIG_CONSTANT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_66": {
                "input": {
                    "value": "float(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_105": {
                "input": {
                    "value": "data_dash - diag_data - data_dash.amax(last_dims_t, True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_109": {
                "input": {
                    "value": "data_dash - diag_data - data_dash.amax(last_dims_t + attention_dims_t, True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "projection_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_235": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, length, num_heads, dim).cuda()",
                            "Call"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slowfast/models/video_model_builder.py": {
        "torch": {
            "zeros_like_72": {
                "variable": {
                    "value": "self.patch_embed_3d.proj.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.patch_embed_3d.proj.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.patch_embed.num_patches + 1, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "cfg.VIT.POS_DROPOUT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.head_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.head_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.st_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 1, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[vit_helper.DividedSpaceTimeBlock(attn_type=cfg.VIT.ATTN_LAYER, dim=self.embed_dim, num_heads=self.num_heads, mlp_ratio=self.mlp_ratio, qkv_bias=self.qkv_bias, drop=self.drop_rate, attn_drop=self.attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer) for i in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_119": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[vit_helper.Block(attn_type=cfg.VIT.ATTN_LAYER, dim=self.embed_dim, num_heads=self.num_heads, mlp_ratio=self.mlp_ratio, qkv_bias=self.qkv_bias, drop=self.drop_rate, attn_drop=self.attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, use_original_code=self.cfg.VIT.USE_ORIGINAL_TRAJ_ATTN_CODE) for i in range(self.depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.pre_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc', nn.Linear(self.embed_dim, hidden_dim)), ('act', act)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_153": {
                "variable": {
                    "value": "self.pre_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_embed.reshape(1, int(math.sqrt(N)), int(math.sqrt(N)), dim).permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "math.sqrt(npatch / N)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "new_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(class_emb.unsqueeze(0), pos_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.patch_embed.num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.temp_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.temporal_resolution, self.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_141": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "total_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_embed, total_pos_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_285": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "self.patch_embed_3d(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "x.reshape(B * T, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(B, T * T2, D2)",
                            "Call"
                        ],
                        [
                            "x + new_pos_embed",
                            "BinOp"
                        ],
                        [
                            "x + total_pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "x + self.st_embed",
                            "BinOp"
                        ],
                        [
                            "blk(x, seq_len=npatch, num_frames=self.temporal_resolution, approx=self.cfg.VIT.APPROX_ATTN_TYPE, num_landmarks=self.cfg.VIT.APPROX_ATTN_DIM)",
                            "Call"
                        ],
                        [
                            "self.norm(x)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.pre_logits(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head_drop(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_101": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.drop_path_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GELU_144": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_161": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_279": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'head%d' % head)(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x_out, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.temporal_resolution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embed_dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "slowfast/models/vit_helper.py": {
        "torch": {
            "einsum_35": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b i d, b j d -> b i j",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qkv[0]",
                            "Subscript"
                        ],
                        [
                            "self.qkv(x).chunk(3, dim=-1)",
                            "Call"
                        ],
                        [
                            "map(lambda t: rearrange(t, 'b n (h d) -> (b h) n d', h=h), (q, k, v))",
                            "Call"
                        ],
                        [
                            "q * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.qkv(x).chunk(3, dim=-1)",
                            "Call"
                        ],
                        [
                            "map(lambda t: rearrange(t, 'b n (h d) -> (b h) n d', h=h), (q, k, v))",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b i j, b j d -> b i d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "JointSpaceTimeAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=proj_drop)",
                            "Call"
                        ],
                        [
                            "TrajectoryAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=proj_drop, use_original_code=use_original_code)",
                            "Call"
                        ],
                        [
                            "q @ k.transpose(-2, -1) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(attn)",
                            "Call"
                        ],
                        [
                            "torch.einsum('b h s d, b h s f d -> b h s f', q2, k2)",
                            "Call"
                        ],
                        [
                            "attn.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(space_attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_125": {
                "variable": {
                    "value": "k_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_k, k_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_v, v_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_out, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.proj_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.proj_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_158": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diagonal_245": {
                "variable": {
                    "value": "x_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(x, 'b (g n) f d -> b g n f d', g=F)",
                            "Call"
                        ],
                        [
                            "torch.diagonal(x_diag, dim1=-4, dim2=-2)",
                            "Call"
                        ],
                        [
                            "rearrange(x_diag, f'b n d f -> b (f n) d', f=F)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_253": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h s d, b h s f d -> b h s f",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_q(x_diag)",
                            "Call"
                        ],
                        [
                            "rearrange(q2, f'b s (h d) -> b h s d', h=h)",
                            "Call"
                        ],
                        [
                            "q2 * self.scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_263": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_out, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_375": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_377": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_378": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_401": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size if type(patch_size) is tuple else to_2tuple(patch_size)",
                            "IfExp"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size if type(patch_size) is tuple else to_2tuple(patch_size)",
                            "IfExp"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_422": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(z_block_size, patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(z_block_size, patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h s f, b h s f d -> b h s d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "JointSpaceTimeAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=proj_drop)",
                            "Call"
                        ],
                        [
                            "TrajectoryAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=proj_drop, use_original_code=use_original_code)",
                            "Call"
                        ],
                        [
                            "q @ k.transpose(-2, -1) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(attn)",
                            "Call"
                        ],
                        [
                            "torch.einsum('b h s d, b h s f d -> b h s f', q2, k2)",
                            "Call"
                        ],
                        [
                            "attn.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(space_attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h s f, b h s f d -> b h s d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "JointSpaceTimeAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=proj_drop)",
                            "Call"
                        ],
                        [
                            "TrajectoryAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=proj_drop, use_original_code=use_original_code)",
                            "Call"
                        ],
                        [
                            "q @ k.transpose(-2, -1) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(attn)",
                            "Call"
                        ],
                        [
                            "torch.einsum('b h s d, b h s f d -> b h s f', q2, k2)",
                            "Call"
                        ],
                        [
                            "attn.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(space_attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_443": {
                "variable": {
                    "value": "self.block_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_449": {
                "variable": {
                    "value": "self.block_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ceil_209": {
                "variable": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.sum(q_) * performer_helper.BIG_CONSTANT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ceil(torch.abs(torch.sum(q_) * performer_helper.BIG_CONSTANT))",
                            "Call"
                        ],
                        [
                            "torch.tensor(seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_228": {
                "variable": {
                    "value": "kv",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h f n r, b h f n d -> b h f r d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "performer_helper.softmax_kernel_transformation(k_, is_query=False, projection_matrix=projection_matrix)",
                            "Call"
                        ],
                        [
                            "map(lambda t: rearrange(t, f'b p h r -> b h p r'), (q_prime, k_prime))",
                            "Call"
                        ],
                        [
                            "rearrange(k_prime, 'b h (f n) r -> b h f n r', f=F)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_229": {
                "variable": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h p r, b h f r d -> b h p f d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "performer_helper.softmax_kernel_transformation(q_, is_query=True, projection_matrix=projection_matrix)",
                            "Call"
                        ],
                        [
                            "map(lambda t: rearrange(t, f'b p h r -> b h p r'), (q_prime, k_prime))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_230": {
                "variable": {
                    "value": "normaliser",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h f n r -> b h f r",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "performer_helper.softmax_kernel_transformation(k_, is_query=False, projection_matrix=projection_matrix)",
                            "Call"
                        ],
                        [
                            "map(lambda t: rearrange(t, f'b p h r -> b h p r'), (q_prime, k_prime))",
                            "Call"
                        ],
                        [
                            "rearrange(k_prime, 'b h (f n) r -> b h f n r', f=F)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_231": {
                "variable": {
                    "value": "normaliser",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h p r, b h f r -> b h p f",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "performer_helper.softmax_kernel_transformation(q_, is_query=True, projection_matrix=projection_matrix)",
                            "Call"
                        ],
                        [
                            "map(lambda t: rearrange(t, f'b p h r -> b h p r'), (q_prime, k_prime))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b q f n, b f n d -> b q f d",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "JointSpaceTimeAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=proj_drop)",
                            "Call"
                        ],
                        [
                            "TrajectoryAttention(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=proj_drop, use_original_code=use_original_code)",
                            "Call"
                        ],
                        [
                            "q @ k.transpose(-2, -1) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(attn)",
                            "Call"
                        ],
                        [
                            "torch.einsum('b h s d, b h s f d -> b h s f', q2, k2)",
                            "Call"
                        ],
                        [
                            "attn.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(space_attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_444": {
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_445": {
                "in_features": {
                    "value": "n_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_450": {
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_451": {
                "in_features": {
                    "value": "n_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_452": {
                "num_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_453": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_454": {
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_455": {
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_209": {
                "input": {
                    "value": "torch.sum(q_) * performer_helper.BIG_CONSTANT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(lambda t: rearrange(t, f'{einops_from} -> {einops_to}', **einops_dims), (q_, k_, v_))",
                            "Call"
                        ],
                        [
                            "map(lambda t: rearrange(t, f'b h p d -> (b h) p d', h=h), (q_, k_, v_))",
                            "Call"
                        ],
                        [
                            "map(lambda t: rearrange(t, f'b h p d -> b p h d'), (q_, k_))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "slowfast/utils/benchmark.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/utils/bn_helper.py": {
        "torch": {
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "input": {
                    "value": "bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_50": {
                "input": {
                    "value": "bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/utils/checkpoint.py": {
        "torch": {
            "save_144": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state': normalized_sd, 'optimizer_state': optimizer.state_dict(), 'cfg': cfg.dump(), 'scaler': loss_scaler.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'model_state': normalized_sd, 'optimizer_state': optimizer.state_dict(), 'cfg': cfg.dump()}",
                            "Dict"
                        ],
                        [
                            "torch.load(f, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_295": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "checkpoint_sd[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[checkpoint_sd[key]] * (model_blob_shape[0] // c2_blob_shape[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "variable": {
                    "value": "state_dict[converted_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "caffe2_checkpoint['blobs'][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clone_257": {
                "variable": {
                    "value": "state_dict[converted_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/utils/distributed.py": {
        "torch": {
            "device_178": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if backend == gloo else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_82": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_rank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_initialized_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_211": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_255": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_28": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "tensors",
                            "variable"
                        ],
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_pad_to_largest_tensor(tensor, group)",
                            "Call"
                        ],
                        [
                            "zip(size_list, tensor_list)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "gathered_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_list",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/utils/metrics.py": {
        "torch": {
            "topk_30": {
                "variable": {
                    "value": "(_top_max_k_vals, top_max_k_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "max(ks)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "all_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.max(ks))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[0].size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ge_93": {
                "input": {
                    "value": "all_correct[:k].float().sum(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "task_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_93": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/utils/misc.py": {
        "torch": {
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_58": {
                "variable": {
                    "value": "mem_usage_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_93": {
                "variable": {
                    "value": "input_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rgb_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "cfg.DATA.NUM_FRAMES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.DATA.TRAIN_CROP_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "cfg.DATA.TRAIN_CROP_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_100": {
                "variable": {
                    "value": "input_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rgb_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "cfg.DATA.NUM_FRAMES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cfg.DATA.TEST_CROP_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "cfg.DATA.TEST_CROP_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 1.0, 0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_device_304": {
                "device": {
                    "value": "gpu_to_work_on",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank % torch.cuda.device_count()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_count_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/utils/multiprocessing.py": {
        "torch": {
            "set_device_59": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_rank",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "slowfast/utils/weight_init_helper.py": {
        "torch": {}
    },
    "slowfast/visualization/async_predictor.py": {
        "torch": {
            "device_291": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_36": {
                "type": {
                    "value": "'cuda:{}'.format(self.gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/visualization/ava_demo_precomputed_boxes.py": {
        "torch": {
            "manual_seed_131": {
                "seed": {
                    "value": "self.cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "box_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full((box_transformed.shape[0], 1), float(0)), box_transformed]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_169": {
                "size": {
                    "value": "(box_transformed.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/visualization/gradcam_utils.py": {
        "torch": {
            "sum_95": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(preds, dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(score)",
                            "Call"
                        ],
                        [
                            "torch.gather(preds, dim=1, index=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_92": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input_clone)",
                            "Call"
                        ],
                        [
                            "self._calculate_localization_map(inputs, labels=labels)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_105": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradients.view(B, C, Tg, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "localization_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * activations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "localization_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "localization_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(weights * activations, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(localization_map)",
                            "Call"
                        ],
                        [
                            "F.interpolate(localization_map, size=(T, H, W), mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(localization_map - localization_map_min) / (localization_map_max - localization_map_min + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "localization_map.data",
                            "Attribute"
                        ],
                        [
                            "localization_map in enumerate(localization_maps)",
                            "Call"
                        ],
                        [
                            "localization_map.squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "localization_map.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_112": {
                "variable": {
                    "value": "localization_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "localization_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(weights * activations, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(localization_map)",
                            "Call"
                        ],
                        [
                            "F.interpolate(localization_map, size=(T, H, W), mode='trilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(localization_map - localization_map_min) / (localization_map_max - localization_map_min + 1e-06)",
                            "BinOp"
                        ],
                        [
                            "localization_map.data",
                            "Attribute"
                        ],
                        [
                            "localization_map in enumerate(localization_maps)",
                            "Call"
                        ],
                        [
                            "localization_map.squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "localization_map.cpu()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(T, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "localization_map_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "localization_map_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(localization_map.view(B, -1), dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(localization_map_min, shape=(B, 1, 1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, 1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "localization_map_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "localization_map_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(localization_map.view(B, -1), dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(localization_map_max, shape=(B, 1, 1, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(B, 1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.colormap(localization_map)",
                            "Call"
                        ],
                        [
                            "heatmap[:, :, :, :, :3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(heatmap)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_88": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input_clone)",
                            "Call"
                        ],
                        [
                            "self._calculate_localization_map(inputs, labels=labels)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_161": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_167": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_119": {
                "input": {
                    "value": "localization_map.view(B, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_122": {
                "input": {
                    "value": "localization_map.view(B, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/visualization/prediction_vis.py": {
        "torch": {
            "ones_56": {
                "variable": {
                    "value": "subset_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(labels),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_62": {
                "variable": {
                    "value": "preds_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "video_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.nonzero()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(vid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_101": {
                "variable": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vid.permute(1, 2, 3, 0)",
                            "Call"
                        ],
                        [
                            "data_utils.revert_tensor_normalize(vid.cpu(), self.cfg.DATA.MEAN, self.cfg.DATA.STD)",
                            "Call"
                        ],
                        [
                            "self.video_vis.draw_clip(vid, preds)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(vid)).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(vid, dim=0)",
                            "Call"
                        ],
                        [
                            "vid",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/visualization/predictor.py": {
        "torch": {
            "full_82": {
                "variable": {
                    "value": "index_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bboxes.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "bboxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index_pad, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "current_device_180": {
                "variable": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_99": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_95": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/visualization/tensorboard_vis.py": {
        "torch": {
            "permute_428": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_53": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.OUTPUT_DIR, 'runs-{}'.format(cfg.TRAIN.DATASET))",
                            "Call"
                        ],
                        [
                            "os.path.join(cfg.OUTPUT_DIR, cfg.TENSORBOARD.LOG_DIR)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_418": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_318": {},
            "cat_397": {
                "variable": {
                    "value": "reshaped_array",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reshaped_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "reshaped_array.view(-1, nrow)",
                            "Call"
                        ],
                        [
                            "array",
                            "variable"
                        ],
                        [
                            "array.view(-1, *last2_dims)",
                            "Call"
                        ],
                        [
                            "add_heatmap(reshaped_array)",
                            "Call"
                        ],
                        [
                            "[add_heatmap(array_2d).unsqueeze(0) for array_2d in reshaped_array]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(reshaped_array, dim=0)",
                            "Call"
                        ],
                        [
                            "reshaped_array.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "slowfast/visualization/video_visualizer.py": {
        "torch": {
            "from_numpy_677": {
                "variable": {
                    "value": "self.thres",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "thres_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full(shape=(self.num_classes,), fill_value=self.lower_thres)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_446": {
                "variable": {
                    "value": "(top_scores, top_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "self.top_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_453": {
                "variable": {
                    "value": "top_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nonzero(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_453": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred >= self.thres",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "tools/test_net.py": {
        "torch": {
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_73": {
                "enabled": {
                    "value": "cfg.SOLVER.USE_MIXED_PRECISION",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net.py": {
        "torch": {
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_497": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_83": {
                "enabled": {
                    "value": "cfg.SOLVER.USE_MIXED_PRECISION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_300": {
                "enabled": {
                    "value": "cfg.SOLVER.USE_MIXED_PRECISION",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}