{
    "converter/converter_common.py": {
        "tensorflow": {
            "convert_variables_to_constants_11": {
                "variable": {
                    "value": "constant_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "write_graph_14": {
                "graph_or_graph_def": {
                    "value": "constant_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, graph_def, output_node_names=[output_name])",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": ".",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "model_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'model.pb'",
                            "MethodArgument"
                        ]
                    ]
                },
                "as_text": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "converter/keras_converter.py": {
        "tensorflow": {
            "get_session_7": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_11": {
                "variable": {
                    "value": "output_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "output_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sr_output'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "converter/pytorch_converter.py": {
        "tensorflow": {
            "get_session_23": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_27": {
                "variable": {
                    "value": "output_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras_model.outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "output_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sr_output'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "converter/tensorflow_converter.py": {
        "tensorflow": {
            "identity_8": {
                "variable": {
                    "value": "output_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'sr_output'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate_sr.py": {
        "tensorflow": {
            "set_verbosity_31": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_56": {
                "msg": {
                    "value": "'found %d images' % len(image_path_list)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_103": {
                "msg": {
                    "value": "finished",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_81": {
                "msg": {
                    "value": "%s",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "image_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.splitext(filename)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_108": {
                "msg": {
                    "value": "'- %s (average): %s' % (evaluator_name, str(np.mean(evaluator_evaluation_list)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_86": {
                "msg": {
                    "value": "'- %s: %s' % (evaluator_name, str(evaluation[evaluator_name]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "evaluators/ssim.py": {
        "tensorflow": {
            "Graph_17": {
                "variable": {
                    "value": "self.tf_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "self.tf_image1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.tf_image2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ssim_22": {
                "variable": {
                    "value": "self.tf_ssim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "img1": {
                    "value": "self.tf_image1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "img2": {
                    "value": "self.tf_image2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_val": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_24": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_25": {
                "variable": {
                    "value": "self.tf_session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(device_count={'GPU': 0})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_25": {
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "get_sr.py": {
        "tensorflow": {
            "set_verbosity_32": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_57": {
                "msg": {
                    "value": "'found %d images' % len(image_path_list)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_109": {
                "msg": {
                    "value": "finished",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_110": {
                "msg": {
                    "value": "'averaged running time per image: %.3f sec' % np.mean(running_time_list)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_105": {
                "msg": {
                    "value": "'%s -> %s, %.3f sec' % (input_path, output_path, running_time)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "srgraph.py": {
        "tensorflow": {
            "Graph_34": {
                "variable": {
                    "value": "self.tf_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_41": {
                "variable": {
                    "value": "self.tf_session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(log_device_placement=False, allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.tf_graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GraphDef_66": {
                "variable": {
                    "value": "model_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_list",
                            "Name"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * ((self.config['pixel_range'][1] - self.config['pixel_range'][0]) / 255.0) + self.config['pixel_range'][0]",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.import_graph_def(graph_def, name='model', input_map=input_map, return_elements=[self.config['output_name'] + ':0'])[0]",
                            "Subscript"
                        ],
                        [
                            "(y - self.config['pixel_range'][0]) * (255.0 / (self.config['pixel_range'][1] - self.config['pixel_range'][0]))",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(y, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.tf_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_39": {
                "variable": {
                    "value": "self.tf_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_65": {
                "name": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_90": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "input_map": {
                    "value": "input_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "return_elements": {
                    "value": "[self.config['output_name'] + ':0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_42": {
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/downscale/downscale_opencv.py": {
        "tensorflow": {
            "DEFINE_string_11": {
                "name": {
                    "value": "input_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "LR",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Base path of the input images.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_12": {
                "name": {
                    "value": "output_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "HR",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Base path of the output (downscaled) images.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_13": {
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Downscaling factor.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_18": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_22": {
                "msg": {
                    "value": "'data: %d images are prepared' % len(image_name_list)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_37": {
                "msg": {
                    "value": "finished",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_29": {
                "msg": {
                    "value": "'%d/%d, %s' % (i + 1, len(image_name_list), image_name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/downscale/downscale_tf.py": {
        "tensorflow": {
            "Graph_20": {
                "variable": {
                    "value": "tf_downscale_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_string_10": {
                "name": {
                    "value": "input_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "LR",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Base path of the input images.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_11": {
                "name": {
                    "value": "output_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "HR",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Base path of the output (downscaled) images.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_12": {
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Downscaling factor.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_17": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "tf_input_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "tf_output_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "tf_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_26": {
                "variable": {
                    "value": "tf_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf_input_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_png_27": {
                "variable": {
                    "value": "tf_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(tf_input_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(tf_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([tf_image], size=[tf.shape(tf_image)[0] // tf_scale, tf.shape(tf_image)[1] // tf_scale], align_corners=True)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf_image, 0.0, 255.0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(tf_image)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "tf_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(tf_image, 0.0, 255.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_30": {
                "variable": {
                    "value": "tf_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(tf_input_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(tf_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([tf_image], size=[tf.shape(tf_image)[0] // tf_scale, tf.shape(tf_image)[1] // tf_scale], align_corners=True)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf_image, 0.0, 255.0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(tf_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "write_file_31": {
                "variable": {
                    "value": "tf_downscale_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "tf_output_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, [])",
                            "Call"
                        ]
                    ]
                },
                "contents": {
                    "value": "tf_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(tf_input_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(tf_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([tf_image], size=[tf.shape(tf_image)[0] // tf_scale, tf.shape(tf_image)[1] // tf_scale], align_corners=True)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf_image, 0.0, 255.0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(tf_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_33": {
                "variable": {
                    "value": "tf_downscale_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_34": {
                "variable": {
                    "value": "tf_downscale_session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(device_count={'GPU': 0})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_41": {
                "msg": {
                    "value": "'data: %d images are prepared' % len(image_name_list)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_58": {
                "msg": {
                    "value": "finished",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_54": {
                "msg": {
                    "value": "'%d/%d, %s' % (i + 1, len(image_name_list), image_name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "resize_bicubic_28": {
                "images": {
                    "value": "[tf_image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[tf.shape(tf_image)[0] // tf_scale, tf.shape(tf_image)[1] // tf_scale]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_29": {
                "t": {
                    "value": "tf_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(tf_input_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(tf_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([tf_image], size=[tf.shape(tf_image)[0] // tf_scale, tf.shape(tf_image)[1] // tf_scale], align_corners=True)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf_image, 0.0, 255.0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(tf_image)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_34": {
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "tf_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(tf_input_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(tf_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([tf_image], size=[tf.shape(tf_image)[0] // tf_scale, tf.shape(tf_image)[1] // tf_scale], align_corners=True)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf_image, 0.0, 255.0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(tf_image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/image_utils.py": {
        "tensorflow": {
            "Graph_9": {
                "variable": {
                    "value": "self.tf_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_33": {
                "variable": {
                    "value": "self.tf_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.tf_image_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_13": {
                "variable": {
                    "value": "tf_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.tf_image_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_image_14": {
                "variable": {
                    "value": "tf_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(self.tf_image_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(tf_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(self.tf_image)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_18": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_19": {
                "variable": {
                    "value": "self.tf_session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(device_count={'GPU': 0})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.tf_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.tf_image_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "encode_png_38": {
                "variable": {
                    "value": "tf_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "self.tf_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "write_file_39": {
                "variable": {
                    "value": "tf_write_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.tf_image_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(self.tf_image_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(tf_image, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_png(self.tf_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_43": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_44": {
                "variable": {
                    "value": "self.tf_session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(device_count={'GPU': 0})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_19": {
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ConfigProto_44": {
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    }
}