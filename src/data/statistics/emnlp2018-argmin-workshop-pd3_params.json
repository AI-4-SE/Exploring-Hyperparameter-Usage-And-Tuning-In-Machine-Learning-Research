{
    "ArgMin/experiment/transfer/evaluation/MTL.py": {
        "sklearn": {
            "accuracy_score_52": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(split_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(predictions, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_55": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(split_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(predictions, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ArgMin/experiment/transfer/evaluation/STL.py": {
        "sklearn": {
            "accuracy_score_49": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(split_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(predictions, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_52": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(split_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(predictions, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ArgMin/experiment/transfer/model/__init__.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "self.input_sentence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.input_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, len(data.classes)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_31": {
                "variable": {
                    "value": "self.loss_individual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_initializer_19": {
                "variable": {
                    "value": "embeddings_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "embeddings_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "data.embeddings.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embeddings_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(data.embeddings)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_lookup_27": {
                "variable": {
                    "value": "self.embeddings_sentence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddings', data.embeddings.shape, dtype=tf.float32, initializer=embeddings_init, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_sentence",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_37": {
                "name": {
                    "value": "Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_42": {
                "variable": {
                    "value": "self.__summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_18": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_18": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_33": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "self.loss_individual",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ArgMin/experiment/transfer/model/avg_wordembeddings.py": {
        "tensorflow": {
            "reduce_sum_11": {
                "variable": {
                    "value": "n_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "non_zero_tokens(tf.to_float(self.input_sentence))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_16": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(avg, W2, b2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_17": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.xw_plus_b(avg, W2, b2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(prediction, self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(prediction, W3, b3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_21": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.xw_plus_b(avg, W2, b2))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(prediction, self.dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.xw_plus_b(prediction, W3, b3)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W3', [self.embedding_size / 4, len(data.classes)])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('b3', [len(data.classes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_36": {
                "x": {
                    "value": "tokens / tf.reduce_max(tokens, [1], keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_12": {
                "input_tensor": {
                    "value": "self.embeddings_sentence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "xw_plus_b_16": {
                "x": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.embeddings_sentence, axis=1, keep_dims=False) / n_tokens",
                            "BinOp"
                        ]
                    ]
                },
                "weights": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W2', [self.embedding_size, self.embedding_size / 4])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('b2', [self.embedding_size / 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_36": {
                "input_tensor": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_11": {
                "x": {
                    "value": "self.input_sentence",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ArgMin/experiment/transfer/model/cnn/MTL.py": {
        "tensorflow": {
            "reduce_max_20": {
                "variable": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.nn.relu(self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length)), axis=1, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(representation_sentence, self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_38": {
                "variable": {
                    "value": "prediction_task_A",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.nn.relu(self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length)), axis=1, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(representation_sentence, self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W2_task_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W2_task_A', [self.n_filters, len(data.classes)])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b2_task_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('b2_task_A', [len(data.classes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_39": {
                "variable": {
                    "value": "prediction_task_B",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.nn.relu(self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length)), axis=1, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(representation_sentence, self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W2_task_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W2_task_B', [self.n_filters, len(data.classes)])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b2_task_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('b2_task_B', [len(data.classes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "self.predict_task_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "prediction_task_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(representation_sentence, W2_task_A, b2_task_A)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "self.predict_task_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "prediction_task_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(representation_sentence, W2_task_B, b2_task_B)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "cnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bias_add_70": {
                "variable": {
                    "value": "convoluted",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(cnn_input, self.W_conv1, strides=[1, 1, self.embedding_size, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b_conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_42": {
                "variable": {
                    "value": "self.loss_individual_task_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "prediction_task_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(representation_sentence, W2_task_A, b2_task_A)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_45": {
                "variable": {
                    "value": "self.loss_task_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_individual_task_A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_48": {
                "variable": {
                    "value": "self.loss_individual_task_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "prediction_task_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(representation_sentence, W2_task_B, b2_task_B)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "self.loss_task_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss_individual_task_B",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_56": {
                "name": {
                    "value": "Loss-Task-A",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_task_A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_57": {
                "name": {
                    "value": "Loss-Task-B",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_task_B",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "convoluted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(cnn_input, self.W_conv1, strides=[1, 1, self.embedding_size, 1], padding='SAME'), self.b_conv1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, self.n_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_21": {
                "features": {
                    "value": "self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Loss_A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "Loss_B",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "input": {
                    "value": "cnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(item, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, self.embedding_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ArgMin/experiment/transfer/model/cnn/STL.py": {
        "tensorflow": {
            "reduce_max_20": {
                "variable": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.nn.relu(self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length)), axis=1, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(representation_sentence, self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_35": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "representation_sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.nn.relu(self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length)), axis=1, keep_dims=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(representation_sentence, self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W2', [self.n_filters, len(data.classes)])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable('b2', [len(data.classes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_47": {
                "variable": {
                    "value": "cnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bias_add_49": {
                "variable": {
                    "value": "convoluted",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(cnn_input, self.W_conv1, strides=[1, 1, self.embedding_size, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.b_conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "convoluted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(cnn_input, self.W_conv1, strides=[1, 1, self.embedding_size, 1], padding='SAME'), self.b_conv1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sequence_length, self.n_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_21": {
                "features": {
                    "value": "self.cnn_representation_raw(self.embeddings_sentence, self.sentence_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_50": {
                "input": {
                    "value": "cnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(item, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.W_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, self.embedding_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ArgMin/experiment/transfer/train/MTL.py": {
        "tensorflow": {
            "GradientDescentOptimizer_26": {
                "variable": {
                    "value": "optimizer_task_A",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_27": {
                "variable": {
                    "value": "optimizer_task_B",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "Minim_A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Minim_B",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_30": {
                "variable": {
                    "value": "optimizer_task_A",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_32": {
                "variable": {
                    "value": "optimizer_task_B",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_34": {
                "variable": {
                    "value": "optimizer_task_A",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_35": {
                "variable": {
                    "value": "optimizer_task_B",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "Adam_A",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "Adam_B",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ArgMin/experiment/utils/training.py": {
        "tensorflow": {
            "placeholder_93": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_232": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "AdamOptimizer_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ArgMin/experiment/utils/variables.py": {
        "tensorflow": {
            "get_variable_9": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_regularizer(regularization)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_regularizer(regularization)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_16": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(value)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_regularizer(regularization)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "l2_regularizer(regularization)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ArgMin/run_single.py": {
        "tensorflow": {
            "ConfigProto_24": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_53": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ArgMin/run_transfer.py": {
        "tensorflow": {
            "ConfigProto_12": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_128": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_181": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_213": {
                "config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}