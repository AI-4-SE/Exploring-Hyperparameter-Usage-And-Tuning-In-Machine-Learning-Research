{
    "Experiment_Component/AModelSuit.py": {
        "tensorflow": {
            "Checkpoint_99": {
                "variable": {
                    "value": "self._ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._model.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "net": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CheckpointManager_102": {
                "variable": {
                    "value": "self._ckpt_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "self._ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "directory": {
                    "value": "self._model_dir + '/tf_ckpts'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_444": {
                "obj": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "self._model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "executing_eagerly_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Experiments/experimentFunctions.py": {
        "tensorflow": {
            "cardinality_110": {
                "variable": {
                    "value": "len_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_ds.cache()",
                            "Call"
                        ],
                        [
                            "train_ds.shuffle(len_train, reshuffle_each_iteration=True)",
                            "Call"
                        ],
                        [
                            "train_ds.map(dataset_augmentor_train.generate_sample_output, num_parallel_calls=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ],
                        [
                            "train_ds.batch(batch_size, drop_remainder=True).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ]
                    ]
                }
            },
            "cardinality_111": {
                "variable": {
                    "value": "len_eval",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_ds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval_ds.cache()",
                            "Call"
                        ],
                        [
                            "eval_ds.shuffle(len_eval, reshuffle_each_iteration=False, seed=42)",
                            "Call"
                        ],
                        [
                            "eval_ds.map(dataset_augmentor_val.generate_sample_output, num_parallel_calls=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ],
                        [
                            "eval_ds.batch(batch_size).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ]
                    ]
                }
            },
            "cardinality_112": {
                "variable": {
                    "value": "len_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "test_ds.cache()",
                            "Call"
                        ],
                        [
                            "test_ds.shuffle(len_test, reshuffle_each_iteration=False, seed=42)",
                            "Call"
                        ],
                        [
                            "test_ds.map(dataset_augmentor_val.generate_sample_output, num_parallel_calls=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ],
                        [
                            "test_ds.batch(batch_size).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ]
                    ]
                }
            },
            "cardinality_160": {
                "variable": {
                    "value": "batches_in_epoch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_ds.cache()",
                            "Call"
                        ],
                        [
                            "train_ds.shuffle(len_train, reshuffle_each_iteration=True)",
                            "Call"
                        ],
                        [
                            "train_ds.map(dataset_augmentor_train.generate_sample_output, num_parallel_calls=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ],
                        [
                            "train_ds.batch(batch_size, drop_remainder=True).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cardinality_213": {
                "variable": {
                    "value": "batches_in_epoch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_ds.cache()",
                            "Call"
                        ],
                        [
                            "train_ds.shuffle(len_train, reshuffle_each_iteration=True)",
                            "Call"
                        ],
                        [
                            "train_ds.map(dataset_augmentor_train.generate_sample_output, num_parallel_calls=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ],
                        [
                            "train_ds.batch(batch_size, drop_remainder=True).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/Backbones/CDBackbone.py": {
        "tensorflow": {
            "Sequential_28": {
                "variable": {
                    "value": "self.cd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Conv2DTranspose(filters=128 * width_multiplier, kernel_size=4, strides=(2, 2)), SyncBatchNormalization(), Activation('relu'), Conv2DTranspose(filters=64 * width_multiplier, kernel_size=4, strides=(2, 2)), SyncBatchNormalization(), Activation('relu'), Conv2DTranspose(filters=32 * width_multiplier, kernel_size=layer3_kernel_size, strides=(2, 2)), SyncBatchNormalization(), Activation('relu'), Conv2DTranspose(filters=3, kernel_size=last_kernel_size, strides=last_stride)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_30": {
                "filters": {
                    "value": "128 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_32": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_33": {
                "filters": {
                    "value": "64 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_35": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_36": {
                "filters": {
                    "value": "32 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "layer3_kernel_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_38": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_39": {
                "filters": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "last_kernel_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "last_stride",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "Experiment_Component/Models/Backbones/CDResNetBackbone.py": {
        "tensorflow": {
            "Sequential_24": {
                "variable": {
                    "value": "self.cd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Reshape(target_shape=(1, 1, -1)), Conv2DTranspose(filters=256 * width_multiplier, kernel_size=3, strides=(2, 2), padding='SAME', kernel_initializer=VarianceScaling(), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay)), SyncBatchNormalization(), Activation('relu'), Conv2DTranspose(filters=128 * width_multiplier, kernel_size=3, strides=(2, 2), padding='SAME', kernel_initializer=VarianceScaling(), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay)), SyncBatchNormalization(), Activation('relu'), Conv2DTranspose(filters=64 * width_multiplier, kernel_size=3, strides=(2, 2), padding='SAME', kernel_initializer=VarianceScaling(), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay)), SyncBatchNormalization(), Activation('relu'), Conv2DTranspose(filters=32 * width_multiplier, kernel_size=3, strides=(2, 2), padding='SAME', kernel_initializer=VarianceScaling(), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay)), SyncBatchNormalization(), Activation('relu'), Conv2DTranspose(filters=16 * width_multiplier, kernel_size=3, strides=(2, 2), padding='SAME', kernel_initializer=VarianceScaling(), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay)), SyncBatchNormalization(), Activation('relu'), Conv2DTranspose(filters=3 * width_multiplier, kernel_size=3, strides=(1, 1), padding='SAME', kernel_initializer=VarianceScaling(), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Reshape_26": {
                "target_shape": {
                    "value": "(1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_27": {
                "filters": {
                    "value": "256 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "VarianceScaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_30": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_31": {
                "filters": {
                    "value": "128 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "VarianceScaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_34": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_35": {
                "filters": {
                    "value": "64 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "VarianceScaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_38": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_39": {
                "filters": {
                    "value": "32 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "VarianceScaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_42": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_43": {
                "filters": {
                    "value": "16 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "VarianceScaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_46": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_47": {
                "filters": {
                    "value": "3 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "VarianceScaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "VarianceScaling_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarianceScaling_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarianceScaling_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarianceScaling_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarianceScaling_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarianceScaling_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/Backbones/CEBackbone.py": {
        "tensorflow": {
            "Sequential_29": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[InputLayer(input_shape=input_shape), Conv2D(filters=32 * width_multiplier, kernel_size=3 + kernel_size_add, strides=(2, 2)), SyncBatchNormalization(), Activation('relu'), Conv2D(filters=64 * width_multiplier, kernel_size=3 + kernel_size_add, strides=(2, 2)), SyncBatchNormalization(), Activation('relu'), Conv2D(filters=128 * width_multiplier, kernel_size=3 + kernel_size_add, strides=(2, 2)), SyncBatchNormalization(), Activation('relu'), Conv2D(filters=latent_dim, kernel_size=2 + kernel_size_add, strides=last_stride), SyncBatchNormalization(), Activation('relu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InputLayer_31": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2D_32": {
                "filters": {
                    "value": "32 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3 + kernel_size_add",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_34": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_35": {
                "filters": {
                    "value": "64 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3 + kernel_size_add",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_37": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_38": {
                "filters": {
                    "value": "128 * width_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3 + kernel_size_add",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_40": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_41": {
                "filters": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2 + kernel_size_add",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "last_stride",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "SyncBatchNormalization_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_43": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/Backbones/NonLinearHead.py": {
        "tensorflow": {
            "Sequential_21": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Dense(input_shape), SyncBatchNormalization(), Activation('relu'), Dense(feature_dim), SyncBatchNormalization()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_25": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_26": {
                "units": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNormalization_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/Backbones/ResNetBackbone.py": {
        "tensorflow": {
            "Input_91": {
                "variable": {
                    "value": "img_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Model_137": {
                "variable": {
                    "value": "resNet",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "img_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='SAME', data_format=data_format)(inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=3, strides=stride, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=64 * width_multiplier, block_fn=block_fn, blocks=layers[0], strides=1, name='block_group1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=128 * width_multiplier, block_fn=block_fn, blocks=layers[1], strides=2, name='block_group2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=256 * width_multiplier, block_fn=block_fn, blocks=layers[2], strides=2, name='block_group3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=512 * width_multiplier, block_fn=block_fn, blocks=layers[3], strides=2, name='block_group4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=self.latent_dim, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='avg_pool')(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(self.classes, activation='softmax', name='fcX')(inputs)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, strides, use_projection=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, 1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.fixed_padding(inputs, kernel_size, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "SyncBatchNormalization(axis=axis, center=center, scale=scale, momentum=self.batch_norm_decay, epsilon=self.batch_norm_epsilon, gamma_initializer=gamma_initializer)(inputs)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(inputs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "resNet",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_101": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='SAME', data_format=data_format)(inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=3, strides=stride, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=64 * width_multiplier, block_fn=block_fn, blocks=layers[0], strides=1, name='block_group1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=128 * width_multiplier, block_fn=block_fn, blocks=layers[1], strides=2, name='block_group2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=256 * width_multiplier, block_fn=block_fn, blocks=layers[2], strides=2, name='block_group3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=512 * width_multiplier, block_fn=block_fn, blocks=layers[3], strides=2, name='block_group4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=self.latent_dim, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='avg_pool')(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(self.classes, activation='softmax', name='fcX')(inputs)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, strides, use_projection=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, 1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.fixed_padding(inputs, kernel_size, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "SyncBatchNormalization(axis=axis, center=center, scale=scale, momentum=self.batch_norm_decay, epsilon=self.batch_norm_epsilon, gamma_initializer=gamma_initializer)(inputs)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(inputs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_103": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='SAME', data_format=data_format)(inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=3, strides=stride, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=64 * width_multiplier, block_fn=block_fn, blocks=layers[0], strides=1, name='block_group1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=128 * width_multiplier, block_fn=block_fn, blocks=layers[1], strides=2, name='block_group2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=256 * width_multiplier, block_fn=block_fn, blocks=layers[2], strides=2, name='block_group3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=512 * width_multiplier, block_fn=block_fn, blocks=layers[3], strides=2, name='block_group4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=self.latent_dim, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='avg_pool')(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(self.classes, activation='softmax', name='fcX')(inputs)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, strides, use_projection=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, 1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.fixed_padding(inputs, kernel_size, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "SyncBatchNormalization(axis=axis, center=center, scale=scale, momentum=self.batch_norm_decay, epsilon=self.batch_norm_epsilon, gamma_initializer=gamma_initializer)(inputs)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(inputs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_108": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='SAME', data_format=data_format)(inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=3, strides=stride, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=64 * width_multiplier, block_fn=block_fn, blocks=layers[0], strides=1, name='block_group1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=128 * width_multiplier, block_fn=block_fn, blocks=layers[1], strides=2, name='block_group2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=256 * width_multiplier, block_fn=block_fn, blocks=layers[2], strides=2, name='block_group3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=512 * width_multiplier, block_fn=block_fn, blocks=layers[3], strides=2, name='block_group4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=self.latent_dim, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='avg_pool')(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(self.classes, activation='softmax', name='fcX')(inputs)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, strides, use_projection=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, 1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.fixed_padding(inputs, kernel_size, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "SyncBatchNormalization(axis=axis, center=center, scale=scale, momentum=self.batch_norm_decay, epsilon=self.batch_norm_epsilon, gamma_initializer=gamma_initializer)(inputs)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(inputs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_113": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='SAME', data_format=data_format)(inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=3, strides=stride, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=64 * width_multiplier, block_fn=block_fn, blocks=layers[0], strides=1, name='block_group1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=128 * width_multiplier, block_fn=block_fn, blocks=layers[1], strides=2, name='block_group2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=256 * width_multiplier, block_fn=block_fn, blocks=layers[2], strides=2, name='block_group3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=512 * width_multiplier, block_fn=block_fn, blocks=layers[3], strides=2, name='block_group4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=self.latent_dim, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='avg_pool')(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(self.classes, activation='softmax', name='fcX')(inputs)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, strides, use_projection=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, 1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.fixed_padding(inputs, kernel_size, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "SyncBatchNormalization(axis=axis, center=center, scale=scale, momentum=self.batch_norm_decay, epsilon=self.batch_norm_epsilon, gamma_initializer=gamma_initializer)(inputs)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(inputs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_164": {
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=7, strides=2, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='SAME', data_format=data_format)(inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=img_input, filters=64 * width_multiplier, kernel_size=3, strides=stride, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=64 * width_multiplier, block_fn=block_fn, blocks=layers[0], strides=1, name='block_group1', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=128 * width_multiplier, block_fn=block_fn, blocks=layers[1], strides=2, name='block_group2', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=256 * width_multiplier, block_fn=block_fn, blocks=layers[2], strides=2, name='block_group3', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.block_group(inputs=inputs, filters=512 * width_multiplier, block_fn=block_fn, blocks=layers[3], strides=2, name='block_group4', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=self.latent_dim, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='avg_pool')(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(self.classes, activation='softmax', name='fcX')(inputs)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, strides, use_projection=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "block_fn(inputs, filters, 1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=filters, kernel_size=3, strides=strides, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.conv2d_fixed_padding(inputs=inputs, filters=4 * filters, kernel_size=1, strides=1, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.batch_norm_relu(inputs, relu=False, init_zero=True, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "self.fixed_padding(inputs, kernel_size, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "SyncBatchNormalization(axis=axis, center=center, scale=scale, momentum=self.batch_norm_decay, epsilon=self.batch_norm_epsilon, gamma_initializer=gamma_initializer)(inputs)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(inputs)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Zeros_292": {
                "variable": {
                    "value": "gamma_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ones_294": {
                "variable": {
                    "value": "gamma_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_133": {
                "name": {
                    "value": "avg_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_195": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_232": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_251": {
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME if strides == 1 else VALID",
                    "type": "IfExp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "VarianceScaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_273": {
                "padding": {
                    "value": "(pad_beg, pad_end)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNormalization_301": {
                "axis": {
                    "value": "axis",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "center": {
                    "value": "center",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self.batch_norm_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.batch_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma_initializer": {
                    "value": "gamma_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Zeros()",
                            "Call"
                        ],
                        [
                            "Ones()",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPooling2D_111": {
                "pool_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_135": {
                "units": {
                    "value": "self.classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "fcX",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_304": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VarianceScaling_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/Backbones/ResNetNonLinearHead.py": {
        "tensorflow": {
            "Sequential_27": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Dense(input_shape, use_bias=False, kernel_initializer=RandomNormal(stddev=0.01), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay)), SyncBatchNormalization(center=True, scale=True, momentum=self.batch_norm_decay, epsilon=self.batch_norm_epsilon, gamma_initializer=Ones()), Activation('relu'), Dense(feature_dim, use_bias=False, kernel_initializer=RandomNormal(stddev=0.01), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay)), SyncBatchNormalization(center=False, scale=True, momentum=self.batch_norm_decay, epsilon=self.batch_norm_epsilon, gamma_initializer=Ones())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "units": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_31": {
                "center": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.batch_norm_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.batch_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma_initializer": {
                    "value": "Ones()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_33": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_34": {
                "units": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_36": {
                "center": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.batch_norm_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.batch_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma_initializer": {
                    "value": "Ones()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomNormal_29": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Ones_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomNormal_34": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Ones_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/PretextModels/CAE.py": {
        "tensorflow": {
            "Adam_28": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "model_config['learningRate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_29": {
                "variable": {
                    "value": "self.loss_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_48": {
                "variable": {
                    "value": "self.last_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "loss_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_obj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.loss_object(labels, predictions[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss_obj, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_93": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_94": {
                "name": {
                    "value": "obj_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_95": {
                "name": {
                    "value": "reg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "Autoencoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_98": {
                "name": {
                    "value": "loss_debug",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1] + outputs[0][2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_99": {
                "name": {
                    "value": "learningRate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.optimizer.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_100": {
                "name": {
                    "value": "input_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "data[self.input_name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_101": {
                "name": {
                    "value": "output_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "data[self.output_name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_102": {
                "name": {
                    "value": "reconstructed_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[1][0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_103": {
                "name": {
                    "value": "dov_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "abs(data[self.input_name][0] - outputs[1][0][0])",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_119": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_77": {
                "inputs": {
                    "value": "self.decoder.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/PretextModels/RCAE.py": {
        "tensorflow": {
            "Adam_28": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "model_config['learningRate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_29": {
                "variable": {
                    "value": "self.loss_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalAccuracy_30": {
                "variable": {
                    "value": "self.accuracy_metrics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_49": {
                "variable": {
                    "value": "self.last_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Flatten(), Dense(model_config['numClasses'], kernel_initializer=RandomNormal(stddev=0.01), bias_initializer=Zeros(), kernel_regularizer=tf.keras.regularizers.l2(self.weight_decay), bias_regularizer=tf.keras.regularizers.l2(self.weight_decay))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_95": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_96": {
                "name": {
                    "value": "obj_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_97": {
                "name": {
                    "value": "reg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_98": {
                "name": {
                    "value": "rotation_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Flatten(), Dense(model_config['numClasses'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_61": {
                "name": {
                    "value": "RAutoencoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_101": {
                "name": {
                    "value": "loss_debug",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1] + outputs[0][2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_102": {
                "name": {
                    "value": "learningRate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.optimizer.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_103": {
                "name": {
                    "value": "input_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "data[self.input_name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_104": {
                "name": {
                    "value": "label",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.argmax(data[self.output_name][0], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_79": {
                "inputs": {
                    "value": "self.decoder.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "input": {
                    "value": "data[self.output_name][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "model_config['numClasses']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "RandomNormal(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "Zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Flatten_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_47": {
                "units": {
                    "value": "model_config['numClasses']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RandomNormal_42": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Zeros_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/PretextModels/SimClr.py": {
        "tensorflow": {
            "Adam_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "model_config['learningRate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_31": {
                "variable": {
                    "value": "self.loss_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalAccuracy_32": {
                "variable": {
                    "value": "self.accuracy_metrics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_53": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_96": {
                "variable": {
                    "value": "(hidden1, hidden2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.l2_normalize(hidden, -1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_118": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "batch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_119": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(hidden1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_128": {
                "variable": {
                    "value": "loss_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.range(batch_size), batch_size * 2)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.concat([logits_ab, logits_aa], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_129": {
                "variable": {
                    "value": "loss_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.range(batch_size), batch_size * 2)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.concat([logits_ba, logits_bb], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_95": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.l2_normalize(hidden, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_145": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "obj_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_147": {
                "name": {
                    "value": "reg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_148": {
                "name": {
                    "value": "contrastive_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "SimClr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[data['image'], data['image2']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "hidden1_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Name"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "a": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "hidden2_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden2",
                            "Name"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "a": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "hidden2_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden2",
                            "Name"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "a": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "hidden1_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "Name"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_151": {
                "name": {
                    "value": "loss_debug",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1] + outputs[0][2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_152": {
                "name": {
                    "value": "learningRate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.optimizer.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_153": {
                "name": {
                    "value": "input_image1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "data['image'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_154": {
                "name": {
                    "value": "input_image2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "data['image2'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_87": {
                "inputs": {
                    "value": "self.nonlinear_head.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_101": {
                "values": {
                    "value": "strategie.experimental_local_results(hidden2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_128": {
                "values": {
                    "value": "[logits_ab, logits_aa]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_129": {
                "values": {
                    "value": "[logits_ba, logits_bb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/TargetModels/LinearClassifierFC.py": {
        "tensorflow": {
            "Adam_28": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_29": {
                "variable": {
                    "value": "self.loss_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalAccuracy_30": {
                "variable": {
                    "value": "self.accuracy_metrics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.linearClassifierFC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "self.linearClassifierFC(x, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_98": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_99": {
                "name": {
                    "value": "obj_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_100": {
                "name": {
                    "value": "reg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_101": {
                "name": {
                    "value": "acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InputLayer_33": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Flatten_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_35": {
                "units": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_104": {
                "name": {
                    "value": "loss_debug",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1] + outputs[0][2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "name": {
                    "value": "learningRate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_106": {
                "name": {
                    "value": "input_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "data['image'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Models/TargetModels/NonLinearClassifierFC.py": {
        "tensorflow": {
            "Adam_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_30": {
                "variable": {
                    "value": "self.loss_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CategoricalAccuracy_31": {
                "variable": {
                    "value": "self.accuracy_metrics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.linearClassifierFC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "self.linearClassifierFC(x, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_104": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_105": {
                "name": {
                    "value": "obj_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_106": {
                "name": {
                    "value": "reg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_107": {
                "name": {
                    "value": "acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InputLayer_35": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Flatten_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_40": {
                "units": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_110": {
                "name": {
                    "value": "loss_debug",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[0][1] + outputs[0][2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_111": {
                "name": {
                    "value": "learningRate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_112": {
                "name": {
                    "value": "input_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "data['image'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "units": {
                    "value": "units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_config['layers']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SyncBatchNormalization_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_39": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Trainer/MultiGpuTrainer.py": {
        "tensorflow": {
            "MirroredStrategy_19": {
                "variable": {
                    "value": "self.mirrored_strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cross_device_ops": {
                    "value": "tf.distribute.HierarchicalCopyAllReduce()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scale_regularization_loss_89": {
                "variable": {
                    "value": "scaled_regularization_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "regularization_loss": {
                    "value": "loss_reg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mirrored_strategy.reduce(tf.distribute.ReduceOp.SUM, scaled_regularization_losses, axis=None)",
                            "Call"
                        ],
                        [
                            "self.mirrored_strategy.reduce(tf.distribute.ReduceOp.SUM, scaled_regularization_loss, axis=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_108": {
                "variable": {
                    "value": "per_sample_losses_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.mirrored_strategy.experimental_local_results(per_sample_losses_obj)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_32": {
                "name": {
                    "value": "SingleGPUTrainingStep",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "compute_average_loss_37": {
                "variable": {
                    "value": "mean_loss_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_example_loss": {
                    "value": "per_sample_loss_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "global_batch_size": {
                    "value": "global_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scale_regularization_loss_38": {
                "variable": {
                    "value": "scaled_regularization_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "regularization_loss": {
                    "value": "loss_reg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mirrored_strategy.reduce(tf.distribute.ReduceOp.SUM, scaled_regularization_losses, axis=None)",
                            "Call"
                        ],
                        [
                            "self.mirrored_strategy.reduce(tf.distribute.ReduceOp.SUM, scaled_regularization_loss, axis=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "MultiGPUTrainingStep",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "SingleGPUValidationStep",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "MultiGPUValidationStep",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "HierarchicalCopyAllReduce_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Experiment_Component/Trainer/SingleGpuTrainer.py": {
        "tensorflow": {
            "name_scope_68": {
                "name": {
                    "value": "SingleGPUTraining",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_18": {
                "name": {
                    "value": "SingleGPUTrainingStep",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "variable": {
                    "value": "mean_loss_obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_sample_losses_obj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "SingleGPUValidationStep",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Output_Component/Summary/TensorboardSummaryManager.py": {
        "tensorflow": {
            "create_file_writer_17": {
                "variable": {
                    "value": "self.__summary_train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir + '/logs/train/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_18": {
                "variable": {
                    "value": "self.__summary_eval_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir + '/logs/eval/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_19": {
                "variable": {
                    "value": "self.__summary_test_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir + '/logs/test/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Output_Component/Summary/TxtFunctionTimeStopper.py": {
        "tensorflow": {}
    },
    "Preprocessing_Component/Preprocessing/CenterCropWithResize.py": {
        "tensorflow": {
            "cast_67": {
                "variable": {
                    "value": "image_width_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "image_height_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_36": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "crop_to_bounding_box_47": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(image_height - crop_height + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(image_width - crop_width + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "target_height": {
                    "value": "crop_height",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.rint(crop_proportion / aspect_ratio * image_width_float), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.math.rint(crop_proportion * image_height_float), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_width": {
                    "value": "crop_width",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.rint(crop_proportion * image_width_float), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.math.rint(crop_proportion * aspect_ratio * image_height_float), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_71": {
                "variable": {
                    "value": "crop_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.rint(crop_proportion / aspect_ratio * image_width_float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_73": {
                "variable": {
                    "value": "crop_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.rint(crop_proportion * image_width_float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_78": {
                "variable": {
                    "value": "crop_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.rint(crop_proportion * image_height_float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "crop_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.rint(crop_proportion * aspect_ratio * image_height_float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_85": {
                "pred": {
                    "value": "aspect_ratio > image_width_float / image_height_float",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_requested_aspect_ratio_wider_than_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_image_wider_than_requested_aspect_ratio",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "CenterCropWithResize",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_bicubic_48": {
                "images": {
                    "value": "[result]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rint_71": {
                "x": {
                    "value": "crop_proportion / aspect_ratio * image_width_float",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rint_73": {
                "x": {
                    "value": "crop_proportion * image_width_float",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rint_79": {
                "x": {
                    "value": "crop_proportion * image_height_float",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rint_80": {
                "x": {
                    "value": "crop_proportion * aspect_ratio * image_height_float",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/ClipByValue.py": {
        "tensorflow": {
            "clip_by_value_36": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.max_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_34": {
                "name": {
                    "value": "Clip",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/MaxDivNormalizer.py": {
        "tensorflow": {
            "divide_no_nan_33": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(input, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "float(self.max_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_31": {
                "name": {
                    "value": "'NormalizeTrough' + str(self.max_value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_33": {
                "x": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/OneHot.py": {
        "tensorflow": {
            "one_hot_33": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_31": {
                "name": {
                    "value": "OneHot",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/Random90xRotation.py": {
        "tensorflow": {
            "uniform_29": {
                "variable": {
                    "value": "rotation_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxval": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rot90_30": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "rotation_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0, maxval=4, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(rotation_label, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_32": {
                "variable": {
                    "value": "rotation_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "rotation_label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0, maxval=4, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(rotation_label, 4)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_26": {
                "name": {
                    "value": "Rotate",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/RandomColorJitter.py": {
        "tensorflow": {
            "rgb_to_grayscale_56": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ],
                        [
                            "random_apply(color_jitter_t, p=0.8, x=image)",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.tile(image, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "apply_transform(i, image, brightness, contrast, saturation, hue)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "apply_transform(perm[i], image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_58": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ],
                        [
                            "random_apply(color_jitter_t, p=0.8, x=image)",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.tile(image, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "apply_transform(i, image, brightness, contrast, saturation, hue)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "apply_transform(perm[i], image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_149": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.range(4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_37": {
                "name": {
                    "value": "RandomColorJitter",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_89": {
                "name": {
                    "value": "distort_color",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_106": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ],
                        [
                            "random_apply(color_jitter_t, p=0.8, x=image)",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.tile(image, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "apply_transform(i, image, brightness, contrast, saturation, hue)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "apply_transform(perm[i], image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_121": {
                "name": {
                    "value": "distort_color",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(i, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_by_value_152": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ],
                        [
                            "random_apply(color_jitter_t, p=0.8, x=image)",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.tile(image, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "apply_transform(i, image, brightness, contrast, saturation, hue)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "apply_transform(perm[i], image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(x, max_delta=brightness)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, 2), lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo), lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo))",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "brightness",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.8 * strength",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_contrast_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(x, max_delta=brightness)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, 2), lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo), lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo))",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "1 - contrast",
                    "type": "BinOp",
                    "possible_values": []
                },
                "upper": {
                    "value": "1 + contrast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_144": {
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(x, max_delta=brightness)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, 2), lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo), lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo))",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "1 - saturation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "upper": {
                    "value": "1 + saturation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_128": {
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(x, max_delta=brightness)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, 2), lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo), lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo))",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "brightness",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.8 * strength",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_contrast_133": {
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(x, max_delta=brightness)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, 2), lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo), lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo))",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "1 - contrast",
                    "type": "BinOp",
                    "possible_values": []
                },
                "upper": {
                    "value": "1 + contrast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_138": {
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(x, max_delta=brightness)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, 2), lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo), lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo))",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "1 - saturation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "upper": {
                    "value": "1 + saturation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_hue_143": {
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(x, max_delta=brightness)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, 2), lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo), lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo))",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "hue",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2 * strength",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cond_145": {
                "pred": {
                    "value": "tf.less(i, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "brightness_foo",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "contrast_foo",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_146": {
                "pred": {
                    "value": "tf.less(i, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "saturation_foo",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "hue_foo",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_hue_101": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(x, max_delta=brightness)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, 2), lambda : tf.cond(tf.less(i, 1), brightness_foo, contrast_foo), lambda : tf.cond(tf.less(i, 3), saturation_foo, hue_foo))",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "hue",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2 * strength",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_145": {
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_146": {
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/RandomCropWithResize.py": {
        "tensorflow": {
            "constant_57": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_92": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.crop_and_resize(image, height, width)",
                            "Call"
                        ],
                        [
                            "self.distorted_bounding_box_crop(image, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4 * aspect_ratio, 4.0 / 3.0 * aspect_ratio), area_range=(0.08, 1.0), max_attempts=100)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "sample_distorted_bounding_box_93": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_104": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_105": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_106": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.crop_and_resize(image, height, width)",
                            "Call"
                        ],
                        [
                            "self.distorted_bounding_box_crop(image, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4 * aspect_ratio, 4.0 / 3.0 * aspect_ratio), area_range=(0.08, 1.0), max_attempts=100)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_height": {
                    "value": "target_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "target_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "RandomCropWithResize",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_bicubic_66": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_91": {
                "name": {
                    "value": "distorted_bounding_box_crop",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/RandomHorizontalFlip.py": {
        "tensorflow": {
            "expand_dims_28": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_flip_left_right_29": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(result)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, result.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(input, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(result)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, result.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "result.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_26": {
                "name": {
                    "value": "RandomHorizontalFlip",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/RandomNormalNoise.py": {
        "tensorflow": {
            "clip_by_value_53": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "random_apply(_transform, p=self.noise_prop, x=input)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(result, self.min_range, self.max_range)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.min_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.max_range",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "'RandomNormalNoise' + str(self.noise_stddev)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_48": {
                "variable": {
                    "value": "train_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "self.noise_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stddev": {
                    "value": "self.noise_stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_49": {
                "variable": {
                    "value": "noisy_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "train_noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.normal(image.shape, mean=self.noise_mean, stddev=self.noise_stddev)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Preprocessing_Component/Preprocessing/ZeroMeanUnitVarianceNormalizer.py": {
        "tensorflow": {
            "cast_54": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(input, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(input, self.dataset_mean)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_55": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(input, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(input, self.dataset_mean)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.dataset_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_no_nan_58": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input[self.input_name]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(input, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.subtract(input, self.dataset_mean)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.dataset_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "ZeroMeanUnitVariance",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "list_physical_devices_76": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_inter_op_parallelism_threads_65": {
                "num_threads": {
                    "value": "cpu_cores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "math.ceil(q / p) if q > 0 and p > 0 else None",
                            "IfExp"
                        ],
                        [
                            "get_cpu_quota_within_docker() or multiprocessing.cpu_count()",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "set_intra_op_parallelism_threads_66": {
                "num_threads": {
                    "value": "cpu_cores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "math.ceil(q / p) if q > 0 and p > 0 else None",
                            "IfExp"
                        ],
                        [
                            "get_cpu_quota_within_docker() or multiprocessing.cpu_count()",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "is_built_with_cuda_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_inter_op_parallelism_threads_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_intra_op_parallelism_threads_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_physical_devices_70": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_logical_devices_83": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_physical_devices_62": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_memory_growth_82": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/functions.py": {
        "tensorflow": {
            "cond_60": {
                "pred": {
                    "value": "tf.less(tf.random.uniform([], minval=0, maxval=1, dtype=tf.float32), tf.cast(p, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : func(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "less_60": {
                "x": {
                    "value": "tf.random.uniform([], minval=0, maxval=1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(p, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_60": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}