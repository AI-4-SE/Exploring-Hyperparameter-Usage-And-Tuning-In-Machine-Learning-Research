{
    "reaver/agents/a2c.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "adv",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantages",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "returns",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "returns",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "input_tensor": {
                    "value": "self.policy.logli * adv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "input_tensor": {
                    "value": "(self.value - returns) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "input_tensor": {
                    "value": "self.policy.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/agents/base/actor_critic.py": {
        "tensorflow": {
            "global_norm_81": {
                "variable": {
                    "value": "self.grads_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "DEFAULTS['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(model_fn=None, policy_cls=None, optimizer=None, learning_rate=0.0003, value_coef=0.5, entropy_coef=0.01, traj_len=16, batch_sz=16, discount=0.99, gae_lambda=0.95, clip_rewards=0.0, clip_grads_norm=0.0, normalize_returns=False, normalize_advantages=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_83": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_grads_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DEFAULTS['clip_grads_norm']",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_norm": {
                    "value": "self.grads_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/agents/ppo.py": {
        "tensorflow": {
            "placeholder_88": {
                "variable": {
                    "value": "adv",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantages",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "returns",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "returns",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "logli_old",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "logli_old",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "value_old",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "value_old",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_93": {
                "variable": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.policy.logli - logli_old",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_94": {
                "variable": {
                    "value": "clipped_ratio",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(self.policy.logli - logli_old)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1 - self.clip_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1 + self.clip_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_98": {
                "variable": {
                    "value": "clipped_value",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "value_old - self.clip_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "value_old + self.clip_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_100": {
                "variable": {
                    "value": "value_err",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "value_err",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.value - returns) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(value_err, clipped_value_err)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "clipped_value_err",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(clipped_value - returns) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_102": {
                "input_tensor": {
                    "value": "tf.minimum(adv * ratio, adv * clipped_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "input_tensor": {
                    "value": "value_err",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.value - returns) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(value_err, clipped_value_err)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_104": {
                "input_tensor": {
                    "value": "self.policy.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_102": {
                "x": {
                    "value": "adv * ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "adv * clipped_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/models/base/cnn.py": {
        "tensorflow": {
            "Model_33": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[Input(s.shape, name='input_' + s.name) for s in obs_spec]",
                            "ListComp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[Dense(s.size(), name='logits_' + s.name)(x) for s in act_spec]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Input_12": {
                "shape": {
                    "value": "s.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'input_' + s.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "value_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Concatenate_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_24": {
                "units": {
                    "value": "s.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'logits_' + s.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "filters": {
                    "value": "n_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "'%sconv%02d' % (prefix, i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Flatten_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_43": {
                "units": {
                    "value": "dense",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "reaver/models/base/layers.py": {
        "tensorflow": {
            "maximum_30": {
                "variable": {
                    "value": "ct",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "self._ct",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_32": {
                "variable": {
                    "value": "ct_b",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "moments_33": {
                "variable": {
                    "value": "(mu_b, var_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_67": {
                "values": {
                    "value": "[inputs, tf.tile(self._var, (tf.shape(inputs)[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "x": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "assign_42": {
                "ref": {
                    "value": "self._ct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_ct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ct + ct_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_43": {
                "ref": {
                    "value": "self._mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._mu + delta * ct_b / new_ct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_44": {
                "ref": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self._var * ct + var_b * ct_b + delta ** 2 * ct * ct_b / new_ct) / new_ct",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_67": {
                "input": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(tf.shape(inputs)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_72": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_77": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_82": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_87": {
                "x": {
                    "value": "x + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_97": {
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(x, 2), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs / tf.sqrt(var)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "reaver/models/base/mlp.py": {
        "tensorflow": {
            "Model_40": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[build_logits(space, x, initializer) for space in act_spec]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Input_25": {
                "shape": {
                    "value": "s.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'input_' + s.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_36": {
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "value_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_44": {
                "units": {
                    "value": "space.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'logits_' + space.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_53": {
                "units": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'%sfc%02d' % (prefix, i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/models/base/policy.py": {
        "tensorflow": {
            "split_24": {
                "variable": {
                    "value": "(mu, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_9": {
                "dtype": {
                    "value": "s.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, *s.shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_25": {
                "x": {
                    "value": "logstd",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/models/sc2/fully_conv.py": {
        "tensorflow": {
            "squeeze_29": {
                "variable": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dense(1, name='value_out', **dense_cfg(scale=0.1))(fc)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(value, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Lambda_39": {
                "variable": {
                    "value": "mask_actions",
                    "type": "Name",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: tf.where(non_spatial_inputs[0] > 0, x, -1000 * tf.ones_like(x))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "mask_unavailable_action_ids",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Input_52": {
                "variable": {
                    "value": "inpt",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "space.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_input'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "block",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "inpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(space.shape, name=name + '_input')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "block",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "block",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.split(inpt, space.shape[0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat(block, axis=1)",
                            "Call"
                        ],
                        [
                            "Conv2D(16, 5, **cfg)(block)",
                            "Call"
                        ],
                        [
                            "Conv2D(32, 3, **cfg)(block)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_19": {
                "variable": {
                    "value": "non_spatial",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "non_spatial + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_21": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[screen, minimap, broadcasted_non_spatial]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_23": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[screen, minimap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_45": {
                "inputs": {
                    "value": "[screen_input, minimap_input] + non_spatial_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logits + [value]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_15": {
                "shape": {
                    "value": "s.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_25": {
                "name": {
                    "value": "state_flat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_26": {
                "units": {
                    "value": "fc_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_28": {
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "value_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "block[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "block[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "variable": {
                    "value": "block[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "block[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_63": {
                "variable": {
                    "value": "block[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "block[i] + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_66": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_67": {
                "filters": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_40": {
                "condition": {
                    "value": "non_spatial_inputs[0] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "-1000 * tf.ones_like(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "VarianceScaling_77": {
                "scale": {
                    "value": "2.0 * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "VarianceScaling_84": {
                "scale": {
                    "value": "2.0 * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Flatten_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "input_dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_34": {
                "filters": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "units": {
                    "value": "space.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_40": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/models/sc2/policy.py": {
        "tensorflow": {
            "constant_11": {
                "variable": {
                    "value": "args_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "act_spec.spaces[0].args_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_12": {
                "variable": {
                    "value": "act_args_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "args_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(act_spec.spaces[0].args_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_13": {
                "variable": {
                    "value": "act_args_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "act_args_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(args_mask, self.inputs[0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(act_args_mask, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/run.py": {
        "tensorflow": {
            "Session_77": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "disable_eager_execution_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_v2_behavior_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_77": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/utils/tensorflow.py": {
        "tensorflow": {
            "get_or_create_global_step_22": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_23": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.summaries_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_26": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_27": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.checkpoints_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_14": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_session_15": {
                "session": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=tf.ConfigProto(allow_soft_placement=True))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Summary_62": {
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_14": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SessionLog_34": {
                "status": {
                    "value": "tf.SessionLog.START",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "reaver/utils/typing.py": {
        "tensorflow": {}
    },
    "tests/test_convergence.py": {
        "tensorflow": {
            "Session_33": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, device_count={'GPU': 0})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_31": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_27": {
                "learning_rate": {
                    "value": "0.0007",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_33": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    }
}