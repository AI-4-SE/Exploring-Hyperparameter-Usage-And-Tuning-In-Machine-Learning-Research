{
    "main.py": {
        "torch": {
            "nll_loss_152": {
                "variable": {
                    "value": "true_label_contrib",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(transformed_img.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "model(transformed_img.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "model.base_model(transformed_img.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "np.squeeze(pred.detach().numpy())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.tensor([true_label_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_188": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([[0.25, 0.25], [0.25, 0.5], [0.25, 0.75], [0.5, 0.25], [0.5, 0.5], [0.5, 0.75], [0.75, 0.25], [0.75, 0.5], [0.75, 0.75]])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.color",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([[0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5]])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "meshgrid_101": {
                "variable": {
                    "value": "(hv, wv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(0, height), torch.arange(0, width)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "color_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nll_loss_154": {
                "variable": {
                    "value": "target_label_contrib",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(transformed_img.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "model(transformed_img.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "model.base_model(transformed_img.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "np.squeeze(pred.detach().numpy())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.tensor([target_label_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_104": {
                "input": {
                    "value": "-d ** beta + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "[true_label_idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_155": {
                "input": {
                    "value": "-true_label_contrib + target_label_contrib",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_157": {
                "input": {
                    "value": "-true_label_contrib",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "[[0.25, 0.25], [0.25, 0.5], [0.25, 0.75], [0.5, 0.25], [0.5, 0.5], [0.5, 0.75], [0.75, 0.25], [0.75, 0.5], [0.75, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[[0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5], [0.5, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "data": {
                    "value": "[target_label_idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_202": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data - param.grad.data * lr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_101": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}