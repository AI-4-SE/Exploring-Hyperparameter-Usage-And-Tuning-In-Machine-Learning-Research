{
    "models/real_nvp/coupling_layer.py": {
        "torch": {
            "weight_norm_39": {
                "variable": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_id, x_change)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_change, x_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st.chunk(2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.rescale(torch.tanh(s))",
                            "Call"
                        ],
                        [
                            "s * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "st.chunk(2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.rescale(torch.tanh(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_59": {
                "input": {
                    "value": "inv_exp_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.mul(-1).exp()",
                            "Call"
                        ],
                        [
                            "s.mul(-1).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_69": {
                "input": {
                    "value": "exp_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.exp()",
                            "Call"
                        ],
                        [
                            "s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_90": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st.chunk(2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.rescale(torch.tanh(s))",
                            "Call"
                        ],
                        [
                            "s * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "st.chunk(2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.rescale(torch.tanh(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_95": {
                "input": {
                    "value": "inv_exp_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.mul(-1).exp()",
                            "Call"
                        ],
                        [
                            "s.mul(-1).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_100": {
                "input": {
                    "value": "exp_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.exp()",
                            "Call"
                        ],
                        [
                            "s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/real_nvp/real_nvp.py": {
        "torch": {
            "ModuleList_100": {
                "variable": {
                    "value": "self.in_couplings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CouplingLayer(in_channels, mid_channels, num_blocks, MaskType.CHECKERBOARD, reverse_mask=False), CouplingLayer(in_channels, mid_channels, num_blocks, MaskType.CHECKERBOARD, reverse_mask=True), CouplingLayer(in_channels, mid_channels, num_blocks, MaskType.CHECKERBOARD, reverse_mask=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.out_couplings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CouplingLayer(4 * in_channels, 2 * mid_channels, num_blocks, MaskType.CHANNEL_WISE, reverse_mask=False), CouplingLayer(4 * in_channels, 2 * mid_channels, num_blocks, MaskType.CHANNEL_WISE, reverse_mask=True), CouplingLayer(4 * in_channels, 2 * mid_channels, num_blocks, MaskType.CHANNEL_WISE, reverse_mask=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[0.9]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_66": {
                "input": {
                    "value": "(1.0 - self.data_constraint).log() - self.data_constraint.log()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_split)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_split)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flows(x, sldj, reverse)",
                            "Call"
                        ],
                        [
                            "self._pre_process(x)",
                            "Call"
                        ],
                        [
                            "squeeze_2x2(x, reverse=False, alt_order=True)",
                            "Call"
                        ],
                        [
                            "x.chunk(2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.next_block(x, sldj, reverse)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x_split), dim=1)",
                            "Call"
                        ],
                        [
                            "squeeze_2x2(x, reverse=True, alt_order=True)",
                            "Call"
                        ],
                        [
                            "squeeze_2x2(x, reverse=False)",
                            "Call"
                        ],
                        [
                            "coupling(x, sldj, reverse)",
                            "Call"
                        ],
                        [
                            "coupling(x, sldj, reverse)",
                            "Call"
                        ],
                        [
                            "squeeze_2x2(x, reverse=False)",
                            "Call"
                        ],
                        [
                            "coupling(x, sldj, reverse)",
                            "Call"
                        ],
                        [
                            "squeeze_2x2(x, reverse=True)",
                            "Call"
                        ],
                        [
                            "coupling(x, sldj, reverse)",
                            "Call"
                        ],
                        [
                            "squeeze_2x2(x, reverse=True)",
                            "Call"
                        ],
                        [
                            "squeeze_2x2(x, reverse=False, alt_order=True)",
                            "Call"
                        ],
                        [
                            "x.chunk(2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.next_block(x, sldj, reverse)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x_split), dim=1)",
                            "Call"
                        ],
                        [
                            "squeeze_2x2(x, reverse=True, alt_order=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_65": {
                "input": {
                    "value": "-y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/real_nvp/real_nvp_loss.py": {
        "torch": {}
    },
    "models/resnet/residual_block.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.in_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.out_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.in_conv(x)",
                            "Call"
                        ],
                        [
                            "self.out_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_conv(x)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.in_conv(x)",
                            "Call"
                        ],
                        [
                            "self.out_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_conv(x)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/resnet/resnet.py": {
        "torch": {
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.in_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualBlock(mid_channels, mid_channels) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.skips",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[WNConv2d(mid_channels, mid_channels, kernel_size=1, padding=0, bias=True) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.out_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, -x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_norm(x)",
                            "Call"
                        ],
                        [
                            "x * 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x, -x), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.in_conv(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.out_norm(x_skip)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_conv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_norm(x)",
                            "Call"
                        ],
                        [
                            "x * 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x, -x), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.in_conv(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.out_norm(x_skip)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.out_conv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root=data_set_path, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root=data_set_path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RealNVP(num_scales=NUM_SCALES, in_channels=IN_CHANNELS, mid_channels=MID_CHANNELS, num_blocks=NUM_BLOCKS)",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net, args.gpu_ids)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.get_param_groups(net, args.weight_decay, norm_suffix='weight_g')",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_112": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_177": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and len(args.gpu_ids) > 0 else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "net(z, reverse=True)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_98": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpts/best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': net.state_dict(), 'test_loss': loss_meter.avg, 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpts/best.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_98": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and len(args.gpu_ids) > 0 else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "util/array_util.py": {
        "torch": {
            "tensor_103": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "checkerboard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[(i % 2 + j) % 2 for j in range(width)] for i in range(height)]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "squeeze_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[1.0, 0.0], [0.0, 0.0]]], [[[0.0, 0.0], [0.0, 1.0]]], [[[0.0, 1.0], [0.0, 0.0]]], [[[0.0, 0.0], [1.0, 0.0]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "perm_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4 * c, c, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "shuffle_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[c_idx * 4 for c_idx in range(c)] + [c_idx * 4 + 1 for c_idx in range(c)] + [c_idx * 4 + 2 for c_idx in range(c)] + [c_idx * 4 + 3 for c_idx in range(c)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b, h, w, c // 4, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 4, 2, 5, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, 2 * h, 2 * w, c // 4)",
                            "Call"
                        ],
                        [
                            "x.view(b, h // 2, 2, w // 2, 2, c)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 5, 2, 4)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, h // 2, w // 2, c * 4)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, perm_weight, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, perm_weight, stride=2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "perm_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((4 * c, c, 2, 2), dtype=x.dtype, device=x.device)",
                            "Call"
                        ],
                        [
                            "perm_weight[shuffle_channels, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b, h, w, c // 4, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 4, 2, 5, 3)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, 2 * h, 2 * w, c // 4)",
                            "Call"
                        ],
                        [
                            "x.view(b, h // 2, 2, w // 2, 2, c)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 5, 2, 4)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(b, h // 2, w // 2, c * 4)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, perm_weight, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, perm_weight, stride=2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "perm_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((4 * c, c, 2, 2), dtype=x.dtype, device=x.device)",
                            "Call"
                        ],
                        [
                            "perm_weight[shuffle_channels, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/norm_util.py": {
        "torch": {
            "weight_norm_57": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_80": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "util/optim_util.py": {
        "torch": {
            "clip_grad_norm__31": {
                "parameters": {
                    "value": "group['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_norm",
                            "Method Argument"
                        ]
                    ]
                },
                "norm_type": {
                    "value": "norm_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}