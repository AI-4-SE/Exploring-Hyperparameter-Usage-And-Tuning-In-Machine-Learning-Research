{
    "examples/edit_biggan.py": {
        "torch": {
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/invert_biggan_adam.py": {
        "torch": {}
    },
    "examples/invert_biggan_basincma.py": {
        "torch": {}
    },
    "examples/invert_biggan_cma.py": {
        "torch": {}
    },
    "examples/invert_biggan_hybrid_nevergrad.py": {
        "torch": {}
    },
    "examples/invert_biggan_nevergrad.py": {
        "torch": {}
    },
    "examples/invert_biggan_with_transform.py": {
        "torch": {
            "empty_cache_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/invert_stylegan2_cars_adam.py": {
        "torch": {
            "zeros_40": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "StyleGAN2(model='cars', search='z')",
                            "Call"
                        ],
                        [
                            "StyleGAN2(search='z')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/invert_stylegan2_cars_basincma.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "StyleGAN2(model='cars', search='z')",
                            "Call"
                        ],
                        [
                            "StyleGAN2(search='z')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/invert_stylegan2_cars_cma.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "StyleGAN2(model='cars', search='z')",
                            "Call"
                        ],
                        [
                            "StyleGAN2(search='z')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/invert_stylegan2_cars_hybrid_ng.py": {
        "torch": {
            "zeros_41": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "StyleGAN2(model='cars', search='z')",
                            "Call"
                        ],
                        [
                            "StyleGAN2(search='z')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/invert_stylegan2_cars_ng.py": {
        "torch": {
            "zeros_41": {
                "variable": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "StyleGAN2(model='cars', search='z')",
                            "Call"
                        ],
                        [
                            "StyleGAN2(search='z')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pix2latent/distribution.py": {
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fmod_34": {
                "input": {
                    "value": "_x + self.mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.trunc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_33": {
                "*size": {
                    "value": "(num_samples, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "(num_samples, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_57": {
                "*size": {
                    "value": "(samples, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/edit/editor.py": {
        "torch": {
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/edit/ganspace.py": {
        "torch": {
            "randn_27": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "12800",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "feat_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pca_lowrank_39": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "A": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.generator.gen_z(torch.cat([z, c], 1))",
                            "Call"
                        ]
                    ]
                },
                "q": {
                    "value": "num_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat - feat_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(feat_size, num_components, requires_grad=True).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[u]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "normalize_60": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.parameter.Parameter(torch.randn(feat_size, num_components, requires_grad=True).cuda())",
                            "Call"
                        ],
                        [
                            "F.normalize(u, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "feat_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_53": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(feat - feat_mean, v)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "u.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/loss_functions.py": {
        "torch": {
            "sum_48": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.repeat(out.size(0), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mask.repeat(out.size(0), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_59": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mask.repeat(out.size(0), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mask.repeat(out.size(0), 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_22": {
                "input": {
                    "value": "target - out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "(ims - inverted) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_74": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_param - orig_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_121": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * _weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_weight",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "weight if loss_mask == None else loss_mask * weight",
                            "IfExp"
                        ],
                        [
                            "weight if loss_mask == None else loss_mask * weight",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * _weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_weight",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "weight if loss_mask == None else loss_mask * weight",
                            "IfExp"
                        ],
                        [
                            "weight if loss_mask == None else loss_mask * weight",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_78": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(curr_param - orig_param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_78": {
                "input": {
                    "value": "curr_param - orig_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/model/biggan.py": {
        "torch": {
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(z, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/model/stylegan2.py": {
        "torch": {
            "load_84": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_meta['file_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "noise_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mean_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/base_cma_optimizer.py": {
        "torch": {
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "t_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "variables.transform.t.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/base_ng_optimizer.py": {
        "torch": {
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "t_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "variables.transform.t.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/base_optimizer.py": {
        "torch": {
            "stack_70": {
                "variable": {
                    "value": "src_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "variables[src_type][src_name].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "dst_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "variables[dst_type][dst_name].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_106": {
                "tensors": {
                    "value": "v_data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_117": {
                "tensors": {
                    "value": "variables.t.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/basincma_optimizer.py": {
        "torch": {
            "stack_81": {
                "tensors": {
                    "value": "list(self.out.cpu().detach())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/closure.py": {
        "torch": {
            "stack_79": {
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_49": {
                "tensors": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/cma_optimizer.py": {
        "torch": {
            "stack_91": {
                "tensors": {
                    "value": "list(self.out.cpu().detach())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/gradient_optimizer.py": {
        "torch": {
            "stack_54": {
                "tensors": {
                    "value": "list(self.out.cpu().detach())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/hybrid_ng_optimizer.py": {
        "torch": {
            "stack_79": {
                "tensors": {
                    "value": "list(self.out.cpu().detach())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/optimizer/ng_optimizer.py": {
        "torch": {
            "stack_89": {
                "tensors": {
                    "value": "list(self.out.cpu().detach())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/transform/color_transform.py": {
        "torch": {
            "clamp_51": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.t_inv_fn(t)",
                            "Call"
                        ],
                        [
                            "torch.clamp(t, self.t_min, self.t_max)",
                            "Call"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ],
                        [
                            "[0]",
                            "MethodArgument"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "self.t_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.t_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_59": {
                "tensors": {
                    "value": "[TVF.to_tensor(im) for im in ims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/transform/spatial_transform.py": {
        "torch": {
            "zeros_like_79": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._t.type_as(ims) + self.sensitivity * delta_t",
                            "BinOp"
                        ],
                        [
                            "[1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._t.type_as(ims) + self.sensitivity * delta_t",
                            "BinOp"
                        ],
                        [
                            "[1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grid_sample_84": {
                "input": {
                    "value": "ims",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "F.affine_grid(theta, ims.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_104": {
                "input": {
                    "value": "ims",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "F.affine_grid(theta, ims.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_65": {},
            "affine_grid_84": {
                "theta": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(t).view(-1, 1, t.size(1)).repeat(1, 2, 1)",
                            "Call"
                        ],
                        [
                            "theta.type_as(ims)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(t).view(-1, 1, t.size(1)).repeat(1, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "ims.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_104": {
                "theta": {
                    "value": "theta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(t).view(-1, 1, t.size(1)).repeat(1, 2, 1)",
                            "Call"
                        ],
                        [
                            "theta.type_as(ims)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(t).view(-1, 1, t.size(1)).repeat(1, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "ims.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/transform/transform_functions.py": {
        "torch": {
            "clamp_51": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.t_inv_fn(t)",
                            "Call"
                        ],
                        [
                            "torch.clamp(t, self.t_min, self.t_max)",
                            "Call"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ],
                        [
                            "[0]",
                            "MethodArgument"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ],
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "self.t_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.t_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_59": {
                "tensors": {
                    "value": "[TVF.to_tensor(im) for im in ims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/transform/transform_optimizer.py": {
        "torch": {
            "stack_36": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "variables.output.target.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "variables.output.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "self.vp_means[var_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "var_data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "self.vp_means[var_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "self.vp_means[var_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "var_data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_140": {
                "variable": {
                    "value": "self.vp_means[var_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_249": {
                "tensors": {
                    "value": "variables.output.target.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_251": {
                "tensors": {
                    "value": "list(self.out.cpu().detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_201": {
                "tensors": {
                    "value": "variables.transform.t.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_151": {
                "input": {
                    "value": "var_data.data[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/transform/transform_utils.py": {
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "transform_fn.get_param()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.concatenate(t)).unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "convert_to_t(src_center, src_size, dst_center, dst_size)",
                            "Call"
                        ],
                        [
                            "np.array([s, *dxy[::-1]])",
                            "Call"
                        ],
                        [
                            "t.repeat(ims.size(0), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "t_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self._t[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/utils/benchmark.py": {
        "torch": {
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/utils/function_hooks.py": {
        "torch": {
            "randn_like_99": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vars",
                            "Name"
                        ],
                        [
                            "vars",
                            "Name"
                        ],
                        [
                            "vars",
                            "Name"
                        ],
                        [
                            "vars",
                            "Name"
                        ]
                    ]
                }
            },
            "randn_like_68": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vars",
                            "Name"
                        ],
                        [
                            "vars",
                            "Name"
                        ],
                        [
                            "vars",
                            "Name"
                        ],
                        [
                            "vars",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "pix2latent/utils/image.py": {
        "torch": {
            "from_numpy_131": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(cv2.imread(mask)[:, :, :1] / 255.0 > 0.5).astype(np.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "(mask > 1.0 - eps).astype(float)",
                            "Call"
                        ],
                        [
                            "(mask > 1.0 - eps).float()",
                            "Call"
                        ],
                        [
                            "mask / 255.0",
                            "BinOp"
                        ],
                        [
                            "(mask > 0.5).astype(np.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_131": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_132": {
                "input": {
                    "value": "mask.unsqueeze(0).cuda().float()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_194": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(Image.open(im_path).convert('RGB'))",
                            "Call"
                        ],
                        [
                            "(im * 255).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(im)",
                            "Call"
                        ],
                        [
                            "to_image(im, cv2_format=False)",
                            "Call"
                        ],
                        [
                            "cv2.imread(im)[:, :, [2, 1, 0]]",
                            "Subscript"
                        ],
                        [
                            "im / 255.0",
                            "BinOp"
                        ],
                        [
                            "(2.0 * (torch.from_numpy(im).float() - 0.5)).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pix2latent/utils/misc.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remove_spectral_norm_154": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pix2latent/utils/project_utils.py": {
        "torch": {}
    },
    "pix2latent/variable_manager.py": {
        "torch": {
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}