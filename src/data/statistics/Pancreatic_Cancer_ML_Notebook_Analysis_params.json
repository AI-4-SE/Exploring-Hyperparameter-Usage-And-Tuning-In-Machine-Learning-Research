{
    "common_ml_pipe_code/data_processing_methods.py": {
        "sklearn": {
            "StandardScaler_250": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "IterativeImputer_316": {
                "variable": {
                    "value": "x_new_train",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "randomSeed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randomSeed",
                            "Method Argument"
                        ],
                        [
                            "randomSeed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "IterativeImputer_337": {
                "variable": {
                    "value": "x_new_test",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "randomSeed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randomSeed",
                            "Method Argument"
                        ],
                        [
                            "randomSeed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "common_ml_pipe_code/feature_selection_methods.py": {
        "sklearn": {
            "mutual_info_classif_98": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "xTrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xTrain",
                            "Method Argument"
                        ],
                        [
                            "xTrain",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "yTrain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yTrain",
                            "Method Argument"
                        ],
                        [
                            "yTrain",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "randSeed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "common_ml_pipe_code/modeling_methods.py": {
        "sklearn": {
            "confusion_matrix_47": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_49": {
                "variable": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_50": {
                "variable": {
                    "value": "bac",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "recall_score_51": {
                "variable": {
                    "value": "re",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_score_52": {
                "variable": {
                    "value": "pr",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "f1_score_53": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['Endpoint Predictions'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "auc_216": {
                "variable": {
                    "value": "mean_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_254": {
                "variable": {
                    "value": "mean_pr_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "StratifiedKFold_355": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "hype_cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ],
                        [
                            "hype_cv",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "randSeed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ],
                        [
                            "randSeed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clone_356": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogisticRegression_379": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_397": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_398": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_415": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_416": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_419": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_421": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_422": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_445": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_463": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_464": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_481": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_482": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_485": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_487": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_488": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_512": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestClassifier_530": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_531": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_548": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_549": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_552": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_554": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_555": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GaussianNB_567": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roc_curve_583": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_584": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_587": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_589": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_590": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clone_644": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_661": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_662": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_665": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_667": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_668": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clone_720": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_737": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_738": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_741": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_743": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_744": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SVC_765": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_783": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_784": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_801": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_802": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_805": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_807": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_808": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MLPClassifier_837": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MLPClassifier_865": {
                "variable": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_866": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "est",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "LogisticRegression()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "tree.DecisionTreeClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "xgb.XGBClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "lgb.LGBMClassifier()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "SVC()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "MLPClassifier()",
                            "Call"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ],
                        [
                            "est",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_883": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_884": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_887": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_889": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_890": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_curve_905": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_906": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "fpr",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "metrics.roc_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "tpr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_909": {
                "variable": {
                    "value": "(prec, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_911": {
                "variable": {
                    "value": "prec_rec_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "recall[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_LR_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_DT_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_RF_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_NB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], i, name_path)",
                            "Call"
                        ],
                        [
                            "run_XGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_LGB_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_ANN_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "run_SVM_full(xTrainList[i], yTrainList[i], xTestList[i], yTestList[i], randSeed, i, param_grid[algorithm], name_path, hype_cv, n_trials, scoring_metric, timeout, wd_path, output_folder, algorithm, data_name)",
                            "Call"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "metrics.precision_recall_curve(y_test, probas_[:, 1])",
                            "Call"
                        ],
                        [
                            "prec[::-1]",
                            "Subscript"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ],
                        [
                            "run_LCS_full(caseProbs, controlProbs, y_pred, y_test, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_912": {
                "variable": {
                    "value": "ave_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probas_[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_1006": {
                "variable": {
                    "value": "mean_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_1036": {
                "variable": {
                    "value": "mean_pr_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_1151": {
                "variable": {
                    "value": "mean_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_1181": {
                "variable": {
                    "value": "mean_pr_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ],
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_prec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ],
                        [
                            "np.mean(precs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_val_score_361": {
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clone(est).set_params(**params)",
                            "Call"
                        ],
                        [
                            "clf.fit(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "clf.fit(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "clf.fit(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "clf.fit(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "clf.fit(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "clf.fit(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "clf.fit(x_train, y_train)",
                            "Call"
                        ],
                        [
                            "clf.fit(x_train, y_train)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ],
                        [
                            "x_train",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ],
                        [
                            "y_train",
                            "Method Argument"
                        ]
                    ]
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StratifiedKFold(n_splits=hype_cv, shuffle=True, random_state=randSeed)",
                            "Call"
                        ]
                    ]
                },
                "scoring": {
                    "value": "scoring_metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ],
                        [
                            "scoring_metric",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_337": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "df['True Endpoint'].values.tolist()",
                            "Call"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ],
                        [
                            "y_test",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "FIyPred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(FIxTestList)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}