{
    "base.py": {
        "sklearn": {
            "f1_score_423": {
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "clamp_74": {
                "variable": {
                    "value": "perturbed_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image + epsilon * sign_data_grad",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(perturbed_image, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "range(w)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "p_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(x, 2)",
                            "Call"
                        ],
                        [
                            "p.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(p, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "torch.softmax(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "range(w)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_172": {
                "variable": {
                    "value": "_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.sum(p * torch.log(p + 1e-12), -1) / np.log(classes)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_187": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_257": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_90": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "range(w)",
                            "Call"
                        ],
                        [
                            "x.view(x.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_246": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "l(input_image)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "input_image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_310": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "l(input_image)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "input_image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_655": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, device=self.device) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_657": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[temperature]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_659": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nll_loss_93": {
                "input": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(x, -1)",
                            "Call"
                        ],
                        [
                            "_x.mean(0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(h)",
                            "Call"
                        ],
                        [
                            "y.to(self.device)",
                            "Call"
                        ],
                        [
                            "y.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log10_178": {
                "input": {
                    "value": "preds + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_195": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "i[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MaxPool2d_266": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "i[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_314": {
                "in_features": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "input_image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "p.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "p.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_671": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_672": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_674": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outs, pred.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "div_679": {
                "variable": {
                    "value": "_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outs.to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.ones(1, device=self.device) * 1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_681": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(_outs + 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_703": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_171": {
                "input": {
                    "value": "p * torch.log(p + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_180": {
                "input": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log10(preds + 1e-12) * preds",
                            "BinOp"
                        ],
                        [
                            "torch.nn.MaxPool2d(kernel_size=i[1], stride=i[2])",
                            "Call"
                        ],
                        [
                            "torch.nn.ReLU()",
                            "Call"
                        ],
                        [
                            "torch.nn.Sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.nn.Dropout(p=0.5)",
                            "Call"
                        ],
                        [
                            "torch.nn.AvgPool2d(kernel_size=i[1], stride=i[2])",
                            "Call"
                        ],
                        [
                            "BayesianCNNLayer(in_channels=prev, kernels=size, kernel_size=kernel_size, posterior_type=posterior_type, mu_init=mu_init, divergence=divergence, local_rep_trick=local_trick, stride=stride, rho_init=rho_init, prior=prior, padding=padding, **kwargs)",
                            "Call"
                        ],
                        [
                            "BayesianLinearLayer(in_size=prev, out_size=size, mu_init=mu_init, divergence=divergence, rho_init=rho_init, prior=prior, local_rep_trick=local_trick, use_bias=bias, posterior_type=posterior_type, **kwargs)",
                            "Call"
                        ],
                        [
                            "torch.nn.MaxPool2d(kernel_size=i[1], stride=i[2])",
                            "Call"
                        ],
                        [
                            "torch.nn.ReLU()",
                            "Call"
                        ],
                        [
                            "torch.nn.Dropout(p=0.5)",
                            "Call"
                        ],
                        [
                            "torch.nn.AvgPool2d(kernel_size=i[1], stride=i[2])",
                            "Call"
                        ],
                        [
                            "torch.nn.Conv2d(in_channels=prev, out_channels=size, stride=stride, kernel_size=kernel_size, bias=False, padding=padding)",
                            "Call"
                        ],
                        [
                            "torch.nn.Linear(prev, i, bias=bias)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_272": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_369": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.ones(1, device=self.device) * 1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_371": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_514": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_580": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_593": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_594": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.sample(out.size()[-1])",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_596": {
                "variable": {
                    "value": "(prob, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_62": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_82": {
                "input": {
                    "value": "sigma + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_204": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_275": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_412": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_415": {
                "variable": {
                    "value": "(top_score, top_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_471": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_539": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.mul(out, temperature)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(perturbed_data, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, scaling)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "self.model.eval_forward(x.to(self.device), samples=1)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_655": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_681": {
                "input": {
                    "value": "_outs + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_703": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_171": {
                "input": {
                    "value": "p + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_207": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AvgPool2d_278": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "i[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_460": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_210": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "i[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_285": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "input_image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "size",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "i",
                            "variable"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "input_image.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_image.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(t)",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "range(len(true_label))",
                            "Call"
                        ],
                        [
                            "np.logical_and(y_prob <= b / bins, y_prob > (b - 1) / bins)",
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99
                            ],
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_294": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "l(input_image)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "input_image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_227": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "l(input_image)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "input_image.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "l(input_image)",
                            "Call"
                        ],
                        [
                            "torch.flatten(input_image, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "classification_training.py": {
        "sklearn": {
            "f1_score_365": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_370": {
                "variable": {
                    "value": "f1_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_346": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_97": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('./Datasets/MNIST', train=True, download=True, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./Datasets/CIFAR10', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./Datasets/CIFAR100', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('batch_size', 64)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SubsetRandomSampler(idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('./Datasets/MNIST', train=False, download=True, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./Datasets/CIFAR10', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./Datasets/CIFAR100', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('batch_size', 64)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_94": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(train_split.data.shape[0], train_size, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_247": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_316": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "results_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(current_path, 'results_{}.data'.format(e))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_283": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_opt(model.parameters(), lr=lr, momentum=moment)",
                            "Call"
                        ],
                        [
                            "_opt(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_scheduler.get('decay', 0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_413": {
                "f": {
                    "value": "best_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(current_path, 'best_model_{}.data'.format(e))",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialLR_287": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_opt(model.parameters(), lr=lr, momentum=moment)",
                            "Call"
                        ],
                        [
                            "_opt(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_scheduler.get('decay', 0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_291": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_opt(model.parameters(), lr=lr, momentum=moment)",
                            "Call"
                        ],
                        [
                            "_opt(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_scheduler.get('decay', 0.1)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "patience": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_404": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main(experiments)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(results_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "results_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(current_path, 'results_{}.data'.format(e))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_389": {
                "obj": {
                    "value": "t.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "best_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(current_path, 'best_model_{}.data'.format(e))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(a)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(b)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ANN.py": {
        "torch": {
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BBB.py": {
        "torch": {
            "stack_56": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_57": {
                "variable": {
                    "value": "log_priors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(log_priors)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_58": {
                "variable": {
                    "value": "log_posts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_posts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(log_posts)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1).mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "BMMD.py": {
        "torch": {
            "stack_52": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_54": {
                "variable": {
                    "value": "mmds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mmds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mmds).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_54": {
                "variable": {
                    "value": "mmds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "l2_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1).mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_72": {
                "input": {
                    "value": "i.w.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_74": {
                "input": {
                    "value": "i.b.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DropoutNet.py": {
        "torch": {
            "stack_38": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(o)",
                            "Call"
                        ],
                        [
                            "self(x, samples=samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.p, training=True, inplace=False)",
                            "Call"
                        ],
                        [
                            "i(x)",
                            "Call"
                        ],
                        [
                            "x.to(self.device)",
                            "Call"
                        ],
                        [
                            "out",
                            "variable"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x, samples=samples)",
                            "Call"
                        ],
                        [
                            "out.mean(0)",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, -1).mean(0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "l2_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_90": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bayesian_layers.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "mmd_w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "mmd_b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "log_post",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "log_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "flatten_48": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(w, 1)",
                            "Call"
                        ],
                        [
                            "self.w.weights",
                            "Attribute"
                        ],
                        [
                            "self.w.weights",
                            "Attribute"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_129": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(w, 1)",
                            "Call"
                        ],
                        [
                            "self.w.weights",
                            "Attribute"
                        ],
                        [
                            "self.w.weights",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "variable": {
                    "value": "w_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.w.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_133": {
                "variable": {
                    "value": "w_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-12 + F.conv2d(x.pow(2), weight=self.w.sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_168": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(w, 1)",
                            "Call"
                        ],
                        [
                            "self.w.weights",
                            "Attribute"
                        ],
                        [
                            "self.w.weights",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.b.weights",
                            "Attribute"
                        ],
                        [
                            "self.b.weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linear_171": {
                "variable": {
                    "value": "w_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.w.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_173": {
                "variable": {
                    "value": "w_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-12 + F.linear(input=x.pow(2), weight=self.w.sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_194": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "mmd_b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "mmd_w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_57": {
                "input": {
                    "value": "mmd_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).to(x.device)",
                            "Call"
                        ],
                        [
                            "compute_mmd(b, self.prior_b.sample(b.size()).to(w.device), type=self.kernel, biased=self.biased)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_59": {
                "input": {
                    "value": "mmd_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).to(x.device)",
                            "Call"
                        ],
                        [
                            "compute_mmd(w, self.prior_w.sample(w.size()).to(w.device), type=self.kernel, biased=self.biased)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_133": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.w.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_135": {
                "*size": {
                    "value": "w_std.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_173": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.w.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_175": {
                "*size": {
                    "value": "w_mu.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "bayesian_utils.py": {
        "torch": {
            "sum_121": {
                "variable": {
                    "value": "pnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "qnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(rho_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(rho_size).uniform_(a, b)",
                            "Call"
                        ],
                        [
                            "torch.zeros(rho_size).normal_(mu, sigma)",
                            "Call"
                        ],
                        [
                            "torch.ones(rho_size) * rho_initialization['c']",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_116": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "input": {
                    "value": "1e-05 + torch.abs(distances_squared)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_134": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_norm + y_norm - 2.0 * torch.mm(x, torch.transpose(y, 0, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_187": {
                "input": {
                    "value": "mmd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XX.mean() + YY.mean() - 2 * XY.mean()",
                            "BinOp"
                        ],
                        [
                            "1 / xs ** 2 * XX + 1 / xs ** 2 * YY - 2 / (xs * xs) * XY",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_16": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(size)",
                            "Call"
                        ],
                        [
                            "mu_initialization['type']",
                            "Subscript"
                        ],
                        [
                            "rho_initialization['type']",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rho_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "(1,)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "list(size)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_86": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_90": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "snr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean / std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_106": {
                "loc": {
                    "value": "self.mu.data.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.log(1 + torch.exp(self.rho)).clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "[xs, xs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_154": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-xxd * gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_155": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-yyd * gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_156": {
                "variable": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-xyd * gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size).uniform_(a, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rho_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "(1,)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "list(size)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_99": {
                "input": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_101": {
                "input": {
                    "value": "F.softplus(self.rho)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.mu.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_103": {
                "input": {
                    "value": "F.softplus(self.rho)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.mu.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_106": {
                "input": {
                    "value": "1 + torch.exp(self.rho)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_126": {
                "input": {
                    "value": "distances_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norms - 2 * p.mm(q.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_133": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(y, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_169": {
                "variable": {
                    "value": "xxk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sqrt(a + xxd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_170": {
                "variable": {
                    "value": "yyk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sqrt(a + yyd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_171": {
                "variable": {
                    "value": "xyk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sqrt(a + xyd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size).normal_(mu, sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rho_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "(1,)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "list(size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_83": {
                "*size": {
                    "value": "self.mu.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_101": {
                "input": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_103": {
                "input": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_133": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(size) * mu_initialization['c']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "percentile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.percentile(snr.cpu(), self.mask * 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_169": {
                "input": {
                    "value": "a + xxd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_170": {
                "input": {
                    "value": "a + yyd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_171": {
                "input": {
                    "value": "a + xyd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "rho_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "(1,)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "list(size)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_106": {
                "input": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "classification_plots.py": {
        "torch": {
            "DataLoader_144": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('./Datasets/MNIST', train=True, download=True, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./Datasets/CIFAR10', train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./Datasets/CIFAR100', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('batch_size', 64)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SubsetRandomSampler(idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('./Datasets/MNIST', train=False, download=True, transform=image_transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR10(root='./Datasets/CIFAR10', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./Datasets/CIFAR100', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('batch_size', 64)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_141": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(train_split.data.shape[0], train_size, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_391": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_420": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "results_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(current_path, 'results_{}.data'.format(e))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_427": {
                "f": {
                    "value": "best_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(current_path, 'best_model_{}.data'.format(e))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_regression.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RegressionDataset(x[train_idx], y[train_idx])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('batch_size', 10)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RegressionDataset(x[test_idx], y[test_idx])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('batch_size', 10)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_211": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed + int(noise * 100)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_248": {
                "variable": {
                    "value": "x_true",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "points_range[0] - dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "points_range[1] + dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(a)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(b)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "priors.py": {
        "torch": {
            "Normal_9": {
                "variable": {
                    "value": "self.inner_gaussian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Laplace_22": {
                "variable": {
                    "value": "self.distribution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_50": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}